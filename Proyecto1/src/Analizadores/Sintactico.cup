package Analizadores;
import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*; 
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;

parser code
{:
	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static List<String> ErroresSintacticos = new ArrayList<>();
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }

:}

//Terminales

terminal String Tmenos, Tmas, Tpor, Tdiv, Tdiferente, Tigual, Tigualigual, Tmenor, Tmayor, Tor, Tand, Tllave_a, Tllave_c,
                Tcorchete_a, Tcorchete_c, Tpycoma, Tpar_a, Tpar_c, Tcoma, Tmod, Tmayorigual, Tmenorigual, Tnot,Tpotencia,
                Tdospuntos, Tincremento, Tdecremento, Tpunto,Tent, Tdec, Tchr, Tbul, Tnlo, Tpesode, Treservar, Tzro, Tif,
                Twhile, Tfor, Trepeat, Tswitch, Tcase, Tdefault, Tromper, Tsiga, Tdefinir, Tfusion, Timportar, Tregresar,
                Twhen, Ttrue, Tfalse, Tatxt, Tconc, Taent, Tadec, Teqls, Telse, Timp, Twrite, Tapend, Twf, Tclose, Tread, 
                Tlbl, Trtxt, Trtxta, Trtxtp, Trtxtn, Trbton, Trmensage, Tiniciarventana, Taldarclick, Taltoyancho, Tsettexto,
                Tsetancho, Tsetalto, Tsetpos, Tgettexto, Tgetancho, Tgetalto, Tgetpos, Tnuevogui, Tproyecto, Tarchivo, Truta,
                Tcarpeta, Tnombre, Tcorrer, Tconfiguracion, Tfechamod, Tid, Tdecimal, Tentero, Tcadena,Tcaracter; 

// Producciones				
non terminal String S;
non terminal LinkedList<Instruccion> INSTRUCCIONES, CONTENIDO, PARAMETROS;
non terminal Instruccion  INSTRUCCION, DECLARACION, ASIGNACION, CONSTANTE, FUNCION, PARAMETRO, SENTENCIA, METODO;
non terminal Operacion OPERACION_NUMERICA,VALOR, OPERACION_RELACIONAL, OPERACION_LOGICA;
non terminal Tipo TIPODATO;


//Procedencia 
precedence left Tmas, Tmenos;
precedence left Tpor, Tdiv, Tmod;
precedence left Tpotencia;

//Inicio de Gramatica
start with S;

S::=INSTRUCCIONES:a{: AST= a; :};

INSTRUCCIONES::= INSTRUCCIONES:Lista1 INSTRUCCION:instru
			{: 	Lista1.add(instru);
				RESULT = Lista1;
			:}
            | INSTRUCCION:instru
			{: 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			:};

INSTRUCCION::= DECLARACION:a {: RESULT = a; :}
			| ASIGNACION:a {: RESULT = a; :}
            | CONSTANTE:a{: RESULT = a; :}
            | FUNCION:a {: RESULT = a; :}
            | METODO:a {: RESULT = a; :}
			;

DECLARACION::= TIPODATO:a Tid:b Tpycoma {: RESULT = new Declaracion(a,a,b, bleft, bright); :}
            | TIPODATO: a Tid:b Tigual OPERACION_NUMERICA:c Tpycoma {: RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); :}
            ;

TIPODATO::=	Tent:a{: RESULT = Tipo.Entero; :}
		|	Tdec:a{: RESULT = Tipo.Decimal; :}
		|	Tchr:a{: RESULT = Tipo.Char; :}
		|	Tbul:a{: RESULT = Tipo.Bool; :}
		;
		
ASIGNACION::= Tid:a Tigual OPERACION_NUMERICA:b Tpycoma{: RESULT = new Asignacion(a,b,aleft,aright); :}
        ;

CONSTANTE::= Tdefinir Tid:a OPERACION_NUMERICA:b {: RESULT = new Definir(a,b,aleft,aright); :}
        ;

FUNCION::= TIPODATO:a Tid:b Tpar_a PARAMETROS:c Tpar_c Tllave_a CONTENIDO:d Tllave_c {:
            RESULT= new Funcion(a,b,c,d,bleft,bright);
        :}
        |TIPODATO:a Tid:b Tpar_a Tpar_c Tllave_a CONTENIDO:d Tllave_c {:
            RESULT= new Funcion(a,b,d,bleft,bright);
        :};

METODO::= Tzro Tid:a Tpar_a PARAMETROS:b Tpar_c Tllave_a CONTENIDO:c Tllave_c {:
            RESULT= new Metodo(a,b,c,aleft,aright);
        :}
        |Tzro Tid:a Tpar_a Tpar_c Tllave_a CONTENIDO:c Tllave_c {:
            RESULT= new Metodo(a,c,aleft,aright);
        :};

PARAMETROS::= PARAMETROS:a Tcoma PARAMETRO:b {: a.add(b); RESULT = a; :}
            | PARAMETRO:a {: LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; :}
            ;
PARAMETRO::= TIPODATO:a Tid:b {: RESULT = new Declaracion(a,a,b, bleft, bright); :}
        ;

CONTENIDO::= CONTENIDO:a SENTENCIA:b {: a.add(b); RESULT = a; :}
            | SENTENCIA:a {: LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; :}
            ;

SENTENCIA::= DECLARACION:a {: RESULT = a; :}
		| ASIGNACION:a {: RESULT = a; :}
        ;

OPERACION_LOGICA::= OPERACION_LOGICA Tor OPERACION_LOGICA
                |   OPERACION_LOGICA Tand OPERACION_LOGICA
                |   Tnot OPERACION_LOGICA:a {: RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); :}
                |   Tpar_a OPERACION_LOGICA:a Tpar_c {: RESULT = a; :}
                |   OPERACION_RELACIONAL:a {: RESULT = a; :} 
                ;

OPERACION_RELACIONAL::= OPERACION_RELACIONAL:a Tmayor OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmenor OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmayorigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmenorigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tdiferente OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); :}
                    |   Tpar_a OPERACION_RELACIONAL:a Tpar_c {: RESULT = a; :}
                    |   OPERACION_NUMERICA:a {: RESULT = a; :}
                    ;

OPERACION_NUMERICA::= Tmenos OPERACION_NUMERICA:a{: RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmas OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmenos OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); :}
        | OPERACION_NUMERICA:a Tpor OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); :}
        | OPERACION_NUMERICA:a Tdiv OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmod OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); :}
        | OPERACION_NUMERICA:a Tpotencia OPERACION_NUMERICA:b {: RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); :}
        | Tpar_a OPERACION_NUMERICA:a Tpar_c {: RESULT = a; :}
        | VALOR:a {: RESULT = a;:}
        ;



VALOR::= Tid:a {: RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); :}
        |Tentero:a {: RESULT = new Operacion(a, aright, aleft); :}
        |Tdecimal:a {: RESULT = new Operacion(a, aright, aleft); :}
        |Tcaracter:a {: RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); :}
        |Ttrue:a {: RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); :}
        |Tfalse:a {: RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); :}
        ;
		








