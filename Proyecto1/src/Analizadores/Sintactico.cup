package Analizadores;
import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*; 
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;
import Tipos_Importantes.*;

parser code
{:
	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<>();
    
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.left+1)+ " Columna "+(s.right+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }

:}

//Terminales

terminal String Tmenos, Tmas, Tpor, Tdiv, Tdiferente, Tigual, Tigualigual, Tmenor, Tmayor, Tor, Tand, Tllave_a, Tllave_c,
                Tcorchete_a, Tcorchete_c, Tpycoma, Tpar_a, Tpar_c, Tcoma, Tmod, Tmayorigual, Tmenorigual, Tnot,Tpotencia,
                Tdospuntos, Tincremento, Tdecremento, Tpunto,Tent, Tdec, Tchr, Tbul, Tnlo, Tpesode, Treservar, Tzro, Tif,
                Twhile, Tfor, Trepeat, Tswitch, Tcase, Tdefault, Tromper, Tsiga, Tdefinir, Tfusion, Timportar, Tregresar,
                Twhen, Ttrue, Tfalse, Tatxt, Tconc, Taent, Tadec, Teqls, Telse, Telseif, Timp, Twrite, Tapend, Twf, Tclose, Tread, 
                Tlbl, Trtxt, Trtxta, Trtxtp, Trtxtn, Trbton, Trmensage, Tiniciarventana, Taldarclick, Taltoyancho, Tsettexto,
                Tsetancho, Tsetalto, Tsetpos, Tgettexto, Tgetancho, Tgetalto, Tgetpos, Tnuevogui, Tproyecto, Tarchivo, Truta,
                Tcarpeta, Tcorrer, Tconfiguracion, Tfechamod, Tid, Tdecimal, Tentero, Tcadena, Tcaracter, Trstring; 

// Producciones				
non terminal String S;
non terminal LinkedList<Instruccion> INSTRUCCIONES, CONTENIDO, PARAMETROS, DECLARACIONES;
non terminal Instruccion  INSTRUCCION, DECLARACION, ASIGNACION, CONSTANTE, FUNCION, PARAMETRO, SENTENCIA, METODO, DECLARACION_STRUCT,
                          RETORNAR, LLAMADA, IMPRIMIR, ARREGLO, ARREGLO_SIMPLE, ARREGLO_MULTI, REFERENCIA, FUSION, ASIGNACION_FUSION,
                          DECLARACION_FUSION, ASIGNACION_ARREGLO;
non terminal Operacion OPERACION_NUMERICA,VALOR, OPERACION_RELACIONAL, OPERACION_LOGICA, VALOR_PARAMETRO,DIMENSION,ACCESO_ARREGLO, ACCESO_STRUCT;
non terminal LinkedList<Operacion> VALORES_PARAMETROS,DIMENSIONES;
non terminal LinkedList<Sentencia_IF> ELSE_IF;
non terminal Tipo_IF SENTENCIA_IF;
non terminal LinkedList<Object> LLAVES;
non terminal Object LLAVE; 
non terminal Sentencia_IF ELSE;
non terminal ArrayList<String> LISTA_ACCESOS_FUSION;
non terminal Tipo TIPODATO;
non terminal Integer DIMENSION_VACIA;
non terminal ArrayList<Integer> DIMENSIONES_VACIAS;


//Procedencia 
precedence left Tor;
precedence left Tand;
precedence left Tnot;
precedence left Tigualigual,Tdiferente,Tmenor,Tmenorigual,Tmayor,Tmayorigual;
precedence left Tmas, Tmenos;
precedence left Tpor, Tdiv, Tmod;
precedence left Tpotencia;

//Inicio de Gramatica
start with S;

S::=INSTRUCCIONES:a{: AST= a; :};

INSTRUCCIONES::= INSTRUCCIONES:Lista1 INSTRUCCION:instru
			{: 	Lista1.add(instru);
				RESULT = Lista1;
			:}
            | INSTRUCCION:instru
			{: 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			:};

INSTRUCCION::= DECLARACION:a {: RESULT = a; :}
			| ASIGNACION:a {: RESULT = a; :}
            | CONSTANTE:a{: RESULT = a; :}
            | FUNCION:a {: RESULT = a; :}
            | METODO:a {: RESULT = a; :}
            | ARREGLO:a {: RESULT = a; :}
            | REFERENCIA:a {: RESULT = a; :}
            | FUSION:a {: RESULT = a; :}
            | ASIGNACION_FUSION:a {: RESULT = a; :}
            | DECLARACION_FUSION:a {: RESULT = a; :}
            | ASIGNACION_ARREGLO:a {:RESULT =a; :}
			;

FUSION::= Tfusion Tid:a Tllave_a DECLARACIONES:b Tllave_c Tpycoma
            {: RESULT = new Struct(a,b,aleft,bleft); :}
            ;

DECLARACIONES::= DECLARACIONES:a DECLARACION_STRUCT:b {: a.add(b); RESULT = a; :}
            | DECLARACION_STRUCT:a {: LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; :}
            ;

DECLARACION_STRUCT::=   TIPODATO:a Tid:b Tpycoma {: RESULT = new Declaracion(a,a,b, bleft, bright); :}
                    |   Tid:tipo Tid:id Tpycoma{: RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);:}
                    |   TIPODATO:a Tid:b DIMENSIONES:d Tpycoma
                    {: RESULT = new Arreglo(a,b,d,bleft, bright); :}
                    ;

ASIGNACION_FUSION::= Tid:a Tpunto LISTA_ACCESOS_FUSION:b Tigual OPERACION_LOGICA:c Tpycoma {: RESULT = new Asignacion_Fusion(a,b,c,aleft,aright); :}
                    |Tid:id Tigual Treservar Tpar_a Tpesode Tpar_a Tid:tipo2 Tpar_c Tpar_c Tpycoma
                    {:RESULT = new Asignacion_Fusion(id,tipo2,idleft,idright);:}
                    ;
DECLARACION_FUSION::= Tid:tipo Tid:id Tpycoma{: RESULT = new Declaracion_Objeto(tipo,id,idleft,idright); :}
                    | Tid:tipo Tid:id  Tigual OPERACION_RELACIONAL:valor Tpycoma
                    {: RESULT = new Declaracion_Fusion(tipo,id,valor,idleft,idright); :}
                    | Tid:tipo Tid:id Tigual Treservar Tpar_a Tpesode Tpar_a Tid:tipo2 Tpar_c Tpar_c Tpycoma
                    {:RESULT = new Declaracion_Fusion(tipo,id,tipo2,idleft,idright);:}
                    ;

LISTA_ACCESOS_FUSION::= LISTA_ACCESOS_FUSION:a Tpunto Tid:b {: a.add(b); RESULT = a; :}
                    | Tid:a {: ArrayList<String> lista = new ArrayList<>(); lista.add(a); RESULT = lista; :}
                    ;


DECLARACION::= TIPODATO:a Tid:b Tpycoma {: RESULT = new Declaracion(a,a,b, bleft, bright); :}
            | TIPODATO: a Tid:b Tigual OPERACION_NUMERICA:c Tpycoma {: RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); :}
            ;

        
TIPODATO::=	Tent:a{: RESULT = Tipo.Entero; :}
		|	Tdec:a{: RESULT = Tipo.Decimal; :}
		|	Tchr:a{: RESULT = Tipo.Char; :}
		|	Tbul:a{: RESULT = Tipo.Bool; :}
        |   Trstring:a{: RESULT = Tipo.String; :}
		;

REFERENCIA::= Tid:origen Tigual Tpor Tid:destino Tpycoma {: RESULT = new Referencia(origen,destino,origenleft,origenright);  :}
            | TIPODATO:a Tid:origen Tigual Tpor Tid:destino Tpycoma {: RESULT = new Referencia(a,origen,destino,origenleft,origenright);  :};
	
ASIGNACION::= Tid:a Tigual OPERACION_RELACIONAL:b Tpycoma{: RESULT = new Asignacion(a,b,aleft,aright); :}
        ;
ASIGNACION_ARREGLO::= Tid:a Tigual Tllave_a LLAVES:b Tllave_c Tpycoma
                    {: RESULT = new Asignacion_Arreglo(a,b, aleft,aright); :}
                    | Tid:a DIMENSIONES:b Tigual OPERACION_RELACIONAL:c Tpycoma
                    {: RESULT = new Asignacion_Arreglo(a,b,c, bleft, bright); :}
                    ;

LLAVES::= LLAVES:a Tcoma LLAVE:b {:LinkedList<Object> lst = a; lst.add(b); RESULT = lst; :}
        | LLAVE:a 
        {: LinkedList<Object> lst = new LinkedList<>(); lst.add(a); RESULT = lst; :}
        ;

LLAVE::=Tllave_a LLAVES:a Tllave_c {: RESULT = a; :}
    | VALOR_PARAMETRO:a {: RESULT = a; :}
    ;

CONSTANTE::= Tdefinir Tid:a OPERACION_RELACIONAL:b {: RESULT = new Definir(a,b,aleft,aright); :}
        | Tdefinir Tid:a Tllave_a LLAVES:b Tllave_c {: RESULT = new Arreglo(a,b,aleft,aright); :} 

;

FUNCION::= TIPODATO:a Tid:b Tpar_a PARAMETROS:c Tpar_c Tllave_a CONTENIDO:d Tllave_c
            {: RESULT= new Funcion(a,b,c,d,bleft,bright);:}
        |TIPODATO:a Tid:b Tpar_a Tpar_c Tllave_a CONTENIDO:d Tllave_c 
            {: RESULT= new Funcion(a,b,d,bleft,bright); :}
        |Tid:a Tid:b Tpar_a Tpar_c Tllave_a CONTENIDO:d Tllave_c
            {: RESULT= new Funcion(a,b,d,bleft,bright); :}
        |Tid:a Tid:b Tpar_a PARAMETROS:c Tpar_c Tllave_a CONTENIDO:d Tllave_c
            {: RESULT= new Funcion(a,b,c,d,bleft,bright);:}
        | TIPODATO:a DIMENSIONES_VACIAS:b Tid:c Tpar_a PARAMETROS:d Tpar_c Tllave_a CONTENIDO:e Tllave_c
        {: RESULT= new Funcion(a,b,c,d,e,bleft,bright);:}
        | TIPODATO:a DIMENSIONES_VACIAS:b Tid:c Tpar_a Tpar_c Tllave_a CONTENIDO:d Tllave_c
        {: RESULT= new Funcion(a,b,c,d,bleft,bright);:}
        ;
DIMENSIONES_VACIAS::= DIMENSIONES_VACIAS:a DIMENSION_VACIA{: a.add(1); RESULT = a; :}
                    | DIMENSION_VACIA {:ArrayList<Integer> lst = new ArrayList<>(); lst.add(1); RESULT = lst; :}
                    ;
DIMENSION_VACIA::= Tcorchete_a Tcorchete_c ;

METODO::= Tzro Tid:a Tpar_a PARAMETROS:b Tpar_c Tllave_a CONTENIDO:c Tllave_c {:
            RESULT= new Metodo(a,b,c,aleft,aright);
        :}
        |Tzro Tid:a Tpar_a Tpar_c Tllave_a CONTENIDO:c Tllave_c {:
            RESULT= new Metodo(a,c,aleft,aright);
        :};

PARAMETROS::= PARAMETROS:a Tcoma PARAMETRO:b {: a.add(b); RESULT = a; :}
            | PARAMETRO:a {: LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; :}
            ;
PARAMETRO::= TIPODATO:a Tid:b {: RESULT = new Declaracion(a,a,b, bleft, bright); :}
            | Tid:tipo Tid:id{: RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);:}
            | TIPODATO:a Tid:b DIMENSIONES_VACIAS:c {: RESULT = new Declaracion_Arreglo(a,b,c,bleft,bright); :}
        ;

CONTENIDO::= CONTENIDO:a SENTENCIA:b {: a.add(b); RESULT = a; :}
            | SENTENCIA:a {: LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; :}
            ;

SENTENCIA::= DECLARACION:a {: RESULT = a; :}
		| ASIGNACION:a {: RESULT = a; :}
        | RETORNAR:a {:RESULT = a; :}
        | LLAMADA:a Tpycoma {:RESULT = a; :}
        | IMPRIMIR:a {:RESULT = a; :}
        | REFERENCIA:a {: RESULT = a; :}
        | ASIGNACION_FUSION:a {: RESULT = a; :}
        | DECLARACION_FUSION:a {: RESULT = a; :}
        | ARREGLO:a {: RESULT = a; :}
        | ASIGNACION_ARREGLO:a {:RESULT = a; :}
        | SENTENCIA_IF:a {: RESULT = new If(a,aleft,aright); :}
        ;

SENTENCIA_IF::= Tif Tpar_a OPERACION_RELACIONAL:a  Tpar_c Tllave_a CONTENIDO:b Tllave_c ELSE_IF:c {:RESULT= new Tipo_IF(a,b,c); :} ;

ELSE_IF::= Telseif Tpar_a OPERACION_RELACIONAL:a Tpar_c Tllave_a CONTENIDO:b Tllave_c ELSE_IF:c {: c.add( new Sentencia_IF(a,b,aleft,aright)); RESULT=c;  :}
        | ELSE:a {: LinkedList<Sentencia_IF> lst =  new LinkedList<>(); lst.add(a);  RESULT = lst; :}
        ;
ELSE::= Telse Tllave_a CONTENIDO:a Tllave_c {: RESULT = new Sentencia_IF(a,aleft,aright); :}
        | /* empty */ {: RESULT= new Sentencia_IF(); :}
        ;



RETORNAR::= Tregresar OPERACION_LOGICA:a Tpycoma{:RESULT = new Return(a, aleft, aright); :};

LLAMADA::=Tid:a Tpar_a Tpar_c {: RESULT = new Llamada(a,aleft,aright); :}
        | Tid:a Tpar_a VALORES_PARAMETROS:b Tpar_c {: RESULT = new Llamada(a,b,aleft,aright); :}
        ;
ACCESO_ARREGLO::= Tid:a DIMENSIONES:b {: RESULT = new Operacion(a,b,TipoOperacion.ACCESO_ARREGLO, aleft,aright); :};
ACCESO_STRUCT::= Tid:a Tpunto LISTA_ACCESOS_FUSION:b {: RESULT = new Operacion(a,b,TipoOperacion.ACCESO_STRUCT, aleft,aright); :};

VALORES_PARAMETROS::=VALORES_PARAMETROS:a Tcoma VALOR_PARAMETRO:b {: a.add(b); RESULT = a; :}
                    |VALOR_PARAMETRO:a {: LinkedList<Operacion> b = new LinkedList<>(); b.add(a); RESULT = b; :}
                    ;

VALOR_PARAMETRO::= OPERACION_LOGICA:a {:RESULT = a ; :};

IMPRIMIR::= Timp Tpar_a Tcadena:a Tpar_c Tpycoma{:RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); :}
        | Timp  Tpar_a Tcadena:a Tcoma VALORES_PARAMETROS:b Tpar_c Tpycoma
        {: RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); :}
        ;

ARREGLO::= ARREGLO_SIMPLE:a {:RESULT = a ; :}
        ;

ARREGLO_SIMPLE::= TIPODATO:a Tid:b DIMENSIONES:d Tpycoma
            {: RESULT = new Arreglo(a,b,d,bleft, bright); :}
            | TIPODATO:a Tid:b DIMENSIONES_VACIAS:c Tigual Tllave_a LLAVES:d Tllave_c Tpycoma
            {: RESULT = new Arreglo(a,b,c,d,bleft,bright); :}
            | TIPODATO:a Tid:b DIMENSIONES:c Tigual Tllave_a LLAVES:d Tllave_c Tpycoma
            {: RESULT = new Arreglo(a,b,c,d,bleft,bright); :}
            | TIPODATO:a Tid:b DIMENSIONES:c Tigual OPERACION_RELACIONAL:d Tpycoma
            {: RESULT = new Arreglo(a,b,c,d,bleft,bright); :}
            | TIPODATO:a Tid:b DIMENSIONES_VACIAS:c Tigual OPERACION_RELACIONAL:d Tpycoma
            {: RESULT = new Arreglo(a,b,c,d,bleft,bright);:}

            ;
DIMENSIONES::= DIMENSIONES:a DIMENSION:b {: LinkedList<Operacion> lst = (LinkedList<Operacion>) a; lst.add(b); RESULT = lst; :}
            | DIMENSION:a {:LinkedList<Operacion> lst = new LinkedList<>(); lst.add(a); RESULT = lst; :}
            ;

DIMENSION::= Tcorchete_a OPERACION_NUMERICA:a Tcorchete_c {: RESULT = a;:} ;

OPERACION_LOGICA::= OPERACION_LOGICA:a Tor OPERACION_LOGICA:b{: RESULT = new Operacion(a,b,TipoOperacion.OR, aleft, aright); :}
                |   OPERACION_LOGICA:a Tand OPERACION_LOGICA:b{: RESULT = new Operacion(a,b,TipoOperacion.AND, aleft, aright); :}
                |   Tnot OPERACION_LOGICA:a {: RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); :}
                |   OPERACION_RELACIONAL:a {: RESULT = a; :} 
                ;

OPERACION_RELACIONAL::= OPERACION_RELACIONAL:a Tmayor OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmenor OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmayorigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tmenorigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tigualigual OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); :}
                    |   OPERACION_RELACIONAL:a Tdiferente OPERACION_RELACIONAL:b {: RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); :}
                    |   OPERACION_NUMERICA:a {: RESULT = a; :}
                    ;

OPERACION_NUMERICA::= Tmenos OPERACION_NUMERICA:a{: RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmas OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmenos OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); :}
        | OPERACION_NUMERICA:a Tpor OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); :}
        | OPERACION_NUMERICA:a Tdiv OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); :}
        | OPERACION_NUMERICA:a Tmod OPERACION_NUMERICA:b{: RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); :}
        | OPERACION_NUMERICA:a Tpotencia OPERACION_NUMERICA:b {: RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); :}
        | Tpar_a OPERACION_LOGICA:a Tpar_c {: RESULT = a; :}
        | VALOR:a {: RESULT = a;:}
        ;



VALOR::= Tid:a {: RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); :}
        |Tentero:a {: RESULT = new Operacion(a, aright, aleft); :}
        |Tdecimal:a {: RESULT = new Operacion(a, aright, aleft); :}
        |Tcaracter:a {: RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); :}
        |Ttrue:a {: RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); :}
        |Tcadena:a {: RESULT = new Operacion(a,TipoOperacion.CADENA,aleft,aright);:}
        |Tfalse:a {: RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); :}
        |LLAMADA:a {:RESULT = new Operacion(a,TipoOperacion.FUNCION,aleft,aright); :}
        |Tpesode Tpar_a Tid:a Tpar_c {:RESULT = new Operacion(a, TipoOperacion.PESODE, aleft,aright); :}
        |ACCESO_ARREGLO:a {: RESULT = a; :}
        |ACCESO_STRUCT:a {:RESULT = a; :}
        ;
		








