/* The following code was generated by JFlex 1.7.0 */

package Analizadores;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int cadena = 2;
  public static final int cadena2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\73\1\77\1\72\1\74\22\0\1\61\1\23\1\75"+
    "\1\55\1\0\1\22\1\11\1\76\1\17\1\20\1\3\1\2\1\21"+
    "\1\1\1\26\1\4\12\71\1\25\1\16\1\5\1\7\1\6\1\101"+
    "\1\0\6\70\1\65\1\70\1\67\4\70\1\64\3\70\1\56\2\70"+
    "\1\66\5\70\1\14\1\100\1\15\1\24\1\42\1\0\1\46\1\36"+
    "\1\33\1\32\1\27\1\51\1\54\1\34\1\50\1\70\1\62\1\40"+
    "\1\53\1\30\1\41\1\43\1\60\1\35\1\44\1\31\1\37\1\45"+
    "\1\52\1\57\1\63\1\47\1\12\1\10\1\13\7\0\1\77\113\0"+
    "\1\70\37\0\1\70\u1f36\0\1\77\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\10\26"+
    "\1\1\10\26\1\1\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\34\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\14\26\10\0\10\26\1\54"+
    "\6\26\2\0\5\26\1\0\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\0\1\45\1\0\1\63\1\26\1\64"+
    "\1\26\1\65\1\26\1\66\10\26\1\67\14\0\1\70"+
    "\1\0\6\26\1\71\3\26\1\72\4\26\2\0\5\26"+
    "\1\73\2\0\1\74\1\75\4\26\1\76\2\26\1\77"+
    "\1\26\13\0\1\100\2\0\4\26\1\101\7\26\1\102"+
    "\4\26\2\0\1\103\1\26\1\104\2\26\1\0\7\26"+
    "\1\105\1\0\1\106\1\0\1\107\1\0\1\110\1\111"+
    "\1\112\4\0\13\26\1\113\1\114\4\26\2\0\1\115"+
    "\1\116\1\117\1\120\2\26\1\0\2\26\1\121\1\26"+
    "\1\122\1\26\1\123\1\124\3\0\1\125\1\126\1\0"+
    "\2\26\1\127\2\26\1\130\4\26\1\131\1\26\1\132"+
    "\2\26\2\0\2\26\1\133\1\134\1\26\1\135\1\26"+
    "\1\0\1\136\2\0\3\26\1\137\1\140\5\26\1\141"+
    "\2\0\1\142\2\26\1\143\3\0\1\144\1\145\1\146"+
    "\3\26\1\147\1\150\1\151\1\0\1\152\1\26\1\153"+
    "\2\0\2\26\1\154\1\155\1\26\1\0\1\156\3\26"+
    "\1\0\3\26\1\0\1\157\1\26\1\160\1\161\2\26"+
    "\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\306\0\306\0\306\0\u0108"+
    "\0\u014a\0\u018c\0\u01ce\0\u0210\0\u0252\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\306\0\u077a\0\306"+
    "\0\306\0\306\0\306\0\306\0\u07bc\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\u07fe\0\u0840\0\u0882\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u03de\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\u1398\0\306"+
    "\0\u13da\0\u03de\0\u141c\0\u03de\0\u145e\0\u03de\0\u14a0\0\u03de"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u03de\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\306\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u03de\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u03de\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1356\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u03de\0\u203a\0\u207c\0\u20be\0\u2100\0\u03de\0\u2142"+
    "\0\u2184\0\u03de\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\306\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u03de\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u03de\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u03de\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\306\0\u2cdc\0\306\0\u2d1e\0\306\0\u2d60\0\306"+
    "\0\306\0\306\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\u03de\0\u03de\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288"+
    "\0\u32ca\0\u03de\0\u03de\0\u03de\0\u03de\0\u330c\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u03de\0\u3456\0\u03de\0\u3498\0\u03de\0\306"+
    "\0\u34da\0\u351c\0\u355e\0\306\0\306\0\u35a0\0\u35e2\0\u3624"+
    "\0\u03de\0\u3666\0\u36a8\0\u03de\0\u36ea\0\u372c\0\u376e\0\u37b0"+
    "\0\u03de\0\u37f2\0\u03de\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c"+
    "\0\u397e\0\306\0\u03de\0\u39c0\0\u03de\0\u3a02\0\u3a44\0\306"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u03de\0\u03de\0\u3bd0"+
    "\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u03de\0\u3d1a\0\u3d5c\0\u03de"+
    "\0\u3d9e\0\u3de0\0\u03de\0\u3e22\0\u3e64\0\u3ea6\0\u03de\0\u03de"+
    "\0\u03de\0\u3ee8\0\u3f2a\0\u3f6c\0\u03de\0\u03de\0\306\0\u3fae"+
    "\0\u03de\0\u3ff0\0\306\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u03de"+
    "\0\306\0\u413a\0\u417c\0\306\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\u03de\0\u43ce\0\u03de\0\306"+
    "\0\u4410\0\u4452\0\u03de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\40"+
    "\1\43\1\44\1\45\1\40\1\46\1\47\1\50\1\51"+
    "\1\52\1\40\1\53\1\54\1\55\2\40\1\56\7\40"+
    "\1\57\1\56\1\60\1\56\1\61\1\62\1\0\2\4"+
    "\75\63\1\64\2\63\1\65\1\63\22\66\1\67\5\66"+
    "\1\70\42\66\1\71\1\66\1\72\1\73\1\66\1\74"+
    "\1\67\105\0\1\75\1\76\101\0\1\77\1\0\1\100"+
    "\1\101\101\0\1\102\101\0\1\103\102\0\1\104\102\0"+
    "\1\105\117\0\1\40\1\106\7\40\1\107\14\40\1\0"+
    "\3\40\1\0\10\40\37\0\11\40\1\110\14\40\1\0"+
    "\3\40\1\0\10\40\37\0\6\40\1\111\17\40\1\0"+
    "\3\40\1\0\10\40\37\0\1\112\25\40\1\0\3\40"+
    "\1\0\10\40\37\0\5\40\1\113\4\40\1\114\4\40"+
    "\1\115\6\40\1\0\3\40\1\0\10\40\37\0\26\40"+
    "\1\0\3\40\1\0\10\40\37\0\1\116\7\40\1\117"+
    "\1\40\1\120\13\40\1\0\3\40\1\0\10\40\37\0"+
    "\10\40\1\121\15\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\122\3\0\1\123\1\0\1\124\5\0\1\125\2\0"+
    "\1\126\1\0\1\127\1\0\1\130\11\0\1\131\44\0"+
    "\6\40\1\132\17\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\133\20\40\1\134\1\40\1\135\2\40\1\0\3\40"+
    "\1\0\10\40\37\0\6\40\1\136\2\40\1\137\14\40"+
    "\1\0\3\40\1\0\10\40\37\0\6\40\1\140\17\40"+
    "\1\0\3\40\1\0\10\40\37\0\1\40\1\141\20\40"+
    "\1\142\3\40\1\0\3\40\1\0\10\40\37\0\1\143"+
    "\7\40\1\144\1\40\1\145\4\40\1\146\6\40\1\0"+
    "\3\40\1\0\10\40\37\0\5\40\1\147\20\40\1\0"+
    "\3\40\1\0\10\40\37\0\1\150\25\40\1\0\3\40"+
    "\1\0\10\40\42\0\1\151\15\0\1\152\60\0\2\40"+
    "\1\153\4\40\1\154\1\40\1\155\3\40\1\156\6\40"+
    "\1\157\1\40\1\0\3\40\1\0\10\40\36\0\1\160"+
    "\42\0\1\57\32\0\1\161\5\0\1\162\44\0\1\163"+
    "\1\164\1\0\1\165\1\166\4\167\1\0\75\167\73\76"+
    "\2\170\5\76\4\0\1\171\124\0\2\40\1\172\23\40"+
    "\1\0\3\40\1\0\10\40\37\0\15\40\1\173\10\40"+
    "\1\0\3\40\1\0\10\40\37\0\12\40\1\174\13\40"+
    "\1\0\3\40\1\0\10\40\37\0\10\40\1\175\15\40"+
    "\1\0\3\40\1\0\10\40\37\0\4\40\1\176\15\40"+
    "\1\177\3\40\1\0\3\40\1\0\10\40\37\0\6\40"+
    "\1\200\17\40\1\0\3\40\1\0\10\40\37\0\1\40"+
    "\1\201\4\40\1\202\17\40\1\0\3\40\1\0\10\40"+
    "\37\0\6\40\1\203\6\40\1\204\10\40\1\0\3\40"+
    "\1\0\10\40\37\0\14\40\1\205\10\40\1\206\1\0"+
    "\3\40\1\0\10\40\37\0\2\40\1\207\23\40\1\0"+
    "\3\40\1\0\10\40\37\0\24\40\1\210\1\40\1\0"+
    "\3\40\1\0\10\40\37\0\11\40\1\211\14\40\1\0"+
    "\3\40\1\0\10\40\70\0\1\212\61\0\1\213\1\214"+
    "\67\0\1\215\101\0\1\216\101\0\1\217\1\0\1\220"+
    "\1\221\5\0\1\222\2\0\1\223\111\0\1\224\63\0"+
    "\1\225\13\0\1\226\67\0\1\227\71\0\12\40\1\230"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\2\40\1\231"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\25\40\1\232"+
    "\1\0\3\40\1\0\10\40\37\0\21\40\1\233\4\40"+
    "\1\0\3\40\1\0\10\40\37\0\4\40\1\234\21\40"+
    "\1\0\3\40\1\0\10\40\37\0\13\40\1\235\12\40"+
    "\1\0\3\40\1\0\10\40\37\0\12\40\1\236\13\40"+
    "\1\0\3\40\1\0\10\40\37\0\21\40\1\237\4\40"+
    "\1\0\3\40\1\0\10\40\37\0\4\40\1\240\21\40"+
    "\1\0\3\40\1\0\10\40\37\0\15\40\1\241\10\40"+
    "\1\0\3\40\1\0\10\40\37\0\6\40\1\242\17\40"+
    "\1\0\3\40\1\0\10\40\37\0\11\40\1\243\14\40"+
    "\1\0\3\40\1\0\10\40\37\0\1\244\20\40\1\245"+
    "\4\40\1\0\3\40\1\0\10\40\37\0\2\40\1\246"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\1\247\125\0"+
    "\1\250\55\0\26\40\1\0\1\40\1\251\1\40\1\0"+
    "\10\40\37\0\2\40\1\252\23\40\1\0\3\40\1\0"+
    "\10\40\37\0\7\40\1\253\16\40\1\0\3\40\1\0"+
    "\10\40\37\0\2\40\1\254\23\40\1\0\3\40\1\0"+
    "\10\40\37\0\1\255\25\40\1\0\3\40\1\0\10\40"+
    "\101\0\1\256\10\0\4\167\1\257\75\167\3\0\1\260"+
    "\1\171\124\0\1\261\25\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\262\25\40\1\0\3\40\1\0\10\40\37\0"+
    "\17\40\1\263\6\40\1\0\3\40\1\0\10\40\37\0"+
    "\22\40\1\264\3\40\1\0\3\40\1\0\10\40\37\0"+
    "\6\40\1\265\17\40\1\0\3\40\1\0\10\40\37\0"+
    "\14\40\1\266\11\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\267\25\40\1\0\3\40\1\0\10\40\37\0\1\270"+
    "\25\40\1\0\3\40\1\0\10\40\37\0\6\40\1\271"+
    "\17\40\1\0\3\40\1\0\10\40\37\0\17\40\1\272"+
    "\6\40\1\0\3\40\1\0\10\40\37\0\14\40\1\273"+
    "\11\40\1\0\3\40\1\0\10\40\50\0\1\274\102\0"+
    "\1\275\70\0\1\276\115\0\1\277\1\0\1\300\77\0"+
    "\1\301\65\0\1\302\130\0\1\303\51\0\1\304\103\0"+
    "\1\305\77\0\1\306\115\0\1\307\106\0\1\310\60\0"+
    "\1\311\101\0\26\40\1\0\3\40\1\0\1\40\1\312"+
    "\6\40\37\0\2\40\1\313\11\40\1\314\2\40\1\315"+
    "\6\40\1\0\3\40\1\0\10\40\37\0\17\40\1\316"+
    "\6\40\1\0\3\40\1\0\10\40\37\0\2\40\1\317"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\5\40\1\320"+
    "\20\40\1\0\3\40\1\0\10\40\37\0\3\40\1\321"+
    "\22\40\1\0\3\40\1\0\10\40\37\0\4\40\1\322"+
    "\21\40\1\0\3\40\1\0\10\40\37\0\5\40\1\323"+
    "\20\40\1\0\3\40\1\0\10\40\37\0\21\40\1\324"+
    "\4\40\1\0\3\40\1\0\10\40\37\0\15\40\1\325"+
    "\10\40\1\0\3\40\1\0\10\40\37\0\1\40\1\326"+
    "\24\40\1\0\3\40\1\0\10\40\37\0\11\40\1\327"+
    "\14\40\1\0\3\40\1\0\10\40\37\0\2\40\1\330"+
    "\11\40\1\331\2\40\1\332\6\40\1\0\3\40\1\0"+
    "\10\40\61\0\1\333\73\0\1\334\65\0\2\40\1\335"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\12\40\1\336"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\11\40\1\337"+
    "\14\40\1\0\3\40\1\0\10\40\37\0\6\40\1\340"+
    "\17\40\1\0\3\40\1\0\10\40\37\0\1\40\1\341"+
    "\24\40\1\0\3\40\1\0\10\40\10\0\4\167\1\257"+
    "\1\167\1\170\73\167\4\0\1\170\124\0\26\40\1\0"+
    "\3\40\1\342\10\40\37\0\10\40\1\343\15\40\1\0"+
    "\3\40\1\0\10\40\37\0\21\40\1\344\4\40\1\0"+
    "\3\40\1\0\10\40\37\0\1\345\25\40\1\0\3\40"+
    "\1\0\10\40\37\0\1\346\25\40\1\0\3\40\1\0"+
    "\10\40\37\0\17\40\1\347\6\40\1\0\3\40\1\0"+
    "\10\40\37\0\1\350\25\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\351\25\40\1\0\3\40\1\0\10\40\54\0"+
    "\1\352\101\0\1\353\70\0\1\354\75\0\1\355\104\0"+
    "\1\356\110\0\1\357\71\0\1\360\101\0\1\361\103\0"+
    "\1\362\107\0\1\363\70\0\1\364\102\0\1\365\115\0"+
    "\1\366\63\0\1\367\25\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\370\25\40\1\0\3\40\1\0\10\40\37\0"+
    "\12\40\1\371\13\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\40\1\372\7\40\1\373\14\40\1\0\3\40\1\0"+
    "\10\40\37\0\4\40\1\374\21\40\1\0\3\40\1\0"+
    "\10\40\37\0\21\40\1\375\4\40\1\0\3\40\1\0"+
    "\10\40\37\0\17\40\1\376\6\40\1\0\3\40\1\0"+
    "\10\40\37\0\21\40\1\377\4\40\1\0\3\40\1\0"+
    "\10\40\37\0\17\40\1\u0100\6\40\1\0\3\40\1\0"+
    "\10\40\37\0\12\40\1\u0101\13\40\1\0\3\40\1\0"+
    "\10\40\37\0\1\u0102\25\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\u0103\25\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\u0104\25\40\1\0\3\40\1\0\10\40\37\0\12\40"+
    "\1\u0105\13\40\1\0\3\40\1\0\10\40\37\0\1\40"+
    "\1\u0106\7\40\1\u0107\14\40\1\0\3\40\1\0\10\40"+
    "\60\0\1\u0108\72\0\1\u0109\67\0\1\40\1\u010a\12\40"+
    "\1\u010b\2\40\1\u010c\6\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\40\1\u010d\24\40\1\0\3\40\1\0\10\40"+
    "\37\0\21\40\1\u010e\4\40\1\0\3\40\1\0\10\40"+
    "\37\0\15\40\1\u010f\10\40\1\0\3\40\1\0\10\40"+
    "\60\0\1\u0110\60\0\11\40\1\u0111\14\40\1\0\3\40"+
    "\1\0\10\40\37\0\25\40\1\u0112\1\0\3\40\1\0"+
    "\10\40\37\0\6\40\1\u0113\17\40\1\0\3\40\1\0"+
    "\10\40\37\0\2\40\1\u0114\23\40\1\0\3\40\1\0"+
    "\10\40\37\0\2\40\1\u0115\23\40\1\0\3\40\1\0"+
    "\10\40\37\0\15\40\1\u0116\10\40\1\0\3\40\1\0"+
    "\10\40\37\0\6\40\1\u0117\17\40\1\0\3\40\1\0"+
    "\10\40\37\0\1\u0118\107\0\1\u0119\76\0\1\u011a\111\0"+
    "\1\u011b\71\0\1\u011c\76\0\1\u011d\113\0\1\u011e\67\0"+
    "\4\40\1\u011f\21\40\1\0\3\40\1\0\10\40\37\0"+
    "\26\40\1\0\1\40\1\u0120\1\40\1\0\10\40\37\0"+
    "\15\40\1\u0121\10\40\1\0\3\40\1\0\10\40\37\0"+
    "\4\40\1\u0122\21\40\1\0\3\40\1\0\10\40\37\0"+
    "\2\40\1\u0123\23\40\1\0\3\40\1\0\10\40\37\0"+
    "\5\40\1\u0124\20\40\1\0\3\40\1\0\10\40\37\0"+
    "\16\40\1\u0125\7\40\1\0\3\40\1\0\10\40\37\0"+
    "\6\40\1\u0126\17\40\1\0\3\40\1\0\10\40\37\0"+
    "\17\40\1\u0127\6\40\1\0\3\40\1\0\10\40\37\0"+
    "\13\40\1\u0128\12\40\1\0\3\40\1\0\10\40\37\0"+
    "\1\40\1\u0129\24\40\1\0\3\40\1\0\10\40\37\0"+
    "\26\40\1\0\1\40\1\u012a\1\40\1\0\10\40\37\0"+
    "\15\40\1\u012b\10\40\1\0\3\40\1\0\10\40\37\0"+
    "\4\40\1\u012c\21\40\1\0\3\40\1\0\10\40\37\0"+
    "\2\40\1\u012d\23\40\1\0\3\40\1\0\10\40\40\0"+
    "\1\u012e\106\0\1\u012f\73\0\1\40\1\u0130\24\40\1\0"+
    "\3\40\1\0\10\40\37\0\17\40\1\u0131\6\40\1\0"+
    "\3\40\1\0\10\40\61\0\1\u0132\57\0\2\40\1\u0133"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\10\40\1\u0134"+
    "\15\40\1\0\3\40\1\0\10\40\37\0\17\40\1\u0135"+
    "\6\40\1\0\3\40\1\0\10\40\37\0\17\40\1\u0136"+
    "\6\40\1\0\3\40\1\0\10\40\55\0\1\u0137\63\0"+
    "\1\u0138\135\0\1\u0139\60\0\1\u013a\66\0\2\40\1\u013b"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\2\40\1\u013c"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\5\40\1\u013d"+
    "\20\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u013e"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u013f"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\13\40\1\u0140"+
    "\12\40\1\0\3\40\1\0\10\40\37\0\6\40\1\u0141"+
    "\17\40\1\0\3\40\1\0\10\40\37\0\24\40\1\u0142"+
    "\1\40\1\0\3\40\1\0\10\40\37\0\2\40\1\u0143"+
    "\23\40\1\0\3\40\1\0\10\40\37\0\5\40\1\u0144"+
    "\20\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0145"+
    "\13\40\1\0\3\40\1\0\10\40\60\0\1\u0146\62\0"+
    "\1\u0147\77\0\25\40\1\u0148\1\0\3\40\1\0\10\40"+
    "\37\0\25\40\1\u0149\1\0\3\40\1\0\10\40\37\0"+
    "\6\40\1\u014a\17\40\1\0\3\40\1\0\10\40\37\0"+
    "\6\40\1\u014b\17\40\1\0\3\40\1\0\10\40\56\0"+
    "\1\u014c\75\0\1\u014d\124\0\1\u014e\43\0\12\40\1\u014f"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0150"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0151"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\4\40\1\u0152"+
    "\21\40\1\0\3\40\1\0\10\40\37\0\13\40\1\u0153"+
    "\12\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0154"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0155"+
    "\13\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u0156"+
    "\13\40\1\0\3\40\1\0\10\40\45\0\1\u0157\112\0"+
    "\1\u0158\62\0\1\u0159\25\40\1\0\3\40\1\0\10\40"+
    "\37\0\17\40\1\u015a\6\40\1\0\3\40\1\0\10\40"+
    "\45\0\1\u015b\112\0\1\u015c\121\0\1\u015d\42\0\11\40"+
    "\1\u015e\14\40\1\0\3\40\1\0\10\40\37\0\16\40"+
    "\1\u015f\7\40\1\0\3\40\1\0\10\40\37\0\3\40"+
    "\1\u0160\22\40\1\0\3\40\1\0\10\40\45\0\1\u0161"+
    "\73\0\4\40\1\u0162\21\40\1\0\3\40\1\0\10\40"+
    "\40\0\1\u0163\140\0\1\u0164\41\0\21\40\1\u0165\4\40"+
    "\1\0\3\40\1\0\10\40\37\0\1\u0166\25\40\1\0"+
    "\3\40\1\0\10\40\37\0\21\40\1\u0167\4\40\1\0"+
    "\3\40\1\0\10\40\43\0\1\u0168\75\0\4\40\1\u0169"+
    "\21\40\1\0\3\40\1\0\10\40\37\0\1\40\1\u016a"+
    "\24\40\1\0\3\40\1\0\10\40\37\0\12\40\1\u016b"+
    "\13\40\1\0\3\40\1\0\10\40\44\0\1\u016c\74\0"+
    "\26\40\1\0\3\40\1\0\1\u016d\7\40\37\0\2\40"+
    "\1\u016e\23\40\1\0\3\40\1\0\10\40\37\0\1\40"+
    "\1\u016f\24\40\1\0\3\40\1\0\10\40\51\0\1\u0170"+
    "\67\0\17\40\1\u0171\6\40\1\0\3\40\1\0\10\40"+
    "\37\0\1\40\1\u0172\24\40\1\0\3\40\1\0\10\40"+
    "\37\0\17\40\1\u0173\6\40\1\0\3\40\1\0\10\40"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17556];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\6\1\15\11\23\1\1\11\1\1\5\11"+
    "\1\1\7\11\1\0\1\1\1\0\6\11\14\1\10\0"+
    "\17\1\2\0\5\1\1\0\6\11\1\0\1\11\1\0"+
    "\20\1\14\0\1\11\1\0\17\1\2\0\6\1\2\0"+
    "\13\1\13\0\1\11\2\0\21\1\2\0\5\1\1\0"+
    "\7\1\1\11\1\0\1\11\1\0\1\11\1\0\3\11"+
    "\4\0\21\1\2\0\6\1\1\0\7\1\1\11\3\0"+
    "\2\11\1\0\17\1\2\0\2\1\1\11\4\1\1\0"+
    "\1\11\2\0\13\1\2\0\4\1\3\0\10\1\1\11"+
    "\1\0\2\1\1\11\2\0\3\1\1\11\1\1\1\0"+
    "\1\11\3\1\1\0\3\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    String tempcadena= "";
    int escape = 0;
    int contador = 0;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
            } 
            // fall through
          case 115: break;
          case 2: 
            { return new Symbol(sym.Tmenos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 116: break;
          case 3: 
            { return new Symbol(sym.Tmas, yyline, yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 4: 
            { return new Symbol(sym.Tpor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 5: 
            { return new Symbol(sym.Tdiv, yyline, yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 6: 
            { return new Symbol(sym.Tmenor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 7: 
            { return new Symbol(sym.Tmayor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 8: 
            { return new Symbol(sym.Tigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 9: 
            { return new Symbol(sym.Tllave_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 10: 
            { return new Symbol(sym.Tllave_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 11: 
            { return new Symbol(sym.Tcorchete_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 125: break;
          case 12: 
            { return new Symbol(sym.Tcorchete_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 13: 
            { return new Symbol(sym.Tpycoma, yyline, yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 14: 
            { return new Symbol(sym.Tpar_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          case 15: 
            { return new Symbol(sym.Tpar_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 129: break;
          case 16: 
            { return new Symbol(sym.Tcoma, yyline, yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 17: 
            { return new Symbol(sym.Tmod, yyline, yycolumn,yytext());
            } 
            // fall through
          case 131: break;
          case 18: 
            { return new Symbol(sym.Tnot, yyline, yycolumn,yytext());
            } 
            // fall through
          case 132: break;
          case 19: 
            { return new Symbol(sym.Tpotencia, yyline, yycolumn,yytext());
            } 
            // fall through
          case 133: break;
          case 20: 
            { return new Symbol(sym.Tdospuntos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 134: break;
          case 21: 
            { return new Symbol(sym.Tpunto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 135: break;
          case 22: 
            { return new Symbol(sym.Tid, yyline, yycolumn,yytext());
            } 
            // fall through
          case 136: break;
          case 23: 
            { /*Espacios en blanco, ignorados*/
            } 
            // fall through
          case 137: break;
          case 24: 
            { return new Symbol(sym.Tentero, yyline, yycolumn,yytext());
            } 
            // fall through
          case 138: break;
          case 25: 
            { /*Saltos de linea, ignorados*/
            } 
            // fall through
          case 139: break;
          case 26: 
            { yybegin(cadena);
            } 
            // fall through
          case 140: break;
          case 27: 
            { yybegin(cadena2); tempcadena+="\'"; escape=0; contador=0;
            } 
            // fall through
          case 141: break;
          case 28: 
            { tempcadena+=yytext();
            } 
            // fall through
          case 142: break;
          case 29: 
            { String temp=tempcadena; tempcadena=""; yybegin(YYINITIAL); return  new Symbol(sym.Tcadena, yychar,yyline, temp);
            } 
            // fall through
          case 143: break;
          case 30: 
            { contador++; tempcadena+=yytext();
            } 
            // fall through
          case 144: break;
          case 31: 
            { contador++;
                if(escape==0){
                    tempcadena+=yytext();              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 145: break;
          case 32: 
            { contador++;
                if(escape==0){
                 tempcadena+=yytext();
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 146: break;
          case 33: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba cierre de caracter (\")."); 
                    yybegin(YYINITIAL);
                }else{
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba caracter de escape o cierre de caracter;"); 
                    yybegin(YYINITIAL); 
                }
            } 
            // fall through
          case 147: break;
          case 34: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Caracter especial  sin escape definido"); 
                    yybegin(YYINITIAL);              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                 contador++;
                }
            } 
            // fall through
          case 148: break;
          case 35: 
            { if(escape==0){
                    if(contador>=1)
                    {
                        String tmp=tempcadena+"\'"; 
                        tempcadena=""; yybegin(YYINITIAL);  
                        return new Symbol(sym.Tcaracter, yychar,yyline,tmp); 
                    }
                    else{
                        String tmp=tempcadena; tempcadena="";  
                        System.out.println("Tipo de dato caracter tiene mas de 1 caracter"); 
                        yybegin(YYINITIAL);
                    }
                }
                else{
                    tempcadena+=yytext();
                    escape=0;
                    contador++;
                }
            } 
            // fall through
          case 149: break;
          case 36: 
            { tempcadena+=yytext();
                if(escape==0){
                 escape=1;
                }else{
                 escape=0;
                 contador++;
                }
            } 
            // fall through
          case 150: break;
          case 37: 
            { /*iognore*/
            } 
            // fall through
          case 151: break;
          case 38: 
            { return new Symbol(sym.Tdiferente, yyline, yycolumn,yytext());
            } 
            // fall through
          case 152: break;
          case 39: 
            { return new Symbol(sym.Tmenorigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 153: break;
          case 40: 
            { return new Symbol(sym.Tmayorigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 154: break;
          case 41: 
            { return new Symbol(sym.Tigualigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 155: break;
          case 42: 
            { return new Symbol(sym.Tor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 156: break;
          case 43: 
            { return new Symbol(sym.Tand, yyline, yycolumn,yytext());
            } 
            // fall through
          case 157: break;
          case 44: 
            { return new Symbol(sym.Tif, yyline, yycolumn,yytext());
            } 
            // fall through
          case 158: break;
          case 45: 
            { tempcadena+='%';
            } 
            // fall through
          case 159: break;
          case 46: 
            { tempcadena+='\n';
            } 
            // fall through
          case 160: break;
          case 47: 
            { tempcadena+='\"';
            } 
            // fall through
          case 161: break;
          case 48: 
            { tempcadena+='\'';
            } 
            // fall through
          case 162: break;
          case 49: 
            { tempcadena+='\\';
            } 
            // fall through
          case 163: break;
          case 50: 
            { tempcadena+='?';
            } 
            // fall through
          case 164: break;
          case 51: 
            { return new Symbol(sym.Tent, yyline, yycolumn,yytext());
            } 
            // fall through
          case 165: break;
          case 52: 
            { return new Symbol(sym.Tnlo, yyline, yycolumn,yytext());
            } 
            // fall through
          case 166: break;
          case 53: 
            { return new Symbol(sym.Tdec, yyline, yycolumn,yytext());
            } 
            // fall through
          case 167: break;
          case 54: 
            { return new Symbol(sym.Tchr, yyline, yycolumn,yytext());
            } 
            // fall through
          case 168: break;
          case 55: 
            { return new Symbol(sym.Tbul, yyline, yycolumn,yytext());
            } 
            // fall through
          case 169: break;
          case 56: 
            { return new Symbol(sym.Twf, yyline, yycolumn,yytext());
            } 
            // fall through
          case 170: break;
          case 57: 
            { return new Symbol(sym.Tzro, yyline, yycolumn,yytext());
            } 
            // fall through
          case 171: break;
          case 58: 
            { return new Symbol(sym.Tfor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 172: break;
          case 59: 
            { return new Symbol(sym.Tdecimal, yyline, yycolumn,yytext());
            } 
            // fall through
          case 173: break;
          case 60: 
            { return new Symbol(sym.Telse, yyline, yycolumn,yytext());
            } 
            // fall through
          case 174: break;
          case 61: 
            { return new Symbol(sym.Ttrue, yyline, yycolumn,yytext());
            } 
            // fall through
          case 175: break;
          case 62: 
            { return new Symbol(sym.Tcase, yyline, yycolumn,yytext());
            } 
            // fall through
          case 176: break;
          case 63: 
            { return new Symbol(sym.Truta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 177: break;
          case 64: 
            { return new Symbol(sym.Timp, yyline, yycolumn,yytext());
            } 
            // fall through
          case 178: break;
          case 65: 
            { return new Symbol(sym.Tsiga, yyline, yycolumn,yytext());
            } 
            // fall through
          case 179: break;
          case 66: 
            { return new Symbol(sym.Twhen, yyline, yycolumn,yytext());
            } 
            // fall through
          case 180: break;
          case 67: 
            { return new Symbol(sym.Trtxt, yyline, yycolumn,yytext());
            } 
            // fall through
          case 181: break;
          case 68: 
            { return new Symbol(sym.Tlbl, yyline, yycolumn,yytext());
            } 
            // fall through
          case 182: break;
          case 69: 
            { return new Symbol(sym.Teqls, yyline, yycolumn,yytext());
            } 
            // fall through
          case 183: break;
          case 70: 
            { return new Symbol(sym.Tconc, yyline, yycolumn,yytext());
            } 
            // fall through
          case 184: break;
          case 71: 
            { return new Symbol(sym.Tread, yyline, yycolumn,yytext());
            } 
            // fall through
          case 185: break;
          case 72: 
            { return new Symbol(sym.Taent, yyline, yycolumn,yytext());
            } 
            // fall through
          case 186: break;
          case 73: 
            { return new Symbol(sym.Tatxt, yyline, yycolumn,yytext());
            } 
            // fall through
          case 187: break;
          case 74: 
            { return new Symbol(sym.Tadec, yyline, yycolumn,yytext());
            } 
            // fall through
          case 188: break;
          case 75: 
            { return new Symbol(sym.Tfalse, yyline, yycolumn,yytext());
            } 
            // fall through
          case 189: break;
          case 76: 
            { return new Symbol(sym.Twhile, yyline, yycolumn,yytext());
            } 
            // fall through
          case 190: break;
          case 77: 
            { return new Symbol(sym.Trtxtn, yyline, yycolumn,yytext());
            } 
            // fall through
          case 191: break;
          case 78: 
            { return new Symbol(sym.Trtxtp, yyline, yycolumn,yytext());
            } 
            // fall through
          case 192: break;
          case 79: 
            { return new Symbol(sym.Trtxta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 193: break;
          case 80: 
            { return new Symbol(sym.Trbton, yyline, yycolumn,yytext());
            } 
            // fall through
          case 194: break;
          case 81: 
            { return new Symbol(sym.Tcorrer, yyline, yycolumn,yytext());
            } 
            // fall through
          case 195: break;
          case 82: 
            { return new Symbol(sym.Trepeat, yyline, yycolumn,yytext());
            } 
            // fall through
          case 196: break;
          case 83: 
            { return new Symbol(sym.Tromper, yyline, yycolumn,yytext());
            } 
            // fall through
          case 197: break;
          case 84: 
            { return new Symbol(sym.Tclose, yyline, yycolumn,yytext());
            } 
            // fall through
          case 198: break;
          case 85: 
            { return new Symbol(sym.Tapend, yyline, yycolumn,yytext());
            } 
            // fall through
          case 199: break;
          case 86: 
            { return new Symbol(sym.Twrite, yyline, yycolumn,yytext());
            } 
            // fall through
          case 200: break;
          case 87: 
            { return new Symbol(sym.Tsetpos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 201: break;
          case 88: 
            { return new Symbol(sym.Tswitch, yyline, yycolumn,yytext());
            } 
            // fall through
          case 202: break;
          case 89: 
            { return new Symbol(sym.Tfusion, yyline, yycolumn,yytext());
            } 
            // fall through
          case 203: break;
          case 90: 
            { return new Symbol(sym.Tgetpos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 204: break;
          case 91: 
            { return new Symbol(sym.Telseif, yyline, yycolumn,yytext());
            } 
            // fall through
          case 205: break;
          case 92: 
            { return new Symbol(sym.Tdefault, yyline, yycolumn,yytext());
            } 
            // fall through
          case 206: break;
          case 93: 
            { return new Symbol(sym.Tcarpeta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 207: break;
          case 94: 
            { return new Symbol(sym.Tpesode, yyline, yycolumn,yytext());
            } 
            // fall through
          case 208: break;
          case 95: 
            { return new Symbol(sym.Tsetalto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 209: break;
          case 96: 
            { return new Symbol(sym.Tarchivo, yyline, yycolumn,yytext());
            } 
            // fall through
          case 210: break;
          case 97: 
            { return new Symbol(sym.Tgetalto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 211: break;
          case 98: 
            { return new Symbol(sym.Trstring, yyline, yycolumn,yytext());
            } 
            // fall through
          case 212: break;
          case 99: 
            { return new Symbol(sym.Tregresar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 213: break;
          case 100: 
            { return new Symbol(sym.Tproyecto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 214: break;
          case 101: 
            { return new Symbol(sym.Tsettexto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 215: break;
          case 102: 
            { return new Symbol(sym.Tsetancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 216: break;
          case 103: 
            { return new Symbol(sym.Tgettexto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 217: break;
          case 104: 
            { return new Symbol(sym.Tgetancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 218: break;
          case 105: 
            { return new Symbol(sym.Tdefinir, yyline, yycolumn,yytext());
            } 
            // fall through
          case 219: break;
          case 106: 
            { return new Symbol(sym.Trmensage, yyline, yycolumn,yytext());
            } 
            // fall through
          case 220: break;
          case 107: 
            { return new Symbol(sym.Treservar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 221: break;
          case 108: 
            { return new Symbol(sym.Tfechamod, yyline, yycolumn,yytext());
            } 
            // fall through
          case 222: break;
          case 109: 
            { return new Symbol(sym.Timportar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 223: break;
          case 110: 
            { return new Symbol(sym.Tnuevogui, yyline, yycolumn,yytext());
            } 
            // fall through
          case 224: break;
          case 111: 
            { return new Symbol(sym.Taldarclick, yyline, yycolumn,yytext());
            } 
            // fall through
          case 225: break;
          case 112: 
            { return new Symbol(sym.Tconfiguracion, yyline, yycolumn,yytext());
            } 
            // fall through
          case 226: break;
          case 113: 
            { return new Symbol(sym.Taltoyancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 227: break;
          case 114: 
            { return new Symbol(sym.Tiniciarventana, yyline, yycolumn,yytext());
            } 
            // fall through
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
