/* The following code was generated by JFlex 1.7.0 */
package Analizadores;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int cadena = 2;
  public static final int cadena2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\71\1\75\1\70\1\72\22\0\1\70\1\5\1\73"+
    "\2\0\1\23\1\12\1\74\1\20\1\21\1\3\1\2\1\22\1\1"+
    "\1\26\1\4\12\67\1\25\1\17\1\7\1\6\1\10\1\77\1\0"+
    "\6\66\1\63\1\66\1\65\4\66\1\62\3\66\1\57\2\66\1\64"+
    "\5\66\1\15\1\76\1\16\1\24\1\42\1\0\1\46\1\36\1\33"+
    "\1\32\1\27\1\51\1\54\1\34\1\50\1\66\1\60\1\40\1\53"+
    "\1\30\1\41\1\43\1\56\1\35\1\44\1\31\1\37\1\45\1\52"+
    "\1\55\1\61\1\47\1\13\1\11\1\14\7\0\1\75\113\0\1\66"+
    "\37\0\1\66\u1f36\0\1\75\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\10\26"+
    "\1\1\11\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\0\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\15\26\10\0"+
    "\10\26\1\61\13\26\2\0\1\52\1\0\1\62\1\26"+
    "\1\63\2\26\1\64\1\26\1\65\10\26\1\66\14\0"+
    "\1\67\1\0\6\26\1\70\4\26\1\71\10\26\1\72"+
    "\2\0\1\73\1\26\1\74\5\26\1\75\2\26\1\76"+
    "\1\26\13\0\1\77\2\0\4\26\1\100\10\26\1\101"+
    "\4\26\1\102\1\26\1\103\12\26\1\104\1\0\1\105"+
    "\1\0\1\106\1\0\1\107\1\110\1\111\4\0\14\26"+
    "\1\112\1\113\4\26\1\114\1\115\1\116\1\117\1\26"+
    "\1\120\3\26\1\121\1\26\1\122\1\26\1\123\1\124"+
    "\3\0\1\125\1\126\1\0\2\26\1\127\2\26\1\130"+
    "\5\26\1\131\1\26\1\132\3\26\1\133\1\134\1\26"+
    "\1\135\1\26\1\0\1\136\2\0\3\26\1\137\1\140"+
    "\6\26\1\141\2\26\1\142\3\0\1\143\1\144\1\145"+
    "\2\26\1\146\1\26\1\147\1\150\1\151\1\26\1\152"+
    "\2\0\2\26\1\153\1\26\1\0\1\154\3\26\1\0"+
    "\3\26\1\0\1\155\1\26\1\156\1\157\2\26\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\300\0\300\0\300\0\u0100"+
    "\0\u0140\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400"+
    "\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\u0780"+
    "\0\u07c0\0\300\0\300\0\u0800\0\300\0\300\0\300\0\300"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0400\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\300\0\u12c0\0\u0400\0\u1300\0\u0400"+
    "\0\u1340\0\u1380\0\u0400\0\u13c0\0\u0400\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u0400\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\300\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u0400\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u0400"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80"+
    "\0\u1240\0\u1dc0\0\u1e00\0\u0400\0\u1e40\0\u0400\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\u1f80\0\u0400\0\u1fc0\0\u2000\0\u0400\0\u2040"+
    "\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\300\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\u2440\0\u2480\0\u0400\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0"+
    "\0\u2600\0\u2640\0\u2680\0\u0400\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u0400\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940"+
    "\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\300\0\u2ac0\0\300"+
    "\0\u2b00\0\300\0\u2b40\0\300\0\300\0\300\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0"+
    "\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u0400\0\u0400"+
    "\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u0400\0\u0400\0\u0400\0\u0400"+
    "\0\u3080\0\u0400\0\u30c0\0\u3100\0\u3140\0\u0400\0\u3180\0\u0400"+
    "\0\u31c0\0\u0400\0\300\0\u3200\0\u3240\0\u3280\0\300\0\300"+
    "\0\u32c0\0\u3300\0\u3340\0\u0400\0\u3380\0\u33c0\0\u0400\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u3500\0\u0400\0\u3540\0\u0400\0\u3580"+
    "\0\u35c0\0\u3600\0\u0400\0\u0400\0\u3640\0\u0400\0\u3680\0\u36c0"+
    "\0\300\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u0400\0\u0400"+
    "\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u0400\0\u39c0"+
    "\0\u3a00\0\u0400\0\u3a40\0\u3a80\0\u3ac0\0\u0400\0\u0400\0\u0400"+
    "\0\u3b00\0\u3b40\0\u0400\0\u3b80\0\u0400\0\u0400\0\u0400\0\u3bc0"+
    "\0\300\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u0400\0\u3d00\0\u3d40"+
    "\0\300\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00"+
    "\0\u3f40\0\u0400\0\u3f80\0\u0400\0\300\0\u3fc0\0\u4000\0\u0400";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\40"+
    "\1\43\1\44\1\45\1\40\1\46\1\47\1\50\1\51"+
    "\1\52\1\40\1\53\2\40\1\54\7\40\1\55\1\56"+
    "\1\57\1\56\1\60\1\61\1\0\2\4\23\62\1\63"+
    "\4\62\1\64\40\62\1\65\1\62\1\66\1\67\1\62"+
    "\1\70\1\63\23\71\1\72\4\71\1\73\40\71\1\74"+
    "\1\71\1\75\1\76\1\71\1\77\1\72\103\0\1\100"+
    "\1\101\101\0\1\102\77\0\1\103\75\0\1\104\1\0"+
    "\1\105\77\0\1\106\102\0\1\107\100\0\1\110\114\0"+
    "\1\40\1\111\7\40\1\112\27\40\37\0\11\40\1\113"+
    "\1\114\26\40\37\0\6\40\1\115\32\40\37\0\1\116"+
    "\40\40\37\0\5\40\1\117\4\40\1\120\4\40\1\121"+
    "\21\40\37\0\41\40\37\0\1\122\7\40\1\123\1\40"+
    "\1\124\26\40\37\0\10\40\1\125\30\40\37\0\1\126"+
    "\3\0\1\127\1\0\1\130\5\0\1\131\2\0\1\132"+
    "\1\0\1\133\1\0\1\134\7\0\1\135\44\0\6\40"+
    "\1\136\32\40\37\0\1\137\20\40\1\140\1\40\1\141"+
    "\15\40\37\0\6\40\1\142\2\40\1\143\27\40\37\0"+
    "\6\40\1\144\32\40\37\0\1\40\1\145\20\40\1\146"+
    "\1\40\1\147\14\40\37\0\1\150\7\40\1\151\1\40"+
    "\1\152\4\40\1\153\21\40\37\0\5\40\1\154\33\40"+
    "\37\0\1\155\40\40\37\0\2\40\1\156\4\40\1\157"+
    "\1\40\1\160\12\40\1\161\14\40\36\0\1\162\40\0"+
    "\1\55\10\0\4\163\1\0\73\163\71\101\2\164\5\101"+
    "\4\0\1\165\122\0\2\40\1\166\36\40\37\0\15\40"+
    "\1\167\23\40\37\0\12\40\1\170\26\40\37\0\24\40"+
    "\1\171\14\40\37\0\10\40\1\172\30\40\37\0\4\40"+
    "\1\173\15\40\1\174\16\40\37\0\6\40\1\175\32\40"+
    "\37\0\1\40\1\176\4\40\1\177\32\40\37\0\6\40"+
    "\1\200\6\40\1\201\23\40\37\0\14\40\1\202\10\40"+
    "\1\203\13\40\37\0\2\40\1\204\36\40\37\0\24\40"+
    "\1\205\14\40\37\0\11\40\1\206\27\40\66\0\1\207"+
    "\61\0\1\210\1\211\65\0\1\212\77\0\1\213\77\0"+
    "\1\214\1\0\1\215\1\216\5\0\1\217\2\0\1\220"+
    "\107\0\1\221\61\0\1\222\13\0\1\223\65\0\1\224"+
    "\67\0\12\40\1\225\26\40\37\0\2\40\1\226\36\40"+
    "\37\0\25\40\1\227\13\40\37\0\21\40\1\230\17\40"+
    "\37\0\4\40\1\231\34\40\37\0\13\40\1\232\25\40"+
    "\37\0\12\40\1\233\26\40\37\0\21\40\1\234\17\40"+
    "\37\0\14\40\1\235\24\40\37\0\4\40\1\236\34\40"+
    "\37\0\15\40\1\237\23\40\37\0\6\40\1\240\32\40"+
    "\37\0\11\40\1\241\27\40\37\0\1\242\20\40\1\243"+
    "\17\40\37\0\2\40\1\244\36\40\37\0\26\40\1\245"+
    "\12\40\37\0\2\40\1\246\36\40\37\0\7\40\1\247"+
    "\31\40\37\0\1\250\40\40\77\0\1\251\10\0\4\163"+
    "\1\252\73\163\3\0\1\253\1\165\122\0\1\254\40\40"+
    "\37\0\7\40\1\255\31\40\37\0\1\256\40\40\37\0"+
    "\17\40\1\257\1\40\1\260\17\40\37\0\22\40\1\261"+
    "\16\40\37\0\6\40\1\262\32\40\37\0\14\40\1\263"+
    "\24\40\37\0\1\264\40\40\37\0\1\265\40\40\37\0"+
    "\6\40\1\266\32\40\37\0\17\40\1\267\21\40\37\0"+
    "\14\40\1\270\24\40\50\0\1\271\100\0\1\272\66\0"+
    "\1\273\113\0\1\274\1\0\1\275\75\0\1\276\63\0"+
    "\1\277\124\0\1\300\51\0\1\301\101\0\1\302\75\0"+
    "\1\303\113\0\1\304\104\0\1\305\56\0\1\306\77\0"+
    "\32\40\1\307\6\40\37\0\2\40\1\310\11\40\1\311"+
    "\2\40\1\312\21\40\37\0\17\40\1\313\21\40\37\0"+
    "\2\40\1\314\36\40\37\0\5\40\1\315\33\40\37\0"+
    "\3\40\1\316\35\40\37\0\4\40\1\317\34\40\37\0"+
    "\12\40\1\320\26\40\37\0\5\40\1\321\33\40\37\0"+
    "\21\40\1\322\17\40\37\0\15\40\1\323\23\40\37\0"+
    "\1\40\1\324\37\40\37\0\11\40\1\325\27\40\37\0"+
    "\2\40\1\326\11\40\1\327\2\40\1\330\21\40\37\0"+
    "\2\40\1\331\36\40\37\0\12\40\1\332\26\40\37\0"+
    "\11\40\1\333\27\40\37\0\1\40\1\334\37\40\10\0"+
    "\4\163\1\252\3\163\1\164\67\163\4\0\1\164\122\0"+
    "\6\40\1\335\32\40\37\0\10\40\1\336\30\40\37\0"+
    "\1\40\1\337\37\40\37\0\21\40\1\340\17\40\37\0"+
    "\1\341\40\40\37\0\1\342\40\40\37\0\17\40\1\343"+
    "\21\40\37\0\1\344\40\40\37\0\1\345\40\40\54\0"+
    "\1\346\77\0\1\347\66\0\1\350\73\0\1\351\102\0"+
    "\1\352\106\0\1\353\67\0\1\354\77\0\1\355\101\0"+
    "\1\356\105\0\1\357\66\0\1\360\100\0\1\361\113\0"+
    "\1\362\61\0\1\363\40\40\37\0\1\364\40\40\37\0"+
    "\12\40\1\365\26\40\37\0\1\40\1\366\7\40\1\367"+
    "\27\40\37\0\4\40\1\370\34\40\37\0\21\40\1\371"+
    "\17\40\37\0\17\40\1\372\21\40\37\0\21\40\1\373"+
    "\17\40\37\0\6\40\1\374\32\40\37\0\17\40\1\375"+
    "\21\40\37\0\12\40\1\376\26\40\37\0\1\377\40\40"+
    "\37\0\1\u0100\40\40\37\0\1\u0101\40\40\37\0\12\40"+
    "\1\u0102\26\40\37\0\1\40\1\u0103\7\40\1\u0104\27\40"+
    "\37\0\1\40\1\u0105\12\40\1\u0106\2\40\1\u0107\21\40"+
    "\37\0\1\40\1\u0108\37\40\37\0\15\40\1\u0109\23\40"+
    "\37\0\1\u010a\40\40\37\0\11\40\1\u010b\27\40\37\0"+
    "\21\40\1\u010c\17\40\37\0\25\40\1\u010d\13\40\37\0"+
    "\6\40\1\u010e\32\40\37\0\2\40\1\u010f\36\40\37\0"+
    "\2\40\1\u0110\36\40\37\0\15\40\1\u0111\23\40\37\0"+
    "\6\40\1\u0112\32\40\37\0\1\u0113\105\0\1\u0114\74\0"+
    "\1\u0115\107\0\1\u0116\67\0\1\u0117\74\0\1\u0118\111\0"+
    "\1\u0119\65\0\4\40\1\u011a\34\40\37\0\26\40\1\u011b"+
    "\12\40\37\0\15\40\1\u011c\23\40\37\0\4\40\1\u011d"+
    "\34\40\37\0\2\40\1\u011e\36\40\37\0\5\40\1\u011f"+
    "\33\40\37\0\16\40\1\u0120\22\40\37\0\6\40\1\u0121"+
    "\32\40\37\0\17\40\1\u0122\21\40\37\0\2\40\1\u0123"+
    "\36\40\37\0\13\40\1\u0124\25\40\37\0\1\40\1\u0125"+
    "\37\40\37\0\26\40\1\u0126\12\40\37\0\15\40\1\u0127"+
    "\23\40\37\0\4\40\1\u0128\34\40\37\0\2\40\1\u0129"+
    "\36\40\37\0\17\40\1\u012a\21\40\37\0\2\40\1\u012b"+
    "\36\40\37\0\6\40\1\u012c\32\40\37\0\10\40\1\u012d"+
    "\30\40\37\0\17\40\1\u012e\21\40\37\0\17\40\1\u012f"+
    "\21\40\55\0\1\u0130\61\0\1\u0131\131\0\1\u0132\60\0"+
    "\1\u0133\64\0\2\40\1\u0134\36\40\37\0\2\40\1\u0135"+
    "\36\40\37\0\5\40\1\u0136\33\40\37\0\12\40\1\u0137"+
    "\26\40\37\0\12\40\1\u0138\26\40\37\0\13\40\1\u0139"+
    "\25\40\37\0\6\40\1\u013a\32\40\37\0\17\40\1\u013b"+
    "\21\40\37\0\24\40\1\u013c\14\40\37\0\2\40\1\u013d"+
    "\36\40\37\0\5\40\1\u013e\33\40\37\0\12\40\1\u013f"+
    "\26\40\37\0\25\40\1\u0140\13\40\37\0\6\40\1\u0141"+
    "\32\40\37\0\6\40\1\u0142\32\40\56\0\1\u0143\73\0"+
    "\1\u0144\120\0\1\u0145\43\0\12\40\1\u0146\26\40\37\0"+
    "\12\40\1\u0147\26\40\37\0\12\40\1\u0148\26\40\37\0"+
    "\4\40\1\u0149\34\40\37\0\13\40\1\u014a\25\40\37\0"+
    "\6\40\1\u014b\32\40\37\0\12\40\1\u014c\26\40\37\0"+
    "\12\40\1\u014d\26\40\37\0\12\40\1\u014e\26\40\37\0"+
    "\1\u014f\40\40\37\0\17\40\1\u0150\21\40\45\0\1\u0151"+
    "\110\0\1\u0152\115\0\1\u0153\42\0\11\40\1\u0154\27\40"+
    "\37\0\16\40\1\u0155\22\40\37\0\3\40\1\u0156\35\40"+
    "\37\0\4\40\1\u0157\34\40\40\0\1\u0158\134\0\1\u0159"+
    "\41\0\21\40\1\u015a\17\40\37\0\1\u015b\40\40\37\0"+
    "\21\40\1\u015c\17\40\43\0\1\u015d\73\0\4\40\1\u015e"+
    "\34\40\37\0\1\40\1\u015f\37\40\37\0\12\40\1\u0160"+
    "\26\40\44\0\1\u0161\72\0\31\40\1\u0162\7\40\37\0"+
    "\2\40\1\u0163\36\40\37\0\1\40\1\u0164\37\40\51\0"+
    "\1\u0165\65\0\17\40\1\u0166\21\40\37\0\1\40\1\u0167"+
    "\37\40\37\0\17\40\1\u0168\21\40\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\7\1\14\11\23\1\22\11\1\0\1\1"+
    "\2\11\1\0\4\11\15\1\10\0\24\1\2\0\1\11"+
    "\1\0\21\1\14\0\1\11\1\0\25\1\2\0\15\1"+
    "\13\0\1\11\2\0\37\1\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\4\0\40\1\1\11\3\0\2\11"+
    "\1\0\26\1\1\0\1\11\2\0\17\1\3\0\13\1"+
    "\1\11\2\0\4\1\1\0\1\11\3\1\1\0\3\1"+
    "\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    String tempcadena= "";
    int escape = 0;
    int contador = 0;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
            } 
            // fall through
          case 113: break;
          case 2: 
            { return new Symbol(sym.Tmenos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 114: break;
          case 3: 
            { return new Symbol(sym.Tmas, yyline, yycolumn,yytext());
            } 
            // fall through
          case 115: break;
          case 4: 
            { return new Symbol(sym.Tpor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 116: break;
          case 5: 
            { return new Symbol(sym.Tdiv, yyline, yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 6: 
            { return new Symbol(sym.Tnot, yyline, yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 7: 
            { return new Symbol(sym.Tigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 8: 
            { return new Symbol(sym.Tmenor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 9: 
            { return new Symbol(sym.Tmayor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 10: 
            { return new Symbol(sym.Tllave_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 11: 
            { return new Symbol(sym.Tllave_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 12: 
            { return new Symbol(sym.Tcorchete_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 13: 
            { return new Symbol(sym.Tcorchete_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 125: break;
          case 14: 
            { return new Symbol(sym.Tpycoma, yyline, yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 15: 
            { return new Symbol(sym.Tpar_a, yyline, yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 16: 
            { return new Symbol(sym.Tpar_c, yyline, yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          case 17: 
            { return new Symbol(sym.Tcoma, yyline, yycolumn,yytext());
            } 
            // fall through
          case 129: break;
          case 18: 
            { return new Symbol(sym.Tmod, yyline, yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 19: 
            { return new Symbol(sym.Tpotencia, yyline, yycolumn,yytext());
            } 
            // fall through
          case 131: break;
          case 20: 
            { return new Symbol(sym.Tdospuntos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 132: break;
          case 21: 
            { return new Symbol(sym.Tpunto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 133: break;
          case 22: 
            { return new Symbol(sym.Tid, yyline, yycolumn,yytext());
            } 
            // fall through
          case 134: break;
          case 23: 
            { return new Symbol(sym.Tentero, yyline, yycolumn,yytext());
            } 
            // fall through
          case 135: break;
          case 24: 
            { /*Espacios en blanco, ignorados*/
            } 
            // fall through
          case 136: break;
          case 25: 
            { /*Saltos de linea, ignorados*/
            } 
            // fall through
          case 137: break;
          case 26: 
            { yybegin(cadena); tempcadena+="\""; escape=0;
            } 
            // fall through
          case 138: break;
          case 27: 
            { yybegin(cadena2); tempcadena+="\""; escape=0; contador=0;
            } 
            // fall through
          case 139: break;
          case 28: 
            { tempcadena+=yytext();
            } 
            // fall through
          case 140: break;
          case 29: 
            { if(escape==0){
                    tempcadena+=yytext();              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 141: break;
          case 30: 
            { if(escape==0){
                 tempcadena+=yytext();
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 142: break;
          case 31: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba cierre de cadena (\")."); 
                    yybegin(YYINITIAL);
                }else{
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba caracter de escape o cierre de cadena;"); 
                    yybegin(YYINITIAL); 
                }
            } 
            // fall through
          case 143: break;
          case 32: 
            { if(escape==0){
                    String tmp=tempcadena+"\""; 
                    tempcadena=""; yybegin(YYINITIAL);  
                    return new Symbol(sym.Tcadena, yychar,yyline,tmp); 
                }
                else{
                    tempcadena+=yytext();
                    escape=0;
                }
            } 
            // fall through
          case 144: break;
          case 33: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Caracter especial  sin escape definido"); 
                    yybegin(YYINITIAL);              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 145: break;
          case 34: 
            { tempcadena+=yytext();
                if(escape==0){
                 escape=1;
                }else{
                 escape=0;
                }
            } 
            // fall through
          case 146: break;
          case 35: 
            { contador++; tempcadena+=yytext();
            } 
            // fall through
          case 147: break;
          case 36: 
            { contador++;
                if(escape==0){
                    tempcadena+=yytext();              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 148: break;
          case 37: 
            { contador++;
                if(escape==0){
                 tempcadena+=yytext();
                }else{
                 tempcadena+=yytext();
                 escape=0;
                }
            } 
            // fall through
          case 149: break;
          case 38: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba cierre de caracter (\")."); 
                    yybegin(YYINITIAL);
                }else{
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Se esperaba caracter de escape o cierre de caracter;"); 
                    yybegin(YYINITIAL); 
                }
            } 
            // fall through
          case 150: break;
          case 39: 
            { if(escape==0){
                    String tmp=tempcadena; tempcadena="";  
                    System.out.println("Caracter especial  sin escape definido"); 
                    yybegin(YYINITIAL);              
                }else{
                 tempcadena+=yytext();
                 escape=0;
                 contador++;
                }
            } 
            // fall through
          case 151: break;
          case 40: 
            { if(escape==0){
                    if(contador>1)
                    {
                        String tmp=tempcadena+"\""; 
                        tempcadena=""; yybegin(YYINITIAL);  
                        return new Symbol(sym.Tcaracter, yychar,yyline,tmp); 
                    }
                    else{
                        String tmp=tempcadena; tempcadena="";  
                        System.out.println("Tipo de dato caracter tiene mas de 1 caracter"); 
                        yybegin(YYINITIAL);
                    }
                }
                else{
                    tempcadena+=yytext();
                    escape=0;
                    contador++;
                }
            } 
            // fall through
          case 152: break;
          case 41: 
            { tempcadena+=yytext();
                if(escape==0){
                 escape=1;
                }else{
                 escape=0;
                 contador++;
                }
            } 
            // fall through
          case 153: break;
          case 42: 
            { /*iognore*/
            } 
            // fall through
          case 154: break;
          case 43: 
            { return new Symbol(sym.Tdiferente, yyline, yycolumn,yytext());
            } 
            // fall through
          case 155: break;
          case 44: 
            { return new Symbol(sym.Tigualigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 156: break;
          case 45: 
            { return new Symbol(sym.Tmenorigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 157: break;
          case 46: 
            { return new Symbol(sym.Tmayorigual, yyline, yycolumn,yytext());
            } 
            // fall through
          case 158: break;
          case 47: 
            { return new Symbol(sym.Tor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 159: break;
          case 48: 
            { return new Symbol(sym.Tand, yyline, yycolumn,yytext());
            } 
            // fall through
          case 160: break;
          case 49: 
            { return new Symbol(sym.Tif, yyline, yycolumn,yytext());
            } 
            // fall through
          case 161: break;
          case 50: 
            { return new Symbol(sym.Tent, yyline, yycolumn,yytext());
            } 
            // fall through
          case 162: break;
          case 51: 
            { return new Symbol(sym.Tnlo, yyline, yycolumn,yytext());
            } 
            // fall through
          case 163: break;
          case 52: 
            { return new Symbol(sym.Tdec, yyline, yycolumn,yytext());
            } 
            // fall through
          case 164: break;
          case 53: 
            { return new Symbol(sym.Tchr, yyline, yycolumn,yytext());
            } 
            // fall through
          case 165: break;
          case 54: 
            { return new Symbol(sym.Tbul, yyline, yycolumn,yytext());
            } 
            // fall through
          case 166: break;
          case 55: 
            { return new Symbol(sym.Twf, yyline, yycolumn,yytext());
            } 
            // fall through
          case 167: break;
          case 56: 
            { return new Symbol(sym.Tzro, yyline, yycolumn,yytext());
            } 
            // fall through
          case 168: break;
          case 57: 
            { return new Symbol(sym.Tfor, yyline, yycolumn,yytext());
            } 
            // fall through
          case 169: break;
          case 58: 
            { return new Symbol(sym.Tdecimal, yyline, yycolumn,yytext());
            } 
            // fall through
          case 170: break;
          case 59: 
            { return new Symbol(sym.Telse, yyline, yycolumn,yytext());
            } 
            // fall through
          case 171: break;
          case 60: 
            { return new Symbol(sym.Ttrue, yyline, yycolumn,yytext());
            } 
            // fall through
          case 172: break;
          case 61: 
            { return new Symbol(sym.Tcase, yyline, yycolumn,yytext());
            } 
            // fall through
          case 173: break;
          case 62: 
            { return new Symbol(sym.Truta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 174: break;
          case 63: 
            { return new Symbol(sym.Timp, yyline, yycolumn,yytext());
            } 
            // fall through
          case 175: break;
          case 64: 
            { return new Symbol(sym.Tsiga, yyline, yycolumn,yytext());
            } 
            // fall through
          case 176: break;
          case 65: 
            { return new Symbol(sym.Twhen, yyline, yycolumn,yytext());
            } 
            // fall through
          case 177: break;
          case 66: 
            { return new Symbol(sym.Trtxt, yyline, yycolumn,yytext());
            } 
            // fall through
          case 178: break;
          case 67: 
            { return new Symbol(sym.Tlbl, yyline, yycolumn,yytext());
            } 
            // fall through
          case 179: break;
          case 68: 
            { return new Symbol(sym.Teqls, yyline, yycolumn,yytext());
            } 
            // fall through
          case 180: break;
          case 69: 
            { return new Symbol(sym.Tconc, yyline, yycolumn,yytext());
            } 
            // fall through
          case 181: break;
          case 70: 
            { return new Symbol(sym.Tread, yyline, yycolumn,yytext());
            } 
            // fall through
          case 182: break;
          case 71: 
            { return new Symbol(sym.Taent, yyline, yycolumn,yytext());
            } 
            // fall through
          case 183: break;
          case 72: 
            { return new Symbol(sym.Tatxt, yyline, yycolumn,yytext());
            } 
            // fall through
          case 184: break;
          case 73: 
            { return new Symbol(sym.Tadec, yyline, yycolumn,yytext());
            } 
            // fall through
          case 185: break;
          case 74: 
            { return new Symbol(sym.Tfalse, yyline, yycolumn,yytext());
            } 
            // fall through
          case 186: break;
          case 75: 
            { return new Symbol(sym.Twhile, yyline, yycolumn,yytext());
            } 
            // fall through
          case 187: break;
          case 76: 
            { return new Symbol(sym.Trtxtn, yyline, yycolumn,yytext());
            } 
            // fall through
          case 188: break;
          case 77: 
            { return new Symbol(sym.Trtxtp, yyline, yycolumn,yytext());
            } 
            // fall through
          case 189: break;
          case 78: 
            { return new Symbol(sym.Trtxta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 190: break;
          case 79: 
            { return new Symbol(sym.Trbton, yyline, yycolumn,yytext());
            } 
            // fall through
          case 191: break;
          case 80: 
            { return new Symbol(sym.Tnombre, yyline, yycolumn,yytext());
            } 
            // fall through
          case 192: break;
          case 81: 
            { return new Symbol(sym.Tcorrer, yyline, yycolumn,yytext());
            } 
            // fall through
          case 193: break;
          case 82: 
            { return new Symbol(sym.Trepeat, yyline, yycolumn,yytext());
            } 
            // fall through
          case 194: break;
          case 83: 
            { return new Symbol(sym.Tromper, yyline, yycolumn,yytext());
            } 
            // fall through
          case 195: break;
          case 84: 
            { return new Symbol(sym.Tclose, yyline, yycolumn,yytext());
            } 
            // fall through
          case 196: break;
          case 85: 
            { return new Symbol(sym.Tapend, yyline, yycolumn,yytext());
            } 
            // fall through
          case 197: break;
          case 86: 
            { return new Symbol(sym.Twrite, yyline, yycolumn,yytext());
            } 
            // fall through
          case 198: break;
          case 87: 
            { return new Symbol(sym.Tsetpos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 199: break;
          case 88: 
            { return new Symbol(sym.Tswitch, yyline, yycolumn,yytext());
            } 
            // fall through
          case 200: break;
          case 89: 
            { return new Symbol(sym.Tfusion, yyline, yycolumn,yytext());
            } 
            // fall through
          case 201: break;
          case 90: 
            { return new Symbol(sym.Tgetpos, yyline, yycolumn,yytext());
            } 
            // fall through
          case 202: break;
          case 91: 
            { return new Symbol(sym.Tdefault, yyline, yycolumn,yytext());
            } 
            // fall through
          case 203: break;
          case 92: 
            { return new Symbol(sym.Tdefinir, yyline, yycolumn,yytext());
            } 
            // fall through
          case 204: break;
          case 93: 
            { return new Symbol(sym.Tcarpeta, yyline, yycolumn,yytext());
            } 
            // fall through
          case 205: break;
          case 94: 
            { return new Symbol(sym.Tpesode, yyline, yycolumn,yytext());
            } 
            // fall through
          case 206: break;
          case 95: 
            { return new Symbol(sym.Tsetalto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 207: break;
          case 96: 
            { return new Symbol(sym.Tarchivo, yyline, yycolumn,yytext());
            } 
            // fall through
          case 208: break;
          case 97: 
            { return new Symbol(sym.Tgetalto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 209: break;
          case 98: 
            { return new Symbol(sym.Tregresar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 210: break;
          case 99: 
            { return new Symbol(sym.Tproyecto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 211: break;
          case 100: 
            { return new Symbol(sym.Tsettexto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 212: break;
          case 101: 
            { return new Symbol(sym.Tsetancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 213: break;
          case 102: 
            { return new Symbol(sym.Timportar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 214: break;
          case 103: 
            { return new Symbol(sym.Tgettexto, yyline, yycolumn,yytext());
            } 
            // fall through
          case 215: break;
          case 104: 
            { return new Symbol(sym.Tgetancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 216: break;
          case 105: 
            { return new Symbol(sym.Trmensage, yyline, yycolumn,yytext());
            } 
            // fall through
          case 217: break;
          case 106: 
            { return new Symbol(sym.Treservar, yyline, yycolumn,yytext());
            } 
            // fall through
          case 218: break;
          case 107: 
            { return new Symbol(sym.Tfechamod, yyline, yycolumn,yytext());
            } 
            // fall through
          case 219: break;
          case 108: 
            { return new Symbol(sym.Tnuevogui, yyline, yycolumn,yytext());
            } 
            // fall through
          case 220: break;
          case 109: 
            { return new Symbol(sym.Taldarclick, yyline, yycolumn,yytext());
            } 
            // fall through
          case 221: break;
          case 110: 
            { return new Symbol(sym.Tconfiguracion, yyline, yycolumn,yytext());
            } 
            // fall through
          case 222: break;
          case 111: 
            { return new Symbol(sym.Taltoyancho, yyline, yycolumn,yytext());
            } 
            // fall through
          case 223: break;
          case 112: 
            { return new Symbol(sym.Tiniciarventana, yyline, yycolumn,yytext());
            } 
            // fall through
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
