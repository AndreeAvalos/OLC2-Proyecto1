
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;
import Tipos_Importantes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\353\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\055\005" +
    "\000\002\045\004\000\002\027\010\000\002\006\004\000" +
    "\002\006\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\006\000\002\030\010\000\002\030\014\000\002\031" +
    "\005\000\002\031\007\000\002\031\015\000\002\105\005" +
    "\000\002\105\003\000\002\011\005\000\002\011\007\000" +
    "\002\011\007\000\002\011\005\000\002\011\013\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\107\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\026\007\000\002\026\010\000\002\012\006\000\002" +
    "\032\010\000\002\032\007\000\002\102\005\000\002\102" +
    "\003\000\002\103\005\000\002\103\003\000\002\013\005" +
    "\000\002\013\007\000\002\056\007\000\002\014\012\000" +
    "\002\014\011\000\002\014\011\000\002\014\012\000\002" +
    "\014\013\000\002\014\012\000\002\112\004\000\002\112" +
    "\003\000\002\110\004\000\002\017\012\000\002\017\011" +
    "\000\002\017\011\000\002\017\013\000\002\007\004\000" +
    "\002\007\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\004\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\060\011\000\002\061\011\000\002\061\011" +
    "\000\002\062\011\000\002\063\011\000\002\064\013\000" +
    "\002\057\007\000\002\057\011\000\002\005\005\000\002" +
    "\005\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\005\000\002\004\004\000\002\004\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\054\007" +
    "\000\002\046\007\000\002\047\007\000\002\050\007\000" +
    "\002\050\011\000\002\051\006\000\002\052\012\000\002" +
    "\044\011\000\002\041\005\000\002\042\005\000\002\100" +
    "\012\000\002\077\012\000\002\077\003\000\002\104\006" +
    "\000\002\104\002\000\002\033\011\000\002\034\004\000" +
    "\002\035\004\000\002\037\013\000\002\040\014\000\002" +
    "\043\005\000\002\043\004\000\002\043\004\000\002\036" +
    "\011\000\002\111\004\000\002\111\003\000\002\101\006" +
    "\000\002\101\005\000\002\021\005\000\002\022\005\000" +
    "\002\022\006\000\002\073\004\000\002\074\005\000\002" +
    "\075\005\000\002\075\003\000\002\071\003\000\002\023" +
    "\007\000\002\023\011\000\002\024\003\000\002\025\006" +
    "\000\002\025\012\000\002\025\012\000\002\025\010\000" +
    "\002\025\010\000\002\076\004\000\002\076\003\000\002" +
    "\072\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\004\000\002\070\003\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\003\000\002\065\004\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\003\000\002\065\006\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\006\000\002" +
    "\065\010\000\002\065\006\000\002\065\006\000\002\065" +
    "\007\000\002\065\007\000\002\065\007\000\002\065\007" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0236\000\044\002\uffff\040\030\041\006\042\015\043" +
    "\016\047\032\061\007\062\031\063\020\105\024\106\027" +
    "\107\036\110\021\111\025\112\040\130\005\135\011\001" +
    "\002\000\044\002\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\047\ufffd\061\ufffd\062\ufffd\063\ufffd\105\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\112\ufffd\130\ufffd\135\ufffd\001\002" +
    "\000\012\011\347\021\152\037\343\130\u022e\001\002\000" +
    "\006\021\uffda\130\uffda\001\002\000\004\130\u0229\001\002" +
    "\000\044\002\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\047" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\112\ufff7\130\ufff7\135\ufff7\001\002\000" +
    "\004\130\u021e\001\002\000\120\002\uff47\020\uff47\040\uff47" +
    "\041\uff47\042\uff47\043\uff47\047\uff47\050\uff47\051\uff47\052" +
    "\uff47\053\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47" +
    "\061\uff47\062\uff47\063\uff47\064\uff47\071\uff47\077\uff47\100" +
    "\uff47\101\uff47\102\uff47\103\uff47\104\uff47\105\uff47\106\uff47" +
    "\107\uff47\110\uff47\111\uff47\112\uff47\113\uff47\116\uff47\127" +
    "\uff47\130\uff47\135\uff47\136\uff47\001\002\000\004\130\u021c" +
    "\001\002\000\004\002\u021b\001\002\000\006\021\uffd9\130" +
    "\uffd9\001\002\000\006\021\uffd8\130\uffd8\001\002\000\044" +
    "\002\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc" +
    "\111\ufffc\112\ufffc\130\ufffc\135\ufffc\001\002\000\004\133" +
    "\u021a\001\002\000\004\130\uffd4\001\002\000\044\002\000" +
    "\040\030\041\006\042\015\043\016\047\032\061\007\062" +
    "\031\063\020\105\024\106\027\107\036\110\021\111\025" +
    "\112\040\130\005\135\011\001\002\000\044\002\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\047\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112" +
    "\ufff4\130\ufff4\135\ufff4\001\002\000\004\130\uffd7\001\002" +
    "\000\004\130\uffd3\001\002\000\044\002\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\047\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\112\ufff5\130" +
    "\ufff5\135\ufff5\001\002\000\004\130\uffd6\001\002\000\006" +
    "\021\uffdb\130\uffdb\001\002\000\004\130\u020a\001\002\000" +
    "\006\114\u019f\130\u01a0\001\002\000\044\002\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\047\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa" +
    "\130\ufffa\135\ufffa\001\002\000\044\002\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\047\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\130" +
    "\ufff8\135\ufff8\001\002\000\044\002\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\047\ufffb\061\ufffb\062\ufffb\063\ufffb\105" +
    "\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\130\ufffb" +
    "\135\ufffb\001\002\000\004\130\uffd5\001\002\000\006\021" +
    "\050\130\051\001\002\000\004\130\uffd2\001\002\000\044" +
    "\002\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\047\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\111\ufff2\112\ufff2\130\ufff2\135\ufff2\001\002\000\044\002" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\047\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111" +
    "\ufff6\112\ufff6\130\ufff6\135\ufff6\001\002\000\044\002\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\047\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3" +
    "\112\ufff3\130\ufff3\135\ufff3\001\002\000\044\002\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\047\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112" +
    "\ufff1\130\ufff1\135\ufff1\001\002\000\044\002\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\047\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0" +
    "\130\ufff0\135\ufff0\001\002\000\044\002\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\047\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\130" +
    "\ufff9\135\ufff9\001\002\000\006\021\050\130\u0194\001\002" +
    "\000\004\022\234\001\002\000\012\011\061\021\057\023" +
    "\055\024\054\001\002\000\014\011\uffbe\021\uffbe\025\uffbe" +
    "\026\uffbe\130\uffbe\001\002\000\006\011\u018d\021\050\001" +
    "\002\000\016\025\254\040\030\041\006\042\015\043\016" +
    "\130\255\001\002\000\154\002\uffe0\004\uffe0\020\uffe0\024" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112" +
    "\uffe0\113\uffe0\116\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0" +
    "\133\uffe0\134\uffe0\135\uffe0\136\uffe0\001\002\000\010\011" +
    "\236\021\152\023\235\001\002\000\042\004\074\022\234" +
    "\024\063\044\076\045\072\066\103\067\071\070\102\072" +
    "\067\073\104\074\075\130\065\131\066\132\105\133\070" +
    "\134\077\001\002\000\116\002\uff40\004\uff40\005\uff40\006" +
    "\uff40\007\uff40\010\uff40\011\uff40\012\uff40\013\uff40\014\uff40" +
    "\015\uff40\016\uff40\020\uff40\021\uff40\022\uff40\023\uff40\025" +
    "\uff40\026\uff40\027\uff40\030\uff40\031\uff40\033\uff40\040\uff40" +
    "\041\uff40\042\uff40\043\uff40\047\uff40\061\uff40\062\uff40\063" +
    "\uff40\105\uff40\106\uff40\107\uff40\110\uff40\111\uff40\112\uff40" +
    "\130\uff40\135\uff40\001\002\000\042\004\074\006\101\024" +
    "\063\044\076\045\072\066\103\067\071\070\102\072\067" +
    "\073\104\074\075\130\065\131\066\132\105\133\070\134" +
    "\077\001\002\000\112\002\uff2b\004\uff2b\005\uff2b\006\uff2b" +
    "\007\uff2b\010\uff2b\012\uff2b\013\uff2b\014\uff2b\015\uff2b\016" +
    "\uff2b\020\uff2b\022\uff2b\023\uff2b\025\uff2b\026\uff2b\027\uff2b" +
    "\030\uff2b\031\uff2b\033\uff2b\040\uff2b\041\uff2b\042\uff2b\043" +
    "\uff2b\047\uff2b\061\uff2b\062\uff2b\063\uff2b\105\uff2b\106\uff2b" +
    "\107\uff2b\110\uff2b\111\uff2b\112\uff2b\130\uff2b\135\uff2b\001" +
    "\002\000\042\004\074\024\063\032\203\044\076\045\072" +
    "\066\103\067\071\070\102\072\067\073\104\074\075\130" +
    "\065\131\066\132\105\133\070\134\077\001\002\000\112" +
    "\002\uff28\004\uff28\005\uff28\006\uff28\007\uff28\010\uff28\012" +
    "\uff28\013\uff28\014\uff28\015\uff28\016\uff28\020\uff28\022\uff28" +
    "\023\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28\033" +
    "\uff28\040\uff28\041\uff28\042\uff28\043\uff28\047\uff28\061\uff28" +
    "\062\uff28\063\uff28\105\uff28\106\uff28\107\uff28\110\uff28\111" +
    "\uff28\112\uff28\130\uff28\135\uff28\001\002\000\120\002\uff1e" +
    "\004\uff1e\005\uff1e\006\uff1e\007\uff1e\010\uff1e\012\uff1e\013" +
    "\uff1e\014\uff1e\015\uff1e\016\uff1e\020\uff1e\021\152\022\uff1e" +
    "\023\uff1e\024\150\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031" +
    "\uff1e\033\uff1e\037\153\040\uff1e\041\uff1e\042\uff1e\043\uff1e" +
    "\047\uff1e\061\uff1e\062\uff1e\063\uff1e\105\uff1e\106\uff1e\107" +
    "\uff1e\110\uff1e\111\uff1e\112\uff1e\130\uff1e\135\uff1e\001\002" +
    "\000\114\002\uff1c\004\uff1c\005\uff1c\006\uff1c\007\uff1c\010" +
    "\uff1c\012\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\020\uff1c" +
    "\022\uff1c\023\uff1c\025\uff1c\026\uff1c\027\uff1c\030\uff1c\031" +
    "\uff1c\033\uff1c\034\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c" +
    "\047\uff1c\061\uff1c\062\uff1c\063\uff1c\105\uff1c\106\uff1c\107" +
    "\uff1c\110\uff1c\111\uff1c\112\uff1c\130\uff1c\135\uff1c\001\002" +
    "\000\004\024\145\001\002\000\114\002\uff19\004\uff19\005" +
    "\uff19\006\uff19\007\uff19\010\uff19\012\uff19\013\uff19\014\uff19" +
    "\015\uff19\016\uff19\020\uff19\022\uff19\023\uff19\025\uff19\026" +
    "\uff19\027\uff19\030\uff19\031\uff19\033\uff19\034\uff19\040\uff19" +
    "\041\uff19\042\uff19\043\uff19\047\uff19\061\uff19\062\uff19\063" +
    "\uff19\105\uff19\106\uff19\107\uff19\110\uff19\111\uff19\112\uff19" +
    "\130\uff19\135\uff19\001\002\000\114\002\uff18\004\uff18\005" +
    "\uff18\006\uff18\007\uff18\010\uff18\012\uff18\013\uff18\014\uff18" +
    "\015\uff18\016\uff18\020\uff18\022\uff18\023\uff18\025\uff18\026" +
    "\uff18\027\uff18\030\uff18\031\uff18\033\uff18\034\uff18\040\uff18" +
    "\041\uff18\042\uff18\043\uff18\047\uff18\061\uff18\062\uff18\063" +
    "\uff18\105\uff18\106\uff18\107\uff18\110\uff18\111\uff18\112\uff18" +
    "\130\uff18\135\uff18\001\002\000\004\024\142\001\002\000" +
    "\020\004\127\005\132\006\126\007\125\023\141\027\131" +
    "\033\130\001\002\000\040\004\074\024\063\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\004\024\117\001\002\000\114\002\uff17\004\uff17\005\uff17" +
    "\006\uff17\007\uff17\010\uff17\012\uff17\013\uff17\014\uff17\015" +
    "\uff17\016\uff17\020\uff17\022\uff17\023\uff17\025\uff17\026\uff17" +
    "\027\uff17\030\uff17\031\uff17\033\uff17\034\uff17\040\uff17\041" +
    "\uff17\042\uff17\043\uff17\047\uff17\061\uff17\062\uff17\063\uff17" +
    "\105\uff17\106\uff17\107\uff17\110\uff17\111\uff17\112\uff17\130" +
    "\uff17\135\uff17\001\002\000\114\002\uff1b\004\uff1b\005\uff1b" +
    "\006\uff1b\007\uff1b\010\uff1b\012\uff1b\013\uff1b\014\uff1b\015" +
    "\uff1b\016\uff1b\020\uff1b\022\uff1b\023\uff1b\025\uff1b\026\uff1b" +
    "\027\uff1b\030\uff1b\031\uff1b\033\uff1b\034\uff1b\040\uff1b\041" +
    "\uff1b\042\uff1b\043\uff1b\047\uff1b\061\uff1b\062\uff1b\063\uff1b" +
    "\105\uff1b\106\uff1b\107\uff1b\110\uff1b\111\uff1b\112\uff1b\130" +
    "\uff1b\135\uff1b\001\002\000\112\002\uff29\004\uff29\005\uff29" +
    "\006\uff29\007\uff29\010\uff29\012\uff29\013\uff29\014\uff29\015" +
    "\uff29\016\uff29\020\uff29\022\uff29\023\uff29\025\uff29\026\uff29" +
    "\027\uff29\030\uff29\031\uff29\033\uff29\040\uff29\041\uff29\042" +
    "\uff29\043\uff29\047\uff29\061\uff29\062\uff29\063\uff29\105\uff29" +
    "\106\uff29\107\uff29\110\uff29\111\uff29\112\uff29\130\uff29\135" +
    "\uff29\001\002\000\004\130\115\001\002\000\004\024\112" +
    "\001\002\000\114\002\uff1a\004\uff1a\005\uff1a\006\uff1a\007" +
    "\uff1a\010\uff1a\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a" +
    "\020\uff1a\022\uff1a\023\uff1a\025\uff1a\026\uff1a\027\uff1a\030" +
    "\uff1a\031\uff1a\033\uff1a\034\uff1a\040\uff1a\041\uff1a\042\uff1a" +
    "\043\uff1a\047\uff1a\061\uff1a\062\uff1a\063\uff1a\105\uff1a\106" +
    "\uff1a\107\uff1a\110\uff1a\111\uff1a\112\uff1a\130\uff1a\135\uff1a" +
    "\001\002\000\004\024\107\001\002\000\114\002\uff1d\004" +
    "\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d\012\uff1d\013\uff1d" +
    "\014\uff1d\015\uff1d\016\uff1d\020\uff1d\022\uff1d\023\uff1d\025" +
    "\uff1d\026\uff1d\027\uff1d\030\uff1d\031\uff1d\033\uff1d\034\uff1d" +
    "\040\uff1d\041\uff1d\042\uff1d\043\uff1d\047\uff1d\061\uff1d\062" +
    "\uff1d\063\uff1d\105\uff1d\106\uff1d\107\uff1d\110\uff1d\111\uff1d" +
    "\112\uff1d\130\uff1d\135\uff1d\001\002\000\112\002\uff27\004" +
    "\uff27\005\uff27\006\uff27\007\uff27\010\uff27\012\uff27\013\uff27" +
    "\014\uff27\015\uff27\016\uff27\020\uff27\022\uff27\023\uff27\025" +
    "\uff27\026\uff27\027\uff27\030\uff27\031\uff27\033\uff27\040\uff27" +
    "\041\uff27\042\uff27\043\uff27\047\uff27\061\uff27\062\uff27\063" +
    "\uff27\105\uff27\106\uff27\107\uff27\110\uff27\111\uff27\112\uff27" +
    "\130\uff27\135\uff27\001\002\000\004\130\110\001\002\000" +
    "\004\025\111\001\002\000\112\002\uff23\004\uff23\005\uff23" +
    "\006\uff23\007\uff23\010\uff23\012\uff23\013\uff23\014\uff23\015" +
    "\uff23\016\uff23\020\uff23\022\uff23\023\uff23\025\uff23\026\uff23" +
    "\027\uff23\030\uff23\031\uff23\033\uff23\040\uff23\041\uff23\042" +
    "\uff23\043\uff23\047\uff23\061\uff23\062\uff23\063\uff23\105\uff23" +
    "\106\uff23\107\uff23\110\uff23\111\uff23\112\uff23\130\uff23\135" +
    "\uff23\001\002\000\004\130\113\001\002\000\004\025\114" +
    "\001\002\000\112\002\uff26\004\uff26\005\uff26\006\uff26\007" +
    "\uff26\010\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016\uff26" +
    "\020\uff26\022\uff26\023\uff26\025\uff26\026\uff26\027\uff26\030" +
    "\uff26\031\uff26\033\uff26\040\uff26\041\uff26\042\uff26\043\uff26" +
    "\047\uff26\061\uff26\062\uff26\063\uff26\105\uff26\106\uff26\107" +
    "\uff26\110\uff26\111\uff26\112\uff26\130\uff26\135\uff26\001\002" +
    "\000\004\023\116\001\002\000\120\002\uffd0\020\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\071\uffd0\077\uffd0" +
    "\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106" +
    "\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\116\uffd0" +
    "\127\uffd0\130\uffd0\135\uffd0\136\uffd0\001\002\000\004\130" +
    "\120\001\002\000\004\026\121\001\002\000\004\130\122" +
    "\001\002\000\004\025\123\001\002\000\112\002\uff25\004" +
    "\uff25\005\uff25\006\uff25\007\uff25\010\uff25\012\uff25\013\uff25" +
    "\014\uff25\015\uff25\016\uff25\020\uff25\022\uff25\023\uff25\025" +
    "\uff25\026\uff25\027\uff25\030\uff25\031\uff25\033\uff25\040\uff25" +
    "\041\uff25\042\uff25\043\uff25\047\uff25\061\uff25\062\uff25\063" +
    "\uff25\105\uff25\106\uff25\107\uff25\110\uff25\111\uff25\112\uff25" +
    "\130\uff25\135\uff25\001\002\000\112\002\uff33\004\uff33\005" +
    "\uff33\006\126\007\125\010\uff33\012\uff33\013\uff33\014\uff33" +
    "\015\uff33\016\uff33\020\uff33\022\uff33\023\uff33\025\uff33\026" +
    "\uff33\027\131\030\uff33\031\uff33\033\130\040\uff33\041\uff33" +
    "\042\uff33\043\uff33\047\uff33\061\uff33\062\uff33\063\uff33\105" +
    "\uff33\106\uff33\107\uff33\110\uff33\111\uff33\112\uff33\130\uff33" +
    "\135\uff33\001\002\000\040\004\074\024\063\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\040\004\074\024\063\044\076\045\072\066\103\067\071" +
    "\070\102\072\067\073\104\074\075\130\065\131\066\132" +
    "\105\133\070\134\077\001\002\000\040\004\074\024\063" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\040\004\074\024\063\044\076\045\072\066" +
    "\103\067\071\070\102\072\067\073\104\074\075\130\065" +
    "\131\066\132\105\133\070\134\077\001\002\000\040\004" +
    "\074\024\063\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\040\004\074\024\063\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\112\002\uff32\004\uff32\005\uff32\006\126\007\125\010" +
    "\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\020\uff32" +
    "\022\uff32\023\uff32\025\uff32\026\uff32\027\131\030\uff32\031" +
    "\uff32\033\130\040\uff32\041\uff32\042\uff32\043\uff32\047\uff32" +
    "\061\uff32\062\uff32\063\uff32\105\uff32\106\uff32\107\uff32\110" +
    "\uff32\111\uff32\112\uff32\130\uff32\135\uff32\001\002\000\112" +
    "\002\uff2e\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010\uff2e\012" +
    "\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\020\uff2e\022\uff2e" +
    "\023\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\033" +
    "\130\040\uff2e\041\uff2e\042\uff2e\043\uff2e\047\uff2e\061\uff2e" +
    "\062\uff2e\063\uff2e\105\uff2e\106\uff2e\107\uff2e\110\uff2e\111" +
    "\uff2e\112\uff2e\130\uff2e\135\uff2e\001\002\000\112\002\uff2d" +
    "\004\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d\012\uff2d\013" +
    "\uff2d\014\uff2d\015\uff2d\016\uff2d\020\uff2d\022\uff2d\023\uff2d" +
    "\025\uff2d\026\uff2d\027\uff2d\030\uff2d\031\uff2d\033\uff2d\040" +
    "\uff2d\041\uff2d\042\uff2d\043\uff2d\047\uff2d\061\uff2d\062\uff2d" +
    "\063\uff2d\105\uff2d\106\uff2d\107\uff2d\110\uff2d\111\uff2d\112" +
    "\uff2d\130\uff2d\135\uff2d\001\002\000\112\002\uff31\004\uff31" +
    "\005\uff31\006\126\007\125\010\uff31\012\uff31\013\uff31\014" +
    "\uff31\015\uff31\016\uff31\020\uff31\022\uff31\023\uff31\025\uff31" +
    "\026\uff31\027\131\030\uff31\031\uff31\033\130\040\uff31\041" +
    "\uff31\042\uff31\043\uff31\047\uff31\061\uff31\062\uff31\063\uff31" +
    "\105\uff31\106\uff31\107\uff31\110\uff31\111\uff31\112\uff31\130" +
    "\uff31\135\uff31\001\002\000\112\002\uff30\004\uff30\005\uff30" +
    "\006\uff30\007\uff30\010\uff30\012\uff30\013\uff30\014\uff30\015" +
    "\uff30\016\uff30\020\uff30\022\uff30\023\uff30\025\uff30\026\uff30" +
    "\027\uff30\030\uff30\031\uff30\033\130\040\uff30\041\uff30\042" +
    "\uff30\043\uff30\047\uff30\061\uff30\062\uff30\063\uff30\105\uff30" +
    "\106\uff30\107\uff30\110\uff30\111\uff30\112\uff30\130\uff30\135" +
    "\uff30\001\002\000\112\002\uff2f\004\uff2f\005\uff2f\006\uff2f" +
    "\007\uff2f\010\uff2f\012\uff2f\013\uff2f\014\uff2f\015\uff2f\016" +
    "\uff2f\020\uff2f\022\uff2f\023\uff2f\025\uff2f\026\uff2f\027\uff2f" +
    "\030\uff2f\031\uff2f\033\130\040\uff2f\041\uff2f\042\uff2f\043" +
    "\uff2f\047\uff2f\061\uff2f\062\uff2f\063\uff2f\105\uff2f\106\uff2f" +
    "\107\uff2f\110\uff2f\111\uff2f\112\uff2f\130\uff2f\135\uff2f\001" +
    "\002\000\154\002\uffdf\004\uffdf\020\uffdf\024\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105" +
    "\uffdf\106\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf" +
    "\116\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\135\uffdf\136\uffdf\001\002\000\004\130\143\001\002" +
    "\000\004\025\144\001\002\000\112\002\uff2a\004\uff2a\005" +
    "\uff2a\006\uff2a\007\uff2a\010\uff2a\012\uff2a\013\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\020\uff2a\022\uff2a\023\uff2a\025\uff2a\026" +
    "\uff2a\027\uff2a\030\uff2a\031\uff2a\033\uff2a\040\uff2a\041\uff2a" +
    "\042\uff2a\043\uff2a\047\uff2a\061\uff2a\062\uff2a\063\uff2a\105" +
    "\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a\112\uff2a\130\uff2a" +
    "\135\uff2a\001\002\000\004\130\146\001\002\000\004\025" +
    "\147\001\002\000\112\002\uff24\004\uff24\005\uff24\006\uff24" +
    "\007\uff24\010\uff24\012\uff24\013\uff24\014\uff24\015\uff24\016" +
    "\uff24\020\uff24\022\uff24\023\uff24\025\uff24\026\uff24\027\uff24" +
    "\030\uff24\031\uff24\033\uff24\040\uff24\041\uff24\042\uff24\043" +
    "\uff24\047\uff24\061\uff24\062\uff24\063\uff24\105\uff24\106\uff24" +
    "\107\uff24\110\uff24\111\uff24\112\uff24\130\uff24\135\uff24\001" +
    "\002\000\044\004\074\024\063\025\177\032\203\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\114\002\uff4e\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010" +
    "\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\020\uff4e" +
    "\021\152\022\uff4e\023\uff4e\025\uff4e\026\uff4e\027\uff4e\030" +
    "\uff4e\031\uff4e\033\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e" +
    "\047\uff4e\061\uff4e\062\uff4e\063\uff4e\105\uff4e\106\uff4e\107" +
    "\uff4e\110\uff4e\111\uff4e\112\uff4e\130\uff4e\135\uff4e\001\002" +
    "\000\040\004\074\024\063\044\076\045\072\066\103\067" +
    "\071\070\102\072\067\073\104\074\075\130\065\131\066" +
    "\132\105\133\070\134\077\001\002\000\014\123\161\124" +
    "\157\125\154\126\160\130\156\001\002\000\004\024\172" +
    "\001\002\000\114\002\uff4d\004\uff4d\005\uff4d\006\uff4d\007" +
    "\uff4d\010\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d" +
    "\020\uff4d\022\uff4d\023\uff4d\025\uff4d\026\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\033\uff4d\037\170\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\047\uff4d\061\uff4d\062\uff4d\063\uff4d\105\uff4d\106" +
    "\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d\130\uff4d\135\uff4d" +
    "\001\002\000\116\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\047\uffe1\061\uffe1\062\uffe1\063\uffe1\105" +
    "\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\130\uffe1" +
    "\135\uffe1\001\002\000\004\024\166\001\002\000\004\024" +
    "\164\001\002\000\004\024\162\001\002\000\004\025\163" +
    "\001\002\000\112\002\uff22\004\uff22\005\uff22\006\uff22\007" +
    "\uff22\010\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22" +
    "\020\uff22\022\uff22\023\uff22\025\uff22\026\uff22\027\uff22\030" +
    "\uff22\031\uff22\033\uff22\040\uff22\041\uff22\042\uff22\043\uff22" +
    "\047\uff22\061\uff22\062\uff22\063\uff22\105\uff22\106\uff22\107" +
    "\uff22\110\uff22\111\uff22\112\uff22\130\uff22\135\uff22\001\002" +
    "\000\004\025\165\001\002\000\112\002\uff1f\004\uff1f\005" +
    "\uff1f\006\uff1f\007\uff1f\010\uff1f\012\uff1f\013\uff1f\014\uff1f" +
    "\015\uff1f\016\uff1f\020\uff1f\022\uff1f\023\uff1f\025\uff1f\026" +
    "\uff1f\027\uff1f\030\uff1f\031\uff1f\033\uff1f\040\uff1f\041\uff1f" +
    "\042\uff1f\043\uff1f\047\uff1f\061\uff1f\062\uff1f\063\uff1f\105" +
    "\uff1f\106\uff1f\107\uff1f\110\uff1f\111\uff1f\112\uff1f\130\uff1f" +
    "\135\uff1f\001\002\000\004\025\167\001\002\000\112\002" +
    "\uff21\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\012\uff21" +
    "\013\uff21\014\uff21\015\uff21\016\uff21\020\uff21\022\uff21\023" +
    "\uff21\025\uff21\026\uff21\027\uff21\030\uff21\031\uff21\033\uff21" +
    "\040\uff21\041\uff21\042\uff21\043\uff21\047\uff21\061\uff21\062" +
    "\uff21\063\uff21\105\uff21\106\uff21\107\uff21\110\uff21\111\uff21" +
    "\112\uff21\130\uff21\135\uff21\001\002\000\004\130\171\001" +
    "\002\000\116\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\047\uffe2\061\uffe2\062\uffe2\063\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\130\uffe2\135" +
    "\uffe2\001\002\000\004\025\173\001\002\000\112\002\uff20" +
    "\004\uff20\005\uff20\006\uff20\007\uff20\010\uff20\012\uff20\013" +
    "\uff20\014\uff20\015\uff20\016\uff20\020\uff20\022\uff20\023\uff20" +
    "\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\033\uff20\040" +
    "\uff20\041\uff20\042\uff20\043\uff20\047\uff20\061\uff20\062\uff20" +
    "\063\uff20\105\uff20\106\uff20\107\uff20\110\uff20\111\uff20\112" +
    "\uff20\130\uff20\135\uff20\001\002\000\020\004\127\005\132" +
    "\006\126\007\125\022\175\027\131\033\130\001\002\000" +
    "\116\002\uff3f\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010\uff3f" +
    "\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f\020" +
    "\uff3f\021\uff3f\022\uff3f\023\uff3f\025\uff3f\026\uff3f\027\uff3f" +
    "\030\uff3f\031\uff3f\033\uff3f\040\uff3f\041\uff3f\042\uff3f\043" +
    "\uff3f\047\uff3f\061\uff3f\062\uff3f\063\uff3f\105\uff3f\106\uff3f" +
    "\107\uff3f\110\uff3f\111\uff3f\112\uff3f\130\uff3f\135\uff3f\001" +
    "\002\000\116\002\uff41\004\uff41\005\uff41\006\uff41\007\uff41" +
    "\010\uff41\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016" +
    "\uff41\020\uff41\021\uff41\022\uff41\023\uff41\025\uff41\026\uff41" +
    "\027\uff41\030\uff41\031\uff41\033\uff41\040\uff41\041\uff41\042" +
    "\uff41\043\uff41\047\uff41\061\uff41\062\uff41\063\uff41\105\uff41" +
    "\106\uff41\107\uff41\110\uff41\111\uff41\112\uff41\130\uff41\135" +
    "\uff41\001\002\000\112\002\uff50\004\uff50\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\012\uff50\013\uff50\014\uff50\015\uff50\016" +
    "\uff50\020\uff50\022\uff50\023\uff50\025\uff50\026\uff50\027\uff50" +
    "\030\uff50\031\uff50\033\uff50\040\uff50\041\uff50\042\uff50\043" +
    "\uff50\047\uff50\061\uff50\062\uff50\063\uff50\105\uff50\106\uff50" +
    "\107\uff50\110\uff50\111\uff50\112\uff50\130\uff50\135\uff50\001" +
    "\002\000\006\025\uff4b\026\uff4b\001\002\000\074\002\uff3b" +
    "\010\217\012\223\013\221\014\222\015\uff3b\016\uff3b\020" +
    "\uff3b\023\uff3b\025\uff3b\026\uff3b\030\216\031\220\040\uff3b" +
    "\041\uff3b\042\uff3b\043\uff3b\047\uff3b\061\uff3b\062\uff3b\063" +
    "\uff3b\105\uff3b\106\uff3b\107\uff3b\110\uff3b\111\uff3b\112\uff3b" +
    "\130\uff3b\135\uff3b\001\002\000\110\002\uff34\004\127\005" +
    "\132\006\126\007\125\010\uff34\012\uff34\013\uff34\014\uff34" +
    "\015\uff34\016\uff34\020\uff34\023\uff34\025\uff34\026\uff34\027" +
    "\131\030\uff34\031\uff34\033\130\040\uff34\041\uff34\042\uff34" +
    "\043\uff34\047\uff34\061\uff34\062\uff34\063\uff34\105\uff34\106" +
    "\uff34\107\uff34\110\uff34\111\uff34\112\uff34\130\uff34\135\uff34" +
    "\001\002\000\042\004\074\024\063\032\203\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\006\025\213\026\212\001\002\000\014\015\206\016\207" +
    "\020\uff4a\025\uff4a\026\uff4a\001\002\000\042\004\074\024" +
    "\063\032\203\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\042\004\074\024\063\032\203" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\060\002\uff3d\015\uff3d\016\uff3d\020\uff3d\023" +
    "\uff3d\025\uff3d\026\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d" +
    "\047\uff3d\061\uff3d\062\uff3d\063\uff3d\105\uff3d\106\uff3d\107" +
    "\uff3d\110\uff3d\111\uff3d\112\uff3d\130\uff3d\135\uff3d\001\002" +
    "\000\060\002\uff3e\015\uff3e\016\207\020\uff3e\023\uff3e\025" +
    "\uff3e\026\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\047\uff3e" +
    "\061\uff3e\062\uff3e\063\uff3e\105\uff3e\106\uff3e\107\uff3e\110" +
    "\uff3e\111\uff3e\112\uff3e\130\uff3e\135\uff3e\001\002\000\042" +
    "\004\074\024\063\032\203\044\076\045\072\066\103\067" +
    "\071\070\102\072\067\073\104\074\075\130\065\131\066" +
    "\132\105\133\070\134\077\001\002\000\112\002\uff4f\004" +
    "\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\012\uff4f\013\uff4f" +
    "\014\uff4f\015\uff4f\016\uff4f\020\uff4f\022\uff4f\023\uff4f\025" +
    "\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\033\uff4f\040\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\047\uff4f\061\uff4f\062\uff4f\063" +
    "\uff4f\105\uff4f\106\uff4f\107\uff4f\110\uff4f\111\uff4f\112\uff4f" +
    "\130\uff4f\135\uff4f\001\002\000\006\025\uff4c\026\uff4c\001" +
    "\002\000\060\002\uff3c\015\uff3c\016\uff3c\020\uff3c\023\uff3c" +
    "\025\uff3c\026\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\047" +
    "\uff3c\061\uff3c\062\uff3c\063\uff3c\105\uff3c\106\uff3c\107\uff3c" +
    "\110\uff3c\111\uff3c\112\uff3c\130\uff3c\135\uff3c\001\002\000" +
    "\040\004\074\024\063\044\076\045\072\066\103\067\071" +
    "\070\102\072\067\073\104\074\075\130\065\131\066\132" +
    "\105\133\070\134\077\001\002\000\040\004\074\024\063" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\040\004\074\024\063\044\076\045\072\066" +
    "\103\067\071\070\102\072\067\073\104\074\075\130\065" +
    "\131\066\132\105\133\070\134\077\001\002\000\040\004" +
    "\074\024\063\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\040\004\074\024\063\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\040\004\074\024\063\044\076\045\072\066\103\067" +
    "\071\070\102\072\067\073\104\074\075\130\065\131\066" +
    "\132\105\133\070\134\077\001\002\000\074\002\uff36\010" +
    "\uff36\012\uff36\013\uff36\014\uff36\015\uff36\016\uff36\020\uff36" +
    "\023\uff36\025\uff36\026\uff36\030\uff36\031\uff36\040\uff36\041" +
    "\uff36\042\uff36\043\uff36\047\uff36\061\uff36\062\uff36\063\uff36" +
    "\105\uff36\106\uff36\107\uff36\110\uff36\111\uff36\112\uff36\130" +
    "\uff36\135\uff36\001\002\000\074\002\uff3a\010\uff3a\012\uff3a" +
    "\013\uff3a\014\uff3a\015\uff3a\016\uff3a\020\uff3a\023\uff3a\025" +
    "\uff3a\026\uff3a\030\uff3a\031\uff3a\040\uff3a\041\uff3a\042\uff3a" +
    "\043\uff3a\047\uff3a\061\uff3a\062\uff3a\063\uff3a\105\uff3a\106" +
    "\uff3a\107\uff3a\110\uff3a\111\uff3a\112\uff3a\130\uff3a\135\uff3a" +
    "\001\002\000\074\002\uff39\010\uff39\012\uff39\013\uff39\014" +
    "\uff39\015\uff39\016\uff39\020\uff39\023\uff39\025\uff39\026\uff39" +
    "\030\uff39\031\uff39\040\uff39\041\uff39\042\uff39\043\uff39\047" +
    "\uff39\061\uff39\062\uff39\063\uff39\105\uff39\106\uff39\107\uff39" +
    "\110\uff39\111\uff39\112\uff39\130\uff39\135\uff39\001\002\000" +
    "\074\002\uff37\010\uff37\012\uff37\013\uff37\014\uff37\015\uff37" +
    "\016\uff37\020\uff37\023\uff37\025\uff37\026\uff37\030\uff37\031" +
    "\uff37\040\uff37\041\uff37\042\uff37\043\uff37\047\uff37\061\uff37" +
    "\062\uff37\063\uff37\105\uff37\106\uff37\107\uff37\110\uff37\111" +
    "\uff37\112\uff37\130\uff37\135\uff37\001\002\000\074\002\uff35" +
    "\010\uff35\012\uff35\013\uff35\014\uff35\015\uff35\016\uff35\020" +
    "\uff35\023\uff35\025\uff35\026\uff35\030\uff35\031\uff35\040\uff35" +
    "\041\uff35\042\uff35\043\uff35\047\uff35\061\uff35\062\uff35\063" +
    "\uff35\105\uff35\106\uff35\107\uff35\110\uff35\111\uff35\112\uff35" +
    "\130\uff35\135\uff35\001\002\000\074\002\uff38\010\uff38\012" +
    "\uff38\013\uff38\014\uff38\015\uff38\016\uff38\020\uff38\023\uff38" +
    "\025\uff38\026\uff38\030\uff38\031\uff38\040\uff38\041\uff38\042" +
    "\uff38\043\uff38\047\uff38\061\uff38\062\uff38\063\uff38\105\uff38" +
    "\106\uff38\107\uff38\110\uff38\111\uff38\112\uff38\130\uff38\135" +
    "\uff38\001\002\000\010\015\206\016\207\025\233\001\002" +
    "\000\112\002\uff2c\004\uff2c\005\uff2c\006\uff2c\007\uff2c\010" +
    "\uff2c\012\uff2c\013\uff2c\014\uff2c\015\uff2c\016\uff2c\020\uff2c" +
    "\022\uff2c\023\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031" +
    "\uff2c\033\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c\047\uff2c" +
    "\061\uff2c\062\uff2c\063\uff2c\105\uff2c\106\uff2c\107\uff2c\110" +
    "\uff2c\111\uff2c\112\uff2c\130\uff2c\135\uff2c\001\002\000\014" +
    "\011\uffbd\021\uffbd\025\uffbd\026\uffbd\130\uffbd\001\002\000" +
    "\120\002\uff46\020\uff46\040\uff46\041\uff46\042\uff46\043\uff46" +
    "\047\uff46\050\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055" +
    "\uff46\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46" +
    "\064\uff46\071\uff46\077\uff46\100\uff46\101\uff46\102\uff46\103" +
    "\uff46\104\uff46\105\uff46\106\uff46\107\uff46\110\uff46\111\uff46" +
    "\112\uff46\113\uff46\116\uff46\127\uff46\130\uff46\135\uff46\136" +
    "\uff46\001\002\000\042\004\074\017\237\024\063\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\044\004\074\017\244\024\063\032\203\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\020\010\217\012\223\013\221\014\222\023\241\030\216" +
    "\031\220\001\002\000\120\002\uff43\020\uff43\040\uff43\041" +
    "\uff43\042\uff43\043\uff43\047\uff43\050\uff43\051\uff43\052\uff43" +
    "\053\uff43\054\uff43\055\uff43\056\uff43\057\uff43\060\uff43\061" +
    "\uff43\062\uff43\063\uff43\064\uff43\071\uff43\077\uff43\100\uff43" +
    "\101\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\107" +
    "\uff43\110\uff43\111\uff43\112\uff43\113\uff43\116\uff43\127\uff43" +
    "\130\uff43\135\uff43\136\uff43\001\002\000\006\020\252\026" +
    "\247\001\002\000\006\020\uffc9\026\uffc9\001\002\000\044" +
    "\004\074\017\244\024\063\032\203\044\076\045\072\066" +
    "\103\067\071\070\102\072\067\073\104\074\075\130\065" +
    "\131\066\132\105\133\070\134\077\001\002\000\006\020" +
    "\uffcb\026\uffcb\001\002\000\006\020\250\026\247\001\002" +
    "\000\044\004\074\017\244\024\063\032\203\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\006\020\uffca\026\uffca\001\002\000\006\020\uffcc\026\uffcc" +
    "\001\002\000\004\023\253\001\002\000\120\002\uff44\020" +
    "\uff44\040\uff44\041\uff44\042\uff44\043\uff44\047\uff44\050\uff44" +
    "\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44\056\uff44\057" +
    "\uff44\060\uff44\061\uff44\062\uff44\063\uff44\064\uff44\071\uff44" +
    "\077\uff44\100\uff44\101\uff44\102\uff44\103\uff44\104\uff44\105" +
    "\uff44\106\uff44\107\uff44\110\uff44\111\uff44\112\uff44\113\uff44" +
    "\116\uff44\127\uff44\130\uff44\135\uff44\136\uff44\001\002\000" +
    "\004\017\u018a\001\002\000\004\130\u0189\001\002\000\004" +
    "\130\u0186\001\002\000\006\025\262\026\261\001\002\000" +
    "\006\025\uff8d\026\uff8d\001\002\000\014\040\030\041\006" +
    "\042\015\043\016\130\255\001\002\000\004\017\263\001" +
    "\002\000\056\040\030\041\006\042\015\043\016\050\337" +
    "\051\264\052\277\053\330\054\302\057\303\060\310\064" +
    "\274\071\332\077\320\100\315\101\270\102\305\103\272" +
    "\104\307\130\341\135\011\136\265\001\002\000\004\024" +
    "\u017f\001\002\000\004\024\u017b\001\002\000\064\020\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\050\uff74\051\uff74\052" +
    "\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74" +
    "\064\uff74\071\uff74\077\uff74\100\uff74\101\uff74\102\uff74\103" +
    "\uff74\104\uff74\130\uff74\135\uff74\136\uff74\001\002\000\064" +
    "\020\uff83\040\uff83\041\uff83\042\uff83\043\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\060\uff83\064\uff83\071\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\130\uff83\135\uff83\136\uff83\001\002" +
    "\000\004\024\u0177\001\002\000\064\020\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\064\uff7d\071" +
    "\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d" +
    "\130\uff7d\135\uff7d\136\uff7d\001\002\000\004\024\u0174\001" +
    "\002\000\064\020\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\064\uff88\071\uff88\077\uff88\100\uff88" +
    "\101\uff88\102\uff88\103\uff88\104\uff88\130\uff88\135\uff88\136" +
    "\uff88\001\002\000\042\004\074\024\063\032\203\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\064\020\uff82\040\uff82\041\uff82\042\uff82\043\uff82\050" +
    "\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\064\uff82\071\uff82\077\uff82\100\uff82\101" +
    "\uff82\102\uff82\103\uff82\104\uff82\130\uff82\135\uff82\136\uff82" +
    "\001\002\000\064\020\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\056\uff75\057\uff75\060\uff75\064\uff75\071\uff75\077\uff75\100" +
    "\uff75\101\uff75\102\uff75\103\uff75\104\uff75\130\uff75\135\uff75" +
    "\136\uff75\001\002\000\004\024\u0161\001\002\000\064\020" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\064\uff80\071\uff80\077\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\130\uff80\135\uff80\136\uff80\001\002\000" +
    "\064\020\uff73\040\uff73\041\uff73\042\uff73\043\uff73\050\uff73" +
    "\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057" +
    "\uff73\060\uff73\064\uff73\071\uff73\077\uff73\100\uff73\101\uff73" +
    "\102\uff73\103\uff73\104\uff73\130\uff73\135\uff73\136\uff73\001" +
    "\002\000\004\024\u0151\001\002\000\004\023\u0150\001\002" +
    "\000\064\020\uff78\040\uff78\041\uff78\042\uff78\043\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\057\uff78\060\uff78\064\uff78\071\uff78\077\uff78\100\uff78\101" +
    "\uff78\102\uff78\103\uff78\104\uff78\130\uff78\135\uff78\136\uff78" +
    "\001\002\000\004\024\u0148\001\002\000\064\020\uff77\040" +
    "\uff77\041\uff77\042\uff77\043\uff77\050\uff77\051\uff77\052\uff77" +
    "\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\064" +
    "\uff77\071\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77" +
    "\104\uff77\130\uff77\135\uff77\136\uff77\001\002\000\004\024" +
    "\u0141\001\002\000\004\023\u0140\001\002\000\064\020\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81" +
    "\064\uff81\071\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103" +
    "\uff81\104\uff81\130\uff81\135\uff81\136\uff81\001\002\000\064" +
    "\020\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e" +
    "\060\uff7e\064\uff7e\071\uff7e\077\uff7e\100\uff7e\101\uff7e\102" +
    "\uff7e\103\uff7e\104\uff7e\130\uff7e\135\uff7e\136\uff7e\001\002" +
    "\000\064\020\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\060\uff7f\064\uff7f\071\uff7f\077\uff7f\100\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\130\uff7f\135\uff7f\136\uff7f" +
    "\001\002\000\064\020\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e" +
    "\056\uff6e\057\uff6e\060\uff6e\064\uff6e\071\uff6e\077\uff6e\100" +
    "\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\130\uff6e\135\uff6e" +
    "\136\uff6e\001\002\000\004\024\u013c\001\002\000\064\020" +
    "\uff76\040\uff76\041\uff76\042\uff76\043\uff76\050\uff76\051\uff76" +
    "\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060" +
    "\uff76\064\uff76\071\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\104\uff76\130\uff76\135\uff76\136\uff76\001\002\000" +
    "\004\130\u013b\001\002\000\004\024\u0133\001\002\000\064" +
    "\020\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\050\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\064\uff7b\071\uff7b\077\uff7b\100\uff7b\101\uff7b\102" +
    "\uff7b\103\uff7b\104\uff7b\130\uff7b\135\uff7b\136\uff7b\001\002" +
    "\000\064\020\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\050" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\057\uff7a\060\uff7a\064\uff7a\071\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\130\uff7a\135\uff7a\136\uff7a" +
    "\001\002\000\064\020\uff79\040\uff79\041\uff79\042\uff79\043" +
    "\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\057\uff79\060\uff79\064\uff79\071\uff79\077\uff79\100" +
    "\uff79\101\uff79\102\uff79\103\uff79\104\uff79\130\uff79\135\uff79" +
    "\136\uff79\001\002\000\064\020\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\064\uff86\071\uff86\077" +
    "\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\130\uff86" +
    "\135\uff86\136\uff86\001\002\000\064\020\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\064\uff87\071" +
    "\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87" +
    "\130\uff87\135\uff87\136\uff87\001\002\000\064\020\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\050\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\064" +
    "\uff6f\071\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f" +
    "\104\uff6f\130\uff6f\135\uff6f\136\uff6f\001\002\000\064\020" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\050\uff7c\051\uff7c" +
    "\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060" +
    "\uff7c\064\uff7c\071\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\130\uff7c\135\uff7c\136\uff7c\001\002\000" +
    "\004\017\u012b\001\002\000\004\023\u012a\001\002\000\004" +
    "\024\u0124\001\002\000\064\020\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71" +
    "\055\uff71\056\uff71\057\uff71\060\uff71\064\uff71\071\uff71\077" +
    "\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104\uff71\130\uff71" +
    "\135\uff71\136\uff71\001\002\000\064\020\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\064\uff85\071" +
    "\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85" +
    "\130\uff85\135\uff85\136\uff85\001\002\000\064\020\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\050\uff72\051\uff72\052\uff72" +
    "\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\064" +
    "\uff72\071\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72" +
    "\104\uff72\130\uff72\135\uff72\136\uff72\001\002\000\064\020" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\050\uff70\051\uff70" +
    "\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060" +
    "\uff70\064\uff70\071\uff70\077\uff70\100\uff70\101\uff70\102\uff70" +
    "\103\uff70\104\uff70\130\uff70\135\uff70\136\uff70\001\002\000" +
    "\004\024\u0110\001\002\000\060\020\u010f\040\030\041\006" +
    "\042\015\043\016\050\337\051\264\052\277\053\330\054" +
    "\302\057\303\060\310\064\274\071\332\077\320\100\315" +
    "\101\270\102\305\103\272\104\307\130\341\135\011\136" +
    "\265\001\002\000\020\011\347\021\152\024\150\035\345" +
    "\036\346\037\343\130\344\001\002\000\006\011\u010b\021" +
    "\152\001\002\000\004\130\156\001\002\000\006\011\374" +
    "\023\373\001\002\000\004\023\372\001\002\000\004\023" +
    "\371\001\002\000\050\004\074\006\352\017\351\024\063" +
    "\032\203\044\076\045\072\046\350\066\103\067\071\070" +
    "\102\072\067\073\104\074\075\130\065\131\066\132\105" +
    "\133\070\134\077\001\002\000\004\024\362\001\002\000" +
    "\044\004\074\017\244\024\063\032\203\044\076\045\072" +
    "\066\103\067\071\070\102\072\067\073\104\074\075\130" +
    "\065\131\066\132\105\133\070\134\077\001\002\000\004" +
    "\130\355\001\002\000\010\015\206\016\207\023\354\001" +
    "\002\000\120\002\uffcf\020\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\071\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf" +
    "\111\uffcf\112\uffcf\113\uffcf\116\uffcf\127\uffcf\130\uffcf\135" +
    "\uffcf\136\uffcf\001\002\000\004\023\356\001\002\000\120" +
    "\002\uffd1\020\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\071\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\116\uffd1\127\uffd1\130\uffd1\135\uffd1\136\uffd1" +
    "\001\002\000\006\020\360\026\247\001\002\000\004\023" +
    "\361\001\002\000\120\002\uffce\020\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\071\uffce\077\uffce\100\uffce\101" +
    "\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce" +
    "\110\uffce\111\uffce\112\uffce\113\uffce\116\uffce\127\uffce\130" +
    "\uffce\135\uffce\136\uffce\001\002\000\004\045\363\001\002" +
    "\000\004\024\364\001\002\000\004\130\365\001\002\000" +
    "\004\025\366\001\002\000\004\025\367\001\002\000\004" +
    "\023\370\001\002\000\120\002\uffe6\020\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\071\uffe6\077\uffe6\100\uffe6" +
    "\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107" +
    "\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\116\uffe6\127\uffe6" +
    "\130\uffe6\135\uffe6\136\uffe6\001\002\000\072\020\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\050\uff64\051\uff64\052\uff64" +
    "\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\064" +
    "\uff64\071\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103\uff64" +
    "\104\uff64\113\uff64\116\uff64\127\uff64\130\uff64\135\uff64\136" +
    "\uff64\001\002\000\072\020\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055" +
    "\uff65\056\uff65\057\uff65\060\uff65\064\uff65\071\uff65\077\uff65" +
    "\100\uff65\101\uff65\102\uff65\103\uff65\104\uff65\113\uff65\116" +
    "\uff65\127\uff65\130\uff65\135\uff65\136\uff65\001\002\000\120" +
    "\002\uffe5\020\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\071\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112" +
    "\uffe5\113\uffe5\116\uffe5\127\uffe5\130\uffe5\135\uffe5\136\uffe5" +
    "\001\002\000\042\004\074\024\063\044\076\045\072\046" +
    "\375\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\004\024\u0100\001\002\000\020\010\217\012\223\013\221" +
    "\014\222\023\377\030\216\031\220\001\002\000\120\002" +
    "\uffe4\020\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\071\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104" +
    "\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4" +
    "\113\uffe4\116\uffe4\127\uffe4\130\uffe4\135\uffe4\136\uffe4\001" +
    "\002\000\004\045\u0101\001\002\000\004\024\u0102\001\002" +
    "\000\004\130\u0103\001\002\000\004\025\u0104\001\002\000" +
    "\004\025\u0105\001\002\000\004\023\u0106\001\002\000\120" +
    "\002\uffe3\020\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\071\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112" +
    "\uffe3\113\uffe3\116\uffe3\127\uffe3\130\uffe3\135\uffe3\136\uffe3" +
    "\001\002\000\006\011\u0108\037\170\001\002\000\042\004" +
    "\074\024\063\032\203\044\076\045\072\066\103\067\071" +
    "\070\102\072\067\073\104\074\075\130\065\131\066\132" +
    "\105\133\070\134\077\001\002\000\010\015\206\016\207" +
    "\023\u010a\001\002\000\120\002\uffe7\020\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\071\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\116\uffe7\127\uffe7" +
    "\130\uffe7\135\uffe7\136\uffe7\001\002\000\042\004\074\024" +
    "\063\032\203\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\010\015\206\016\207\023\u010d" +
    "\001\002\000\120\002\uffcd\020\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\071\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110" +
    "\uffcd\111\uffcd\112\uffcd\113\uffcd\116\uffcd\127\uffcd\130\uffcd" +
    "\135\uffcd\136\uffcd\001\002\000\064\020\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\064\uff89\071" +
    "\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89" +
    "\130\uff89\135\uff89\136\uff89\001\002\000\044\002\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\130\uffc5\135\uffc5\001\002\000\042\004\074\024\063" +
    "\032\203\044\076\045\072\066\103\067\071\070\102\072" +
    "\067\073\104\074\075\130\065\131\066\132\105\133\070" +
    "\134\077\001\002\000\010\015\206\016\207\025\u0112\001" +
    "\002\000\004\017\u0113\001\002\000\056\040\030\041\006" +
    "\042\015\043\016\050\337\051\264\052\277\053\330\054" +
    "\302\057\303\060\310\064\274\071\332\077\320\100\315" +
    "\101\270\102\305\103\272\104\307\130\341\135\011\136" +
    "\265\001\002\000\060\020\u0115\040\030\041\006\042\015" +
    "\043\016\050\337\051\264\052\277\053\330\054\302\057" +
    "\303\060\310\064\274\071\332\077\320\100\315\101\270" +
    "\102\305\103\272\104\307\130\341\135\011\136\265\001" +
    "\002\000\076\020\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f" +
    "\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056" +
    "\uff5f\057\uff5f\060\uff5f\064\uff5f\071\uff5f\075\u0119\076\u0116" +
    "\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\113" +
    "\uff5f\116\uff5f\127\uff5f\130\uff5f\135\uff5f\136\uff5f\001\002" +
    "\000\004\024\u011d\001\002\000\072\020\uff61\040\uff61\041" +
    "\uff61\042\uff61\043\uff61\050\uff61\051\uff61\052\uff61\053\uff61" +
    "\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\064\uff61\071" +
    "\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61" +
    "\113\uff61\116\uff61\127\uff61\130\uff61\135\uff61\136\uff61\001" +
    "\002\000\072\020\uff63\040\uff63\041\uff63\042\uff63\043\uff63" +
    "\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056" +
    "\uff63\057\uff63\060\uff63\064\uff63\071\uff63\077\uff63\100\uff63" +
    "\101\uff63\102\uff63\103\uff63\104\uff63\113\uff63\116\uff63\127" +
    "\uff63\130\uff63\135\uff63\136\uff63\001\002\000\004\017\u011a" +
    "\001\002\000\056\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\057\303\060\310" +
    "\064\274\071\332\077\320\100\315\101\270\102\305\103" +
    "\272\104\307\130\341\135\011\136\265\001\002\000\060" +
    "\020\u011c\040\030\041\006\042\015\043\016\050\337\051" +
    "\264\052\277\053\330\054\302\057\303\060\310\064\274" +
    "\071\332\077\320\100\315\101\270\102\305\103\272\104" +
    "\307\130\341\135\011\136\265\001\002\000\072\020\uff60" +
    "\040\uff60\041\uff60\042\uff60\043\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60" +
    "\064\uff60\071\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103" +
    "\uff60\104\uff60\113\uff60\116\uff60\127\uff60\130\uff60\135\uff60" +
    "\136\uff60\001\002\000\042\004\074\024\063\032\203\044" +
    "\076\045\072\066\103\067\071\070\102\072\067\073\104" +
    "\074\075\130\065\131\066\132\105\133\070\134\077\001" +
    "\002\000\010\015\206\016\207\025\u011f\001\002\000\004" +
    "\017\u0120\001\002\000\056\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\060\020\u0122\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\057\303\060\310" +
    "\064\274\071\332\077\320\100\315\101\270\102\305\103" +
    "\272\104\307\130\341\135\011\136\265\001\002\000\076" +
    "\020\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\050\uff5f\051" +
    "\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\060\uff5f\064\uff5f\071\uff5f\075\u0119\076\u0116\077\uff5f\100" +
    "\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\113\uff5f\116\uff5f" +
    "\127\uff5f\130\uff5f\135\uff5f\136\uff5f\001\002\000\072\020" +
    "\uff62\040\uff62\041\uff62\042\uff62\043\uff62\050\uff62\051\uff62" +
    "\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62\057\uff62\060" +
    "\uff62\064\uff62\071\uff62\077\uff62\100\uff62\101\uff62\102\uff62" +
    "\103\uff62\104\uff62\113\uff62\116\uff62\127\uff62\130\uff62\135" +
    "\uff62\136\uff62\001\002\000\004\130\u0125\001\002\000\004" +
    "\026\u0126\001\002\000\004\130\u0127\001\002\000\004\025" +
    "\u0128\001\002\000\004\023\u0129\001\002\000\072\020\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\050\uff66\051\uff66\052" +
    "\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66" +
    "\064\uff66\071\uff66\077\uff66\100\uff66\101\uff66\102\uff66\103" +
    "\uff66\104\uff66\113\uff66\116\uff66\127\uff66\130\uff66\135\uff66" +
    "\136\uff66\001\002\000\064\020\uff84\040\uff84\041\uff84\042" +
    "\uff84\043\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\064\uff84\071\uff84\077" +
    "\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\130\uff84" +
    "\135\uff84\136\uff84\001\002\000\056\040\030\041\006\042" +
    "\015\043\016\050\337\051\264\052\277\053\330\054\302" +
    "\057\303\060\310\064\274\071\332\077\320\100\315\101" +
    "\270\102\305\103\272\104\307\130\341\135\011\136\265" +
    "\001\002\000\060\020\u012d\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\004\065\u012e\001\002\000\004\024\u012f\001\002\000" +
    "\042\004\074\024\063\032\203\044\076\045\072\066\103" +
    "\067\071\070\102\072\067\073\104\074\075\130\065\131" +
    "\066\132\105\133\070\134\077\001\002\000\010\015\206" +
    "\016\207\025\u0131\001\002\000\004\023\u0132\001\002\000" +
    "\072\020\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\050\uff5b" +
    "\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\057" +
    "\uff5b\060\uff5b\064\uff5b\071\uff5b\077\uff5b\100\uff5b\101\uff5b" +
    "\102\uff5b\103\uff5b\104\uff5b\113\uff5b\116\uff5b\127\uff5b\130" +
    "\uff5b\135\uff5b\136\uff5b\001\002\000\004\133\u0134\001\002" +
    "\000\006\025\u0136\026\u0135\001\002\000\042\004\074\024" +
    "\063\032\203\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\004\023\u0137\001\002\000\072" +
    "\020\uff49\040\uff49\041\uff49\042\uff49\043\uff49\050\uff49\051" +
    "\uff49\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49" +
    "\060\uff49\064\uff49\071\uff49\077\uff49\100\uff49\101\uff49\102" +
    "\uff49\103\uff49\104\uff49\113\uff49\116\uff49\127\uff49\130\uff49" +
    "\135\uff49\136\uff49\001\002\000\006\025\u0139\026\212\001" +
    "\002\000\004\023\u013a\001\002\000\072\020\uff48\040\uff48" +
    "\041\uff48\042\uff48\043\uff48\050\uff48\051\uff48\052\uff48\053" +
    "\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060\uff48\064\uff48" +
    "\071\uff48\077\uff48\100\uff48\101\uff48\102\uff48\103\uff48\104" +
    "\uff48\113\uff48\116\uff48\127\uff48\130\uff48\135\uff48\136\uff48" +
    "\001\002\000\010\011\061\021\057\023\055\001\002\000" +
    "\004\133\u013d\001\002\000\004\025\u013e\001\002\000\004" +
    "\023\u013f\001\002\000\072\020\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c" +
    "\055\uff6c\056\uff6c\057\uff6c\060\uff6c\064\uff6c\071\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\113\uff6c" +
    "\116\uff6c\127\uff6c\130\uff6c\135\uff6c\136\uff6c\001\002\000" +
    "\072\020\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\050\uff5d" +
    "\051\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057" +
    "\uff5d\060\uff5d\064\uff5d\071\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\113\uff5d\116\uff5d\127\uff5d\130" +
    "\uff5d\135\uff5d\136\uff5d\001\002\000\004\133\u0142\001\002" +
    "\000\004\026\u0143\001\002\000\004\130\u0144\001\002\000" +
    "\004\025\u0145\001\002\000\004\023\u0146\001\002\000\004" +
    "\103\272\001\002\000\072\020\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\064\uff67\071\uff67\077" +
    "\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\113\uff67" +
    "\116\uff67\127\uff67\130\uff67\135\uff67\136\uff67\001\002\000" +
    "\004\133\u0149\001\002\000\006\025\u014b\026\u014a\001\002" +
    "\000\042\004\074\024\063\032\203\044\076\045\072\066" +
    "\103\067\071\070\102\072\067\073\104\074\075\130\065" +
    "\131\066\132\105\133\070\134\077\001\002\000\004\023" +
    "\u014c\001\002\000\072\020\uff6a\040\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\064\uff6a\071\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\113\uff6a\116" +
    "\uff6a\127\uff6a\130\uff6a\135\uff6a\136\uff6a\001\002\000\006" +
    "\025\u014e\026\212\001\002\000\004\023\u014f\001\002\000" +
    "\072\020\uff69\040\uff69\041\uff69\042\uff69\043\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057" +
    "\uff69\060\uff69\064\uff69\071\uff69\077\uff69\100\uff69\101\uff69" +
    "\102\uff69\103\uff69\104\uff69\113\uff69\116\uff69\127\uff69\130" +
    "\uff69\135\uff69\136\uff69\001\002\000\072\020\uff5c\040\uff5c" +
    "\041\uff5c\042\uff5c\043\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\064\uff5c" +
    "\071\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104" +
    "\uff5c\113\uff5c\116\uff5c\127\uff5c\130\uff5c\135\uff5c\136\uff5c" +
    "\001\002\000\042\004\074\024\063\032\203\044\076\045" +
    "\072\066\103\067\071\070\102\072\067\073\104\074\075" +
    "\130\065\131\066\132\105\133\070\134\077\001\002\000" +
    "\010\015\206\016\207\025\u0153\001\002\000\004\017\u0154" +
    "\001\002\000\006\055\u0155\056\u0157\001\002\000\022\044" +
    "\076\066\103\067\071\130\u015e\131\066\132\105\133\070" +
    "\134\077\001\002\000\010\020\u015b\055\u0155\056\u0157\001" +
    "\002\000\004\034\u0159\001\002\000\010\020\uff54\055\uff54" +
    "\056\uff54\001\002\000\056\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\064\020\uff52\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\055\uff52\056\uff52" +
    "\057\303\060\310\064\274\071\332\077\320\100\315\101" +
    "\270\102\305\103\272\104\307\130\341\135\011\136\265" +
    "\001\002\000\072\020\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56" +
    "\056\uff56\057\uff56\060\uff56\064\uff56\071\uff56\077\uff56\100" +
    "\uff56\101\uff56\102\uff56\103\uff56\104\uff56\113\uff56\116\uff56" +
    "\127\uff56\130\uff56\135\uff56\136\uff56\001\002\000\010\020" +
    "\uff55\055\uff55\056\uff55\001\002\000\004\034\u015f\001\002" +
    "\000\004\034\uff1e\001\002\000\056\040\030\041\006\042" +
    "\015\043\016\050\337\051\264\052\277\053\330\054\302" +
    "\057\303\060\310\064\274\071\332\077\320\100\315\101" +
    "\270\102\305\103\272\104\307\130\341\135\011\136\265" +
    "\001\002\000\064\020\uff53\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\055\uff53" +
    "\056\uff53\057\303\060\310\064\274\071\332\077\320\100" +
    "\315\101\270\102\305\103\272\104\307\130\341\135\011" +
    "\136\265\001\002\000\014\040\030\041\006\042\015\043" +
    "\016\135\011\001\002\000\040\004\074\024\063\044\076" +
    "\045\072\066\103\067\071\070\102\072\067\073\104\074" +
    "\075\130\065\131\066\132\105\133\070\134\077\001\002" +
    "\000\004\130\u0164\001\002\000\006\011\u0165\023\055\001" +
    "\002\000\040\004\074\024\063\044\076\045\072\066\103" +
    "\067\071\070\102\072\067\073\104\074\075\130\065\131" +
    "\066\132\105\133\070\134\077\001\002\000\020\010\217" +
    "\012\223\013\221\014\222\023\u0167\030\216\031\220\001" +
    "\002\000\004\130\u0168\001\002\000\010\011\u0170\035\u016e" +
    "\036\u016f\001\002\000\004\025\u016a\001\002\000\004\017" +
    "\u016b\001\002\000\056\040\030\041\006\042\015\043\016" +
    "\050\337\051\264\052\277\053\330\054\302\057\303\060" +
    "\310\064\274\071\332\077\320\100\315\101\270\102\305" +
    "\103\272\104\307\130\341\135\011\136\265\001\002\000" +
    "\060\020\u016d\040\030\041\006\042\015\043\016\050\337" +
    "\051\264\052\277\053\330\054\302\057\303\060\310\064" +
    "\274\071\332\077\320\100\315\101\270\102\305\103\272" +
    "\104\307\130\341\135\011\136\265\001\002\000\072\020" +
    "\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\050\uff5a\051\uff5a" +
    "\052\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060" +
    "\uff5a\064\uff5a\071\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a" +
    "\103\uff5a\104\uff5a\113\uff5a\116\uff5a\127\uff5a\130\uff5a\135" +
    "\uff5a\136\uff5a\001\002\000\004\025\uff58\001\002\000\004" +
    "\025\uff57\001\002\000\042\004\074\024\063\032\203\044" +
    "\076\045\072\066\103\067\071\070\102\072\067\073\104" +
    "\074\075\130\065\131\066\132\105\133\070\134\077\001" +
    "\002\000\010\015\206\016\207\025\uff59\001\002\000\010" +
    "\015\206\016\207\023\u0173\001\002\000\072\020\uff51\040" +
    "\uff51\041\uff51\042\uff51\043\uff51\050\uff51\051\uff51\052\uff51" +
    "\053\uff51\054\uff51\055\uff51\056\uff51\057\uff51\060\uff51\064" +
    "\uff51\071\uff51\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51" +
    "\104\uff51\113\uff51\116\uff51\127\uff51\130\uff51\135\uff51\136" +
    "\uff51\001\002\000\004\025\u0175\001\002\000\004\023\u0176" +
    "\001\002\000\072\020\uff68\040\uff68\041\uff68\042\uff68\043" +
    "\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68" +
    "\056\uff68\057\uff68\060\uff68\064\uff68\071\uff68\077\uff68\100" +
    "\uff68\101\uff68\102\uff68\103\uff68\104\uff68\113\uff68\116\uff68" +
    "\127\uff68\130\uff68\135\uff68\136\uff68\001\002\000\004\133" +
    "\u0178\001\002\000\004\025\u0179\001\002\000\004\023\u017a" +
    "\001\002\000\072\020\uff6b\040\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\064\uff6b\071\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\113\uff6b\116\uff6b" +
    "\127\uff6b\130\uff6b\135\uff6b\136\uff6b\001\002\000\004\130" +
    "\u017c\001\002\000\004\025\u017d\001\002\000\004\023\u017e" +
    "\001\002\000\064\020\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\060\uff6d\064\uff6d\071\uff6d\077\uff6d\100" +
    "\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\130\uff6d\135\uff6d" +
    "\136\uff6d\001\002\000\042\004\074\024\063\032\203\044" +
    "\076\045\072\066\103\067\071\070\102\072\067\073\104" +
    "\074\075\130\065\131\066\132\105\133\070\134\077\001" +
    "\002\000\010\015\206\016\207\025\u0181\001\002\000\004" +
    "\017\u0182\001\002\000\056\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\060\020\u0184\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\057\303\060\310" +
    "\064\274\071\332\077\320\100\315\101\270\102\305\103" +
    "\272\104\307\130\341\135\011\136\265\001\002\000\072" +
    "\020\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\050\uff5e\051" +
    "\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e" +
    "\060\uff5e\064\uff5e\071\uff5e\077\uff5e\100\uff5e\101\uff5e\102" +
    "\uff5e\103\uff5e\104\uff5e\113\uff5e\116\uff5e\127\uff5e\130\uff5e" +
    "\135\uff5e\136\uff5e\001\002\000\006\025\uff8e\026\uff8e\001" +
    "\002\000\010\021\050\025\uff8c\026\uff8c\001\002\000\010" +
    "\021\050\025\uff8a\026\uff8a\001\002\000\014\011\uffbf\021" +
    "\uffbf\025\uffbf\026\uffbf\130\uffbf\001\002\000\006\025\uff8b" +
    "\026\uff8b\001\002\000\056\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\060\020\u018c\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\057\303\060\310" +
    "\064\274\071\332\077\320\100\315\101\270\102\305\103" +
    "\272\104\307\130\341\135\011\136\265\001\002\000\044" +
    "\002\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\047\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\130\uffc4\135\uffc4\001\002\000\042\004" +
    "\074\017\u018e\024\063\044\076\045\072\066\103\067\071" +
    "\070\102\072\067\073\104\074\075\130\065\131\066\132" +
    "\105\133\070\134\077\001\002\000\044\004\074\017\244" +
    "\024\063\032\203\044\076\045\072\066\103\067\071\070" +
    "\102\072\067\073\104\074\075\130\065\131\066\132\105" +
    "\133\070\134\077\001\002\000\020\010\217\012\223\013" +
    "\221\014\222\023\u0190\030\216\031\220\001\002\000\120" +
    "\002\uff42\020\uff42\040\uff42\041\uff42\042\uff42\043\uff42\047" +
    "\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054\uff42\055\uff42" +
    "\056\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42\064" +
    "\uff42\071\uff42\077\uff42\100\uff42\101\uff42\102\uff42\103\uff42" +
    "\104\uff42\105\uff42\106\uff42\107\uff42\110\uff42\111\uff42\112" +
    "\uff42\113\uff42\116\uff42\127\uff42\130\uff42\135\uff42\136\uff42" +
    "\001\002\000\006\020\u0192\026\247\001\002\000\004\023" +
    "\u0193\001\002\000\120\002\uff45\020\uff45\040\uff45\041\uff45" +
    "\042\uff45\043\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053" +
    "\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061\uff45" +
    "\062\uff45\063\uff45\064\uff45\071\uff45\077\uff45\100\uff45\101" +
    "\uff45\102\uff45\103\uff45\104\uff45\105\uff45\106\uff45\107\uff45" +
    "\110\uff45\111\uff45\112\uff45\113\uff45\116\uff45\127\uff45\130" +
    "\uff45\135\uff45\136\uff45\001\002\000\004\024\u0195\001\002" +
    "\000\016\025\u0196\040\030\041\006\042\015\043\016\130" +
    "\255\001\002\000\004\017\u019c\001\002\000\006\025\u0198" +
    "\026\261\001\002\000\004\017\u0199\001\002\000\056\040" +
    "\030\041\006\042\015\043\016\050\337\051\264\052\277" +
    "\053\330\054\302\057\303\060\310\064\274\071\332\077" +
    "\320\100\315\101\270\102\305\103\272\104\307\130\341" +
    "\135\011\136\265\001\002\000\060\020\u019b\040\030\041" +
    "\006\042\015\043\016\050\337\051\264\052\277\053\330" +
    "\054\302\057\303\060\310\064\274\071\332\077\320\100" +
    "\315\101\270\102\305\103\272\104\307\130\341\135\011" +
    "\136\265\001\002\000\044\002\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\047\uffc1\061\uffc1\062\uffc1\063\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\130\uffc1\135" +
    "\uffc1\001\002\000\056\040\030\041\006\042\015\043\016" +
    "\050\337\051\264\052\277\053\330\054\302\057\303\060" +
    "\310\064\274\071\332\077\320\100\315\101\270\102\305" +
    "\103\272\104\307\130\341\135\011\136\265\001\002\000" +
    "\060\020\u019e\040\030\041\006\042\015\043\016\050\337" +
    "\051\264\052\277\053\330\054\302\057\303\060\310\064" +
    "\274\071\332\077\320\100\315\101\270\102\305\103\272" +
    "\104\307\130\341\135\011\136\265\001\002\000\044\002" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111" +
    "\uffc0\112\uffc0\130\uffc0\135\uffc0\001\002\000\004\024\u0205" +
    "\001\002\000\006\024\u01a2\034\u01a1\001\002\000\004\115" +
    "\u01ac\001\002\000\016\025\u01a3\040\030\041\006\042\015" +
    "\043\016\130\255\001\002\000\004\017\u01a9\001\002\000" +
    "\006\025\u01a5\026\261\001\002\000\004\017\u01a6\001\002" +
    "\000\056\040\030\041\006\042\015\043\016\050\337\051" +
    "\264\052\277\053\330\054\302\057\303\060\310\064\274" +
    "\071\332\077\320\100\315\101\270\102\305\103\272\104" +
    "\307\130\341\135\011\136\265\001\002\000\060\020\u01a8" +
    "\040\030\041\006\042\015\043\016\050\337\051\264\052" +
    "\277\053\330\054\302\057\303\060\310\064\274\071\332" +
    "\077\320\100\315\101\270\102\305\103\272\104\307\130" +
    "\341\135\011\136\265\001\002\000\044\002\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\047\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc" +
    "\130\uffbc\135\uffbc\001\002\000\056\040\030\041\006\042" +
    "\015\043\016\050\337\051\264\052\277\053\330\054\302" +
    "\057\303\060\310\064\274\071\332\077\320\100\315\101" +
    "\270\102\305\103\272\104\307\130\341\135\011\136\265" +
    "\001\002\000\060\020\u01ab\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\130\341\135\011\136\265\001\002" +
    "\000\044\002\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\047" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\105\uffbb\106\uffbb\107\uffbb" +
    "\110\uffbb\111\uffbb\112\uffbb\130\uffbb\135\uffbb\001\002\000" +
    "\004\024\u01ad\001\002\000\004\025\u01ae\001\002\000\004" +
    "\017\u01af\001\002\000\062\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\113\u01b9\116\u01c9\127\u01d1\130\u01d5" +
    "\135\011\001\002\000\064\020\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\057\uffa3\060\uffa3\064\uffa3\071\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\113\uffa3\116\uffa3\127\uffa3" +
    "\130\uffa3\135\uffa3\001\002\000\064\020\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\057\uffb2\060\uffb2\064\uffb2\071\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\113\uffb2\116\uffb2" +
    "\127\uffb2\130\uffb2\135\uffb2\001\002\000\064\020\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\057\uffac\060\uffac\064\uffac\071\uffac\077" +
    "\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\113\uffac" +
    "\116\uffac\127\uffac\130\uffac\135\uffac\001\002\000\064\020" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\057\uff99\060\uff99\064\uff99\071" +
    "\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99" +
    "\113\uff99\116\uff99\127\uff99\130\uff99\135\uff99\001\002\000" +
    "\064\020\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\057\uff9d\060\uff9d\064" +
    "\uff9d\071\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\113\uff9d\116\uff9d\127\uff9d\130\uff9d\135\uff9d\001" +
    "\002\000\064\020\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4\060" +
    "\uffa4\064\uffa4\071\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\104\uffa4\113\uffa4\116\uffa4\127\uffa4\130\uffa4\135" +
    "\uffa4\001\002\000\064\020\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057" +
    "\uffb1\060\uffb1\064\uffb1\071\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\104\uffb1\113\uffb1\116\uffb1\127\uffb1\130" +
    "\uffb1\135\uffb1\001\002\000\064\020\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\057\uffa2\060\uffa2\064\uffa2\071\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\113\uffa2\116\uffa2\127" +
    "\uffa2\130\uffa2\135\uffa2\001\002\000\064\020\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\057\uffaf\060\uffaf\064\uffaf\071\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\113\uffaf\116" +
    "\uffaf\127\uffaf\130\uffaf\135\uffaf\001\002\000\004\024\u01fd" +
    "\001\002\000\064\020\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7" +
    "\060\uffa7\064\uffa7\071\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\113\uffa7\116\uffa7\127\uffa7\130\uffa7" +
    "\135\uffa7\001\002\000\064\020\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\057\uffa6\060\uffa6\064\uffa6\071\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\103\uffa6\104\uffa6\113\uffa6\116\uffa6\127\uffa6" +
    "\130\uffa6\135\uffa6\001\002\000\064\020\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\060\uffb0\064\uffb0\071\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\113\uffb0\116\uffb0" +
    "\127\uffb0\130\uffb0\135\uffb0\001\002\000\064\020\u01fc\040" +
    "\030\041\006\042\015\043\016\050\337\051\264\052\277" +
    "\053\330\054\302\057\303\060\310\064\274\071\332\077" +
    "\320\100\315\101\270\102\305\103\272\104\307\113\u01b9" +
    "\116\u01c9\127\u01d1\130\u01d5\135\011\001\002\000\064\020" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98\064\uff98\071" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98" +
    "\113\uff98\116\uff98\127\uff98\130\uff98\135\uff98\001\002\000" +
    "\064\020\uffad\040\uffad\041\uffad\042\uffad\043\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad\064" +
    "\uffad\071\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\113\uffad\116\uffad\127\uffad\130\uffad\135\uffad\001" +
    "\002\000\064\020\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\057\uff9c\060" +
    "\uff9c\064\uff9c\071\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\103\uff9c\104\uff9c\113\uff9c\116\uff9c\127\uff9c\130\uff9c\135" +
    "\uff9c\001\002\000\064\020\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\057" +
    "\uffae\060\uffae\064\uffae\071\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\113\uffae\116\uffae\127\uffae\130" +
    "\uffae\135\uffae\001\002\000\064\020\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\057\uff97\060\uff97\064\uff97\071\uff97\077\uff97\100\uff97" +
    "\101\uff97\102\uff97\103\uff97\104\uff97\113\uff97\116\uff97\127" +
    "\uff97\130\uff97\135\uff97\001\002\000\064\020\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\057\uffa5\060\uffa5\064\uffa5\071\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\113\uffa5\116" +
    "\uffa5\127\uffa5\130\uffa5\135\uffa5\001\002\000\064\020\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\057\uffaa\060\uffaa\064\uffaa\071\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\113" +
    "\uffaa\116\uffaa\127\uffaa\130\uffaa\135\uffaa\001\002\000\064" +
    "\020\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9\064\uffa9" +
    "\071\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\113\uffa9\116\uffa9\127\uffa9\130\uffa9\135\uffa9\001\002" +
    "\000\064\020\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\057\uffb5\060\uffb5" +
    "\064\uffb5\071\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\113\uffb5\116\uffb5\127\uffb5\130\uffb5\135\uffb5" +
    "\001\002\000\064\020\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8" +
    "\060\uffa8\064\uffa8\071\uffa8\077\uffa8\100\uffa8\101\uffa8\102" +
    "\uffa8\103\uffa8\104\uffa8\113\uffa8\116\uffa8\127\uffa8\130\uffa8" +
    "\135\uffa8\001\002\000\064\020\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\057\uffb6\060\uffb6\064\uffb6\071\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\113\uffb6\116\uffb6\127\uffb6" +
    "\130\uffb6\135\uffb6\001\002\000\004\024\u01f5\001\002\000" +
    "\064\020\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\057\uffb7\060\uffb7\064" +
    "\uffb7\071\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\113\uffb7\116\uffb7\127\uffb7\130\uffb7\135\uffb7\001" +
    "\002\000\064\020\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\057\uff9e\060" +
    "\uff9e\064\uff9e\071\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e" +
    "\103\uff9e\104\uff9e\113\uff9e\116\uff9e\127\uff9e\130\uff9e\135" +
    "\uff9e\001\002\000\064\020\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\057" +
    "\uffab\060\uffab\064\uffab\071\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\113\uffab\116\uffab\127\uffab\130" +
    "\uffab\135\uffab\001\002\000\004\023\u01f4\001\002\000\064" +
    "\020\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\057\uff9b\060\uff9b\064\uff9b" +
    "\071\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\113\uff9b\116\uff9b\127\uff9b\130\uff9b\135\uff9b\001\002" +
    "\000\064\020\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\057\uffa0\060\uffa0" +
    "\064\uffa0\071\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\113\uffa0\116\uffa0\127\uffa0\130\uffa0\135\uffa0" +
    "\001\002\000\064\020\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\057\uffb4" +
    "\060\uffb4\064\uffb4\071\uffb4\077\uffb4\100\uffb4\101\uffb4\102" +
    "\uffb4\103\uffb4\104\uffb4\113\uffb4\116\uffb4\127\uffb4\130\uffb4" +
    "\135\uffb4\001\002\000\004\024\u01f0\001\002\000\064\020" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060\uffa1\064\uffa1\071" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1" +
    "\113\uffa1\116\uffa1\127\uffa1\130\uffa1\135\uffa1\001\002\000" +
    "\064\020\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\057\uff9f\060\uff9f\064" +
    "\uff9f\071\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f" +
    "\104\uff9f\113\uff9f\116\uff9f\127\uff9f\130\uff9f\135\uff9f\001" +
    "\002\000\064\020\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a\060" +
    "\uff9a\064\uff9a\071\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a" +
    "\103\uff9a\104\uff9a\113\uff9a\116\uff9a\127\uff9a\130\uff9a\135" +
    "\uff9a\001\002\000\020\011\347\021\152\024\150\035\345" +
    "\036\346\037\u01d6\130\344\001\002\000\014\117\u01d9\120" +
    "\u01d7\121\u01d8\122\u01da\130\156\001\002\000\004\024\u01ec" +
    "\001\002\000\004\024\u01e8\001\002\000\004\024\u01e1\001" +
    "\002\000\004\024\u01db\001\002\000\040\004\074\024\063" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\020\004\127\005\132\006\126\007\125\026" +
    "\u01dd\027\131\033\130\001\002\000\040\004\074\024\063" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\020\004\127\005\132\006\126\007\125\025" +
    "\u01df\027\131\033\130\001\002\000\004\023\u01e0\001\002" +
    "\000\064\020\uff91\040\uff91\041\uff91\042\uff91\043\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91" +
    "\064\uff91\071\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103" +
    "\uff91\104\uff91\113\uff91\116\uff91\127\uff91\130\uff91\135\uff91" +
    "\001\002\000\006\130\u01e2\133\u01e3\001\002\000\004\025" +
    "\u01e6\001\002\000\004\025\u01e4\001\002\000\004\023\u01e5" +
    "\001\002\000\064\020\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\057\uff95" +
    "\060\uff95\064\uff95\071\uff95\077\uff95\100\uff95\101\uff95\102" +
    "\uff95\103\uff95\104\uff95\113\uff95\116\uff95\127\uff95\130\uff95" +
    "\135\uff95\001\002\000\004\023\u01e7\001\002\000\064\020" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\057\uff94\060\uff94\064\uff94\071" +
    "\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94" +
    "\113\uff94\116\uff94\127\uff94\130\uff94\135\uff94\001\002\000" +
    "\040\004\074\024\063\044\076\045\072\066\103\067\071" +
    "\070\102\072\067\073\104\074\075\130\065\131\066\132" +
    "\105\133\070\134\077\001\002\000\020\004\127\005\132" +
    "\006\126\007\125\025\u01ea\027\131\033\130\001\002\000" +
    "\004\023\u01eb\001\002\000\064\020\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\057\uff92\060\uff92\064\uff92\071\uff92\077\uff92\100\uff92" +
    "\101\uff92\102\uff92\103\uff92\104\uff92\113\uff92\116\uff92\127" +
    "\uff92\130\uff92\135\uff92\001\002\000\040\004\074\024\063" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\020\004\127\005\132\006\126\007\125\025" +
    "\u01ee\027\131\033\130\001\002\000\004\023\u01ef\001\002" +
    "\000\064\020\uff93\040\uff93\041\uff93\042\uff93\043\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\057\uff93\060\uff93" +
    "\064\uff93\071\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\113\uff93\116\uff93\127\uff93\130\uff93\135\uff93" +
    "\001\002\000\004\130\u01f1\001\002\000\004\025\u01f2\001" +
    "\002\000\004\023\u01f3\001\002\000\064\020\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\057\uffc6\060\uffc6\064\uffc6\071\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\113\uffc6\116" +
    "\uffc6\127\uffc6\130\uffc6\135\uffc6\001\002\000\064\020\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\057\uffb3\060\uffb3\064\uffb3\071\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\113" +
    "\uffb3\116\uffb3\127\uffb3\130\uffb3\135\uffb3\001\002\000\040" +
    "\004\074\024\063\044\076\045\072\066\103\067\071\070" +
    "\102\072\067\073\104\074\075\130\065\131\066\132\105" +
    "\133\070\134\077\001\002\000\020\004\127\005\132\006" +
    "\126\007\125\026\u01f7\027\131\033\130\001\002\000\040" +
    "\004\074\024\063\044\076\045\072\066\103\067\071\070" +
    "\102\072\067\073\104\074\075\130\065\131\066\132\105" +
    "\133\070\134\077\001\002\000\020\004\127\005\132\006" +
    "\126\007\125\025\u01f9\027\131\033\130\001\002\000\004" +
    "\023\u01fa\001\002\000\064\020\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\057\uff96\060\uff96\064\uff96\071\uff96\077\uff96\100\uff96\101" +
    "\uff96\102\uff96\103\uff96\104\uff96\113\uff96\116\uff96\127\uff96" +
    "\130\uff96\135\uff96\001\002\000\064\020\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\057\uffb8\060\uffb8\064\uffb8\071\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\113\uffb8\116\uffb8" +
    "\127\uffb8\130\uffb8\135\uffb8\001\002\000\044\002\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\047\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\130\uffb9\135\uffb9\001\002\000\004\133\u01fe\001\002" +
    "\000\006\025\u0200\026\u01ff\001\002\000\042\004\074\024" +
    "\063\032\203\044\076\045\072\066\103\067\071\070\102" +
    "\072\067\073\104\074\075\130\065\131\066\132\105\133" +
    "\070\134\077\001\002\000\004\023\u0201\001\002\000\064" +
    "\020\uff90\040\uff90\041\uff90\042\uff90\043\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\057\uff90\060\uff90\064\uff90" +
    "\071\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104" +
    "\uff90\113\uff90\116\uff90\127\uff90\130\uff90\135\uff90\001\002" +
    "\000\006\025\u0203\026\212\001\002\000\004\023\u0204\001" +
    "\002\000\064\020\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\057\uff8f\060" +
    "\uff8f\064\uff8f\071\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f" +
    "\103\uff8f\104\uff8f\113\uff8f\116\uff8f\127\uff8f\130\uff8f\135" +
    "\uff8f\001\002\000\004\025\u0206\001\002\000\004\017\u0207" +
    "\001\002\000\062\040\030\041\006\042\015\043\016\050" +
    "\337\051\264\052\277\053\330\054\302\057\303\060\310" +
    "\064\274\071\332\077\320\100\315\101\270\102\305\103" +
    "\272\104\307\113\u01b9\116\u01c9\127\u01d1\130\u01d5\135\011" +
    "\001\002\000\064\020\u0209\040\030\041\006\042\015\043" +
    "\016\050\337\051\264\052\277\053\330\054\302\057\303" +
    "\060\310\064\274\071\332\077\320\100\315\101\270\102" +
    "\305\103\272\104\307\113\u01b9\116\u01c9\127\u01d1\130\u01d5" +
    "\135\011\001\002\000\044\002\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\047\uffba\061\uffba\062\uffba\063\uffba\105\uffba" +
    "\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\130\uffba\135" +
    "\uffba\001\002\000\004\017\u020b\001\002\000\014\040\030" +
    "\041\006\042\015\043\016\130\u020d\001\002\000\016\020" +
    "\u0216\040\030\041\006\042\015\043\016\130\u020d\001\002" +
    "\000\004\130\u0214\001\002\000\004\130\u0210\001\002\000" +
    "\016\020\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\130\uffeb" +
    "\001\002\000\006\021\152\023\u0211\001\002\000\016\020" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\130\uffea\001\002" +
    "\000\006\021\152\023\u0213\001\002\000\016\020\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\130\uffe8\001\002\000\004" +
    "\023\u0215\001\002\000\016\020\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\130\uffe9\001\002\000\004\023\u0218\001\002" +
    "\000\016\020\uffec\040\uffec\041\uffec\042\uffec\043\uffec\130" +
    "\uffec\001\002\000\044\002\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\047\uffed\061\uffed\062\uffed\063\uffed\105\uffed\106" +
    "\uffed\107\uffed\110\uffed\111\uffed\112\uffed\130\uffed\135\uffed" +
    "\001\002\000\044\002\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\047\ufffe\061\ufffe\062\ufffe\063\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\110\ufffe\111\ufffe\112\ufffe\130\ufffe\135\ufffe\001" +
    "\002\000\044\002\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\047\uffee\061\uffee\062\uffee\063\uffee\105\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\130\uffee\135\uffee\001\002" +
    "\000\004\002\001\001\002\000\004\023\u021d\001\002\000" +
    "\044\002\uffef\040\uffef\041\uffef\042\uffef\043\uffef\047\uffef" +
    "\061\uffef\062\uffef\063\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\111\uffef\112\uffef\130\uffef\135\uffef\001\002\000\006" +
    "\011\u0220\023\u021f\001\002\000\154\002\uffdd\004\uffdd\020" +
    "\uffdd\024\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072" +
    "\uffdd\073\uffdd\074\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd" +
    "\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111" +
    "\uffdd\112\uffdd\113\uffdd\116\uffdd\127\uffdd\130\uffdd\131\uffdd" +
    "\132\uffdd\133\uffdd\134\uffdd\135\uffdd\136\uffdd\001\002\000" +
    "\006\130\u0221\133\u0222\001\002\000\004\037\u0224\001\002" +
    "\000\004\023\u0223\001\002\000\154\002\uffde\004\uffde\020" +
    "\uffde\024\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072" +
    "\uffde\073\uffde\074\uffde\077\uffde\100\uffde\101\uffde\102\uffde" +
    "\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111" +
    "\uffde\112\uffde\113\uffde\116\uffde\127\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\134\uffde\135\uffde\136\uffde\001\002\000" +
    "\004\123\u0225\001\002\000\004\024\u0226\001\002\000\004" +
    "\025\u0227\001\002\000\004\023\u0228\001\002\000\154\002" +
    "\uffdc\004\uffdc\020\uffdc\024\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc\067\uffdc\070" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107" +
    "\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\116\uffdc\127\uffdc" +
    "\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc\136" +
    "\uffdc\001\002\000\044\004\074\017\u022a\024\063\032\203" +
    "\044\076\045\072\066\103\067\071\070\102\072\067\073" +
    "\104\074\075\130\065\131\066\132\105\133\070\134\077" +
    "\001\002\000\044\004\074\017\244\024\063\032\203\044" +
    "\076\045\072\066\103\067\071\070\102\072\067\073\104" +
    "\074\075\130\065\131\066\132\105\133\070\134\077\001" +
    "\002\000\050\002\uffc8\015\206\016\207\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\047\uffc8\061\uffc8\062\uffc8\063\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\130\uffc8" +
    "\135\uffc8\001\002\000\006\020\u022d\026\247\001\002\000" +
    "\044\002\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\105\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\130\uffc7\135\uffc7\001\002\000\010" +
    "\011\374\023\373\024\u022f\001\002\000\016\025\u0230\040" +
    "\030\041\006\042\015\043\016\130\255\001\002\000\004" +
    "\017\u0236\001\002\000\006\025\u0232\026\261\001\002\000" +
    "\004\017\u0233\001\002\000\056\040\030\041\006\042\015" +
    "\043\016\050\337\051\264\052\277\053\330\054\302\057" +
    "\303\060\310\064\274\071\332\077\320\100\315\101\270" +
    "\102\305\103\272\104\307\130\341\135\011\136\265\001" +
    "\002\000\060\020\u0235\040\030\041\006\042\015\043\016" +
    "\050\337\051\264\052\277\053\330\054\302\057\303\060" +
    "\310\064\274\071\332\077\320\100\315\101\270\102\305" +
    "\103\272\104\307\130\341\135\011\136\265\001\002\000" +
    "\044\002\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\112\uffc2\130\uffc2\135\uffc2\001\002\000\056" +
    "\040\030\041\006\042\015\043\016\050\337\051\264\052" +
    "\277\053\330\054\302\057\303\060\310\064\274\071\332" +
    "\077\320\100\315\101\270\102\305\103\272\104\307\130" +
    "\341\135\011\136\265\001\002\000\060\020\u0238\040\030" +
    "\041\006\042\015\043\016\050\337\051\264\052\277\053" +
    "\330\054\302\057\303\060\310\064\274\071\332\077\320" +
    "\100\315\101\270\102\305\103\272\104\307\130\341\135" +
    "\011\136\265\001\002\000\044\002\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\047\uffc3\061\uffc3\062\uffc3\063\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\130\uffc3" +
    "\135\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0236\000\050\002\013\003\021\010\003\011\016\012" +
    "\034\013\032\014\045\017\033\024\007\025\011\026\041" +
    "\027\025\030\022\031\042\032\040\045\043\055\044\106" +
    "\036\107\012\001\001\000\002\001\001\000\006\072\057" +
    "\076\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\010\u0218\011\016\012\034\013\032\014\045\017" +
    "\033\024\007\025\011\026\041\027\025\030\022\031\042" +
    "\032\040\045\043\055\044\106\036\107\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\110\051\112" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\u0187\001\001\000\002" +
    "\001\001\000\012\072\057\076\055\110\051\112\052\001" +
    "\001\000\002\001\001\000\004\110\u0187\001\001\000\010" +
    "\005\256\015\257\106\255\001\001\000\002\001\001\000" +
    "\004\072\175\001\001\000\014\022\061\065\173\066\105" +
    "\073\077\074\063\001\001\000\002\001\001\000\014\022" +
    "\061\065\072\066\105\073\077\074\063\001\001\000\002" +
    "\001\001\000\020\022\061\065\201\066\105\067\200\070" +
    "\231\073\077\074\063\001\001\000\002\001\001\000\006" +
    "\072\057\076\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\061\065\123\066\105\073" +
    "\077\074\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\061\065\137\066\105\073\077\074\063\001\001\000\014" +
    "\022\061\065\136\066\105\073\077\074\063\001\001\000" +
    "\014\022\061\065\135\066\105\073\077\074\063\001\001" +
    "\000\014\022\061\065\134\066\105\073\077\074\063\001" +
    "\001\000\014\022\061\065\133\066\105\073\077\074\063" +
    "\001\001\000\014\022\061\065\132\066\105\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\022\061\065\201\066\105\067\200" +
    "\070\204\071\177\073\077\074\063\075\203\001\001\000" +
    "\004\072\175\001\001\000\014\022\061\065\173\066\105" +
    "\073\077\074\063\001\001\000\004\105\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\061\065\201\066\105\067\200\070\214\073" +
    "\077\074\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\061\065\201\066\105\067\200\070\210\073" +
    "\077\074\063\001\001\000\020\022\061\065\201\066\105" +
    "\067\200\070\207\073\077\074\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\061\065\201\066\105" +
    "\067\200\070\204\071\213\073\077\074\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\061\065\201\066\105\067\230\073\077\074\063\001" +
    "\001\000\016\022\061\065\201\066\105\067\227\073\077" +
    "\074\063\001\001\000\016\022\061\065\201\066\105\067" +
    "\226\073\077\074\063\001\001\000\016\022\061\065\201" +
    "\066\105\067\225\073\077\074\063\001\001\000\016\022" +
    "\061\065\201\066\105\067\224\073\077\074\063\001\001" +
    "\000\016\022\061\065\201\066\105\067\223\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\061\065\201\066\105\067" +
    "\237\073\077\074\063\001\001\000\026\022\061\065\201" +
    "\066\105\067\200\070\204\071\242\073\077\074\063\102" +
    "\241\103\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\022\061\065" +
    "\201\066\105\067\200\070\204\071\242\073\077\074\063" +
    "\102\245\103\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\061\065\201\066\105\067\200\070\204" +
    "\071\242\073\077\074\063\103\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u0184\106\255" +
    "\001\001\000\002\001\001\000\076\004\337\011\324\012" +
    "\323\016\272\021\333\022\330\023\266\024\312\025\011" +
    "\026\274\030\310\031\277\032\311\033\326\034\320\035" +
    "\321\036\322\037\303\040\275\041\305\042\315\044\265" +
    "\046\300\047\334\050\332\051\335\052\325\054\313\100" +
    "\270\106\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\061\065\201\066\105\067\200\070\u0171\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\011\324\012\323\016\u010d\021\333\022\330\023" +
    "\266\024\312\025\011\026\274\030\310\031\277\032\311" +
    "\033\326\034\320\035\321\036\322\037\303\040\275\041" +
    "\305\042\315\044\265\046\300\047\334\050\332\051\335" +
    "\052\325\054\313\100\270\106\316\001\001\000\006\072" +
    "\057\076\341\001\001\000\004\072\175\001\001\000\004" +
    "\105\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\061\065\201\066\105\067\200" +
    "\070\352\073\077\074\063\001\001\000\002\001\001\000" +
    "\026\022\061\065\201\066\105\067\200\070\204\071\242" +
    "\073\077\074\063\102\356\103\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\061\065\201\066\105\067" +
    "\375\073\077\074\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\061\065\201\066\105\067\200\070\u0108\073\077" +
    "\074\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\061\065\201\066\105\067\200\070\u010b\073\077" +
    "\074\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\061\065\201" +
    "\066\105\067\200\070\u0110\073\077\074\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\004\u0113\011\324" +
    "\012\323\016\272\021\333\022\330\023\266\024\312\025" +
    "\011\026\274\030\310\031\277\032\311\033\326\034\320" +
    "\035\321\036\322\037\303\040\275\041\305\042\315\044" +
    "\265\046\300\047\334\050\332\051\335\052\325\054\313" +
    "\100\270\106\316\001\001\000\074\011\324\012\323\016" +
    "\u010d\021\333\022\330\023\266\024\312\025\011\026\274" +
    "\030\310\031\277\032\311\033\326\034\320\035\321\036" +
    "\322\037\303\040\275\041\305\042\315\044\265\046\300" +
    "\047\334\050\332\051\335\052\325\054\313\100\270\106" +
    "\316\001\001\000\006\077\u0117\104\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\004\u011a\011\324\012\323\016\272\021\333" +
    "\022\330\023\266\024\312\025\011\026\274\030\310\031" +
    "\277\032\311\033\326\034\320\035\321\036\322\037\303" +
    "\040\275\041\305\042\315\044\265\046\300\047\334\050" +
    "\332\051\335\052\325\054\313\100\270\106\316\001\001" +
    "\000\074\011\324\012\323\016\u010d\021\333\022\330\023" +
    "\266\024\312\025\011\026\274\030\310\031\277\032\311" +
    "\033\326\034\320\035\321\036\322\037\303\040\275\041" +
    "\305\042\315\044\265\046\300\047\334\050\332\051\335" +
    "\052\325\054\313\100\270\106\316\001\001\000\002\001" +
    "\001\000\020\022\061\065\201\066\105\067\200\070\u011d" +
    "\073\077\074\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\004\u0120\011\324\012\323\016\272\021\333" +
    "\022\330\023\266\024\312\025\011\026\274\030\310\031" +
    "\277\032\311\033\326\034\320\035\321\036\322\037\303" +
    "\040\275\041\305\042\315\044\265\046\300\047\334\050" +
    "\332\051\335\052\325\054\313\100\270\106\316\001\001" +
    "\000\074\011\324\012\323\016\u010d\021\333\022\330\023" +
    "\266\024\312\025\011\026\274\030\310\031\277\032\311" +
    "\033\326\034\320\035\321\036\322\037\303\040\275\041" +
    "\305\042\315\044\265\046\300\047\334\050\332\051\335" +
    "\052\325\054\313\100\270\106\316\001\001\000\006\077" +
    "\u0122\104\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\004\u012b\011\324\012\323\016\272\021\333\022\330\023" +
    "\266\024\312\025\011\026\274\030\310\031\277\032\311" +
    "\033\326\034\320\035\321\036\322\037\303\040\275\041" +
    "\305\042\315\044\265\046\300\047\334\050\332\051\335" +
    "\052\325\054\313\100\270\106\316\001\001\000\074\011" +
    "\324\012\323\016\u010d\021\333\022\330\023\266\024\312" +
    "\025\011\026\274\030\310\031\277\032\311\033\326\034" +
    "\320\035\321\036\322\037\303\040\275\041\305\042\315" +
    "\044\265\046\300\047\334\050\332\051\335\052\325\054" +
    "\313\100\270\106\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\061\065\201\066\105\067\200\070" +
    "\u012f\073\077\074\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\061\065\201\066\105\067\200\070\204" +
    "\071\177\073\077\074\063\075\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\072\057\076\055\110\051\112" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\022\061" +
    "\065\201\066\105\067\200\070\204\071\177\073\077\074" +
    "\063\075\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\061\065\201\066\105\067\200" +
    "\070\u0151\073\077\074\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\101\u0157\111\u0155\001\001\000\004" +
    "\066\u015c\001\001\000\004\101\u015b\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\004\u0159\011\324\012\323" +
    "\016\272\021\333\022\330\023\266\024\312\025\011\026" +
    "\274\030\310\031\277\032\311\033\326\034\320\035\321" +
    "\036\322\037\303\040\275\041\305\042\315\044\265\046" +
    "\300\047\334\050\332\051\335\052\325\054\313\100\270" +
    "\106\316\001\001\000\074\011\324\012\323\016\u010d\021" +
    "\333\022\330\023\266\024\312\025\011\026\274\030\310" +
    "\031\277\032\311\033\326\034\320\035\321\036\322\037" +
    "\303\040\275\041\305\042\315\044\265\046\300\047\334" +
    "\050\332\051\335\052\325\054\313\100\270\106\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\004\u015f\011\324\012\323\016" +
    "\272\021\333\022\330\023\266\024\312\025\011\026\274" +
    "\030\310\031\277\032\311\033\326\034\320\035\321\036" +
    "\322\037\303\040\275\041\305\042\315\044\265\046\300" +
    "\047\334\050\332\051\335\052\325\054\313\100\270\106" +
    "\316\001\001\000\074\011\324\012\323\016\u010d\021\333" +
    "\022\330\023\266\024\312\025\011\026\274\030\310\031" +
    "\277\032\311\033\326\034\320\035\321\036\322\037\303" +
    "\040\275\041\305\042\315\044\265\046\300\047\334\050" +
    "\332\051\335\052\325\054\313\100\270\106\316\001\001" +
    "\000\006\011\u0161\106\u0162\001\001\000\016\022\061\065" +
    "\201\066\105\067\u0165\073\077\074\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\061\065\072\066" +
    "\105\073\077\074\063\001\001\000\002\001\001\000\004" +
    "\043\u0168\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\004\u016b\011\324\012\323\016\272" +
    "\021\333\022\330\023\266\024\312\025\011\026\274\030" +
    "\310\031\277\032\311\033\326\034\320\035\321\036\322" +
    "\037\303\040\275\041\305\042\315\044\265\046\300\047" +
    "\334\050\332\051\335\052\325\054\313\100\270\106\316" +
    "\001\001\000\074\011\324\012\323\016\u010d\021\333\022" +
    "\330\023\266\024\312\025\011\026\274\030\310\031\277" +
    "\032\311\033\326\034\320\035\321\036\322\037\303\040" +
    "\275\041\305\042\315\044\265\046\300\047\334\050\332" +
    "\051\335\052\325\054\313\100\270\106\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\061\065\201\066\105\067\200\070\u0170\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\061\065\201" +
    "\066\105\067\200\070\u017f\073\077\074\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\004\u0182\011\324" +
    "\012\323\016\272\021\333\022\330\023\266\024\312\025" +
    "\011\026\274\030\310\031\277\032\311\033\326\034\320" +
    "\035\321\036\322\037\303\040\275\041\305\042\315\044" +
    "\265\046\300\047\334\050\332\051\335\052\325\054\313" +
    "\100\270\106\316\001\001\000\074\011\324\012\323\016" +
    "\u010d\021\333\022\330\023\266\024\312\025\011\026\274" +
    "\030\310\031\277\032\311\033\326\034\320\035\321\036" +
    "\322\037\303\040\275\041\305\042\315\044\265\046\300" +
    "\047\334\050\332\051\335\052\325\054\313\100\270\106" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\110\051\112\u0186\001\001\000\004\110\u0187\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\004\u018a\011\324" +
    "\012\323\016\272\021\333\022\330\023\266\024\312\025" +
    "\011\026\274\030\310\031\277\032\311\033\326\034\320" +
    "\035\321\036\322\037\303\040\275\041\305\042\315\044" +
    "\265\046\300\047\334\050\332\051\335\052\325\054\313" +
    "\100\270\106\316\001\001\000\074\011\324\012\323\016" +
    "\u010d\021\333\022\330\023\266\024\312\025\011\026\274" +
    "\030\310\031\277\032\311\033\326\034\320\035\321\036" +
    "\322\037\303\040\275\041\305\042\315\044\265\046\300" +
    "\047\334\050\332\051\335\052\325\054\313\100\270\106" +
    "\316\001\001\000\002\001\001\000\016\022\061\065\201" +
    "\066\105\067\u018e\073\077\074\063\001\001\000\026\022" +
    "\061\065\201\066\105\067\200\070\204\071\242\073\077" +
    "\074\063\102\u0190\103\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u0196\015\257\106" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\004\u0199\011\324\012\323\016\272\021" +
    "\333\022\330\023\266\024\312\025\011\026\274\030\310" +
    "\031\277\032\311\033\326\034\320\035\321\036\322\037" +
    "\303\040\275\041\305\042\315\044\265\046\300\047\334" +
    "\050\332\051\335\052\325\054\313\100\270\106\316\001" +
    "\001\000\074\011\324\012\323\016\u010d\021\333\022\330" +
    "\023\266\024\312\025\011\026\274\030\310\031\277\032" +
    "\311\033\326\034\320\035\321\036\322\037\303\040\275" +
    "\041\305\042\315\044\265\046\300\047\334\050\332\051" +
    "\335\052\325\054\313\100\270\106\316\001\001\000\002" +
    "\001\001\000\076\004\u019c\011\324\012\323\016\272\021" +
    "\333\022\330\023\266\024\312\025\011\026\274\030\310" +
    "\031\277\032\311\033\326\034\320\035\321\036\322\037" +
    "\303\040\275\041\305\042\315\044\265\046\300\047\334" +
    "\050\332\051\335\052\325\054\313\100\270\106\316\001" +
    "\001\000\074\011\324\012\323\016\u010d\021\333\022\330" +
    "\023\266\024\312\025\011\026\274\030\310\031\277\032" +
    "\311\033\326\034\320\035\321\036\322\037\303\040\275" +
    "\041\305\042\315\044\265\046\300\047\334\050\332\051" +
    "\335\052\325\054\313\100\270\106\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u01a3\015\257\106\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\004" +
    "\u01a6\011\324\012\323\016\272\021\333\022\330\023\266" +
    "\024\312\025\011\026\274\030\310\031\277\032\311\033" +
    "\326\034\320\035\321\036\322\037\303\040\275\041\305" +
    "\042\315\044\265\046\300\047\334\050\332\051\335\052" +
    "\325\054\313\100\270\106\316\001\001\000\074\011\324" +
    "\012\323\016\u010d\021\333\022\330\023\266\024\312\025" +
    "\011\026\274\030\310\031\277\032\311\033\326\034\320" +
    "\035\321\036\322\037\303\040\275\041\305\042\315\044" +
    "\265\046\300\047\334\050\332\051\335\052\325\054\313" +
    "\100\270\106\316\001\001\000\002\001\001\000\076\004" +
    "\u01a9\011\324\012\323\016\272\021\333\022\330\023\266" +
    "\024\312\025\011\026\274\030\310\031\277\032\311\033" +
    "\326\034\320\035\321\036\322\037\303\040\275\041\305" +
    "\042\315\044\265\046\300\047\334\050\332\051\335\052" +
    "\325\054\313\100\270\106\316\001\001\000\074\011\324" +
    "\012\323\016\u010d\021\333\022\330\023\266\024\312\025" +
    "\011\026\274\030\310\031\277\032\311\033\326\034\320" +
    "\035\321\036\322\037\303\040\275\041\305\042\315\044" +
    "\265\046\300\047\334\050\332\051\335\052\325\054\313" +
    "\100\270\106\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\112\007\u01bc" +
    "\011\u01c7\012\u01c5\021\u01cf\022\u01cc\023\u01b0\024\u01c0\025" +
    "\011\026\u01b5\030\u01bb\031\u01b7\032\u01be\033\u01cb\034\u01c3" +
    "\035\u01c4\036\u01c6\037\u01b9\040\u01b4\041\u01ba\042\u01c2\044" +
    "\u01af\046\u01b6\047\u01d1\050\u01ce\051\u01d2\052\u01ca\053\u01c9" +
    "\056\u01b3\057\u01bf\060\u01cd\061\u01d3\062\u01b2\063\u01bd\064" +
    "\u01c1\100\u01b1\106\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\011\u01c7\012\u01c5" +
    "\021\u01cf\022\u01cc\023\u01b0\024\u01c0\025\011\026\u01b5\030" +
    "\u01bb\031\u01b7\032\u01be\033\u01cb\034\u01c3\035\u01c4\036\u01c6" +
    "\037\u01b9\040\u01b4\041\u01ba\042\u01c2\044\u01af\046\u01b6\047" +
    "\u01d1\050\u01ce\051\u01d2\052\u01ca\053\u01fa\056\u01b3\057\u01bf" +
    "\060\u01cd\061\u01d3\062\u01b2\063\u01bd\064\u01c1\100\u01b1\106" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\072\057\076\341\001\001\000" +
    "\004\105\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\061\065" +
    "\u01db\066\105\073\077\074\063\001\001\000\002\001\001" +
    "\000\014\022\061\065\u01dd\066\105\073\077\074\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\061\065\u01e8\066\105\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\061\065\u01ec\066\105\073\077\074" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\061" +
    "\065\u01f5\066\105\073\077\074\063\001\001\000\002\001" +
    "\001\000\014\022\061\065\u01f7\066\105\073\077\074\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\061\065\201\066\105\067" +
    "\200\070\204\071\177\073\077\074\063\075\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\112\007\u0207\011\u01c7\012\u01c5\021\u01cf\022" +
    "\u01cc\023\u01b0\024\u01c0\025\011\026\u01b5\030\u01bb\031\u01b7" +
    "\032\u01be\033\u01cb\034\u01c3\035\u01c4\036\u01c6\037\u01b9\040" +
    "\u01b4\041\u01ba\042\u01c2\044\u01af\046\u01b6\047\u01d1\050\u01ce" +
    "\051\u01d2\052\u01ca\053\u01c9\056\u01b3\057\u01bf\060\u01cd\061" +
    "\u01d3\062\u01b2\063\u01bd\064\u01c1\100\u01b1\106\316\001\001" +
    "\000\110\011\u01c7\012\u01c5\021\u01cf\022\u01cc\023\u01b0\024" +
    "\u01c0\025\011\026\u01b5\030\u01bb\031\u01b7\032\u01be\033\u01cb" +
    "\034\u01c3\035\u01c4\036\u01c6\037\u01b9\040\u01b4\041\u01ba\042" +
    "\u01c2\044\u01af\046\u01b6\047\u01d1\050\u01ce\051\u01d2\052\u01ca" +
    "\053\u01fa\056\u01b3\057\u01bf\060\u01cd\061\u01d3\062\u01b2\063" +
    "\u01bd\064\u01c1\100\u01b1\106\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u020b\020\u020e\106\u020d\001" +
    "\001\000\006\020\u0216\106\u020d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\072\057\076" +
    "\u0211\001\001\000\002\001\001\000\004\072\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\061\065\201\066\105\067\200\070\u022a\073\077\074\063" +
    "\001\001\000\026\022\061\065\201\066\105\067\200\070" +
    "\204\071\242\073\077\074\063\102\u022b\103\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u0230\015\257\106\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\004\u0233\011\324\012\323\016\272\021\333\022\330" +
    "\023\266\024\312\025\011\026\274\030\310\031\277\032" +
    "\311\033\326\034\320\035\321\036\322\037\303\040\275" +
    "\041\305\042\315\044\265\046\300\047\334\050\332\051" +
    "\335\052\325\054\313\100\270\106\316\001\001\000\074" +
    "\011\324\012\323\016\u010d\021\333\022\330\023\266\024" +
    "\312\025\011\026\274\030\310\031\277\032\311\033\326" +
    "\034\320\035\321\036\322\037\303\040\275\041\305\042" +
    "\315\044\265\046\300\047\334\050\332\051\335\052\325" +
    "\054\313\100\270\106\316\001\001\000\002\001\001\000" +
    "\076\004\u0236\011\324\012\323\016\272\021\333\022\330" +
    "\023\266\024\312\025\011\026\274\030\310\031\277\032" +
    "\311\033\326\034\320\035\321\036\322\037\303\040\275" +
    "\041\305\042\315\044\265\046\300\047\334\050\332\051" +
    "\335\052\325\054\313\100\270\106\316\001\001\000\074" +
    "\011\324\012\323\016\u010d\021\333\022\330\023\266\024" +
    "\312\025\011\026\274\030\310\031\277\032\311\033\326" +
    "\034\320\035\321\036\322\037\303\040\275\041\305\042" +
    "\315\044\265\046\300\047\334\050\332\051\335\052\325" +
    "\054\313\100\270\106\316\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<>();
    
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

   ////////////////////////////
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.left+1)+ " Columna "+(s.right+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 AST= a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              String RESULT =null;
		 AST = new LinkedList<Instruccion>();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int Lista1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int Lista1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> Lista1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	Lista1.add(instru);
				RESULT = Lista1;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CONSTANTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPORTAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DECLARACION_COMPONENTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_COMPONENTE ::= TIPO_COMPONENTE Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Componente(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_COMPONENTE",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPORTAR ::= Timportar Tcadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Importar(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUSION ::= Tfusion Tid Tllave_a DECLARACIONES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Struct(a,b,aleft,bleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUSION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= DECLARACIONES DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_STRUCT ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_STRUCT ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_STRUCT ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION_FUSION ::= Tid Tpunto LISTA_ACCESOS_FUSION Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Fusion(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION_FUSION ::= Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Asignacion_Fusion(id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_FUSION ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_FUSION ::= Tid Tid Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion valor = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Fusion(tipo,id,valor,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_FUSION ::= Tid Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Declaracion_Fusion(tipo,id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_ACCESOS_FUSION ::= LISTA_ACCESOS_FUSION Tpunto Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_ACCESOS_FUSION ::= Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(a); RESULT = lista; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= TIPODATO Tid Tigual OPERACION_NUMERICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Trstring Tid Tigual Tcadena Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(Tipo.String,Tipo.String,a,new Asignacion(a,new Operacion(b,TipoOperacion.RSTRING,bleft,bright),aleft,aleft), aleft,  aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Trstring Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(Tipo.String,Tipo.String,a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Trstring Tid Tigual Tid Tpunto Tgettexto Tpar_a Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		 RESULT = new Declaracion(Tipo.String,Tipo.String,a,new Asignacion(a,new Operacion(b,TipoOperacion.GETTEXTO,bleft,bright),aleft,aleft), aleft,  aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPODATO ::= Tent 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Entero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPODATO ::= Tdec 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Decimal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPODATO ::= Tchr 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Char; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPODATO ::= Tbul 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_COMPONENTE ::= Tlbl 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.LABEL; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_COMPONENTE ::= Trtxt 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.TEXTBOX; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_COMPONENTE ::= Trtxta 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.TEXTAREA; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_COMPONENTE ::= Trtxtp 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.TEXTPASSWORD; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_COMPONENTE ::= Trtxtn 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.TEXTNUMERO; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_COMPONENTE ::= Trbton 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.BUTTON; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_COMPONENTE",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REFERENCIA ::= Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // REFERENCIA ::= TIPODATO Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(a,origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= Tid Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION_ARREGLO ::= Tid Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Asignacion_Arreglo(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION_ARREGLO ::= Tid DIMENSIONES Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Arreglo(a,b,c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAVES ::= LLAVES Tcoma LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Object> lst = a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAVES ::= LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Object> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAVE ::= Tllave_a LLAVES Tllave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAVE ::= VALOR_PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONSTANTE ::= Tdefinir Tid OPERACION_LOGICA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Definir(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSTANTE ::= Tdefinir Tid Tllave_a LLAVES Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_COMPONENTE ::= Tnuevogui Tpar_a Tid Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Asignacion_Componente(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= TIPODATO Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= TIPODATO Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= Tid Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= Tid Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,e,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Integer> a = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(1); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DIMENSIONES_VACIAS ::= DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		ArrayList<Integer> lst = new ArrayList<>(); lst.add(1); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIMENSION_VACIA ::= Tcorchete_a Tcorchete_c 
            {
              Integer RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION_VACIA",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO ::= Tzro Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,b,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO ::= Tzro Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODO ::= Tzro Tiniciarventana Tpar_a Tpar_c Tllave_a CONTENIDO_GUI Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Iniciar_Ventana(a,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= Tzro Tid Tdospuntos Taldarclick Tpar_a Tpar_c Tllave_a CONTENIDO_GUI Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_GUI ::= CONTENIDO_GUI SENTENCIAS_GUI 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_GUI",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_GUI ::= SENTENCIAS_GUI 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_GUI",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS_GUI ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS_GUI ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS_GUI ::= RETORNAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIAS_GUI ::= LLAMADA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIAS_GUI ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAS_GUI ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAS_GUI ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIAS_GUI ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIAS_GUI ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIAS_GUI ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIAS_GUI ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo_IF a = (Tipo_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIAS_GUI ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIAS_GUI ::= SEGUIR 
            {
              Instruccion RESULT =null;
		 RESULT = new Siguiente(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIAS_GUI ::= BREAK 
            {
              Instruccion RESULT =null;
		RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIAS_GUI ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIAS_GUI ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIAS_GUI ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIAS_GUI ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIAS_GUI ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIAS_GUI ::= CONCAT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIAS_GUI ::= WRITE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIAS_GUI ::= APEND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIAS_GUI ::= WF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIAS_GUI ::= CLOSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIAS_GUI ::= READ 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIAS_GUI ::= ASIGNACION_COMPONENTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIAS_GUI ::= DESPLEGAR_MENSAJE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIAS_GUI ::= ALTO_ANCHO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIAS_GUI ::= SETTEXTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIAS_GUI ::= SETANCHO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIAS_GUI ::= SETALTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIAS_GUI ::= SETPOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GUI",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ALTO_ANCHO ::= Taltoyancho Tpar_a OPERACION_NUMERICA Tcoma OPERACION_NUMERICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Set_Dimensiones_Frame(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALTO_ANCHO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SETTEXTO ::= Tid Tpunto Tsettexto Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Set_Texto(a,new Operacion(b,TipoOperacion.RSTRING,bleft,bright),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SETTEXTO",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SETTEXTO ::= Tid Tpunto Tsettexto Tpar_a Tid Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Set_Texto(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SETTEXTO",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SETANCHO ::= Tid Tpunto Tsetancho Tpar_a OPERACION_NUMERICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Set_Ancho(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SETANCHO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SETALTO ::= Tid Tpunto Tsetalto Tpar_a OPERACION_NUMERICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Set_Alto(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SETALTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SETPOS ::= Tid Tpunto Tsetpos Tpar_a OPERACION_NUMERICA Tcoma OPERACION_NUMERICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Set_Pos(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SETPOS",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DESPLEGAR_MENSAJE ::= Trmensage Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Desplegar_Mensaje(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DESPLEGAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DESPLEGAR_MENSAJE ::= Trmensage Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Desplegar_Mensaje(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DESPLEGAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMETROS ::= PARAMETROS Tcoma PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMETRO ::= TIPODATO Tid 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMETRO ::= Tid Tid 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETRO ::= TIPODATO Tid DIMENSIONES_VACIAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Arreglo(a,b,c,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO ::= CONTENIDO SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= RETORNAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= LLAMADA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo_IF a = (Tipo_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA ::= SEGUIR 
            {
              Instruccion RESULT =null;
		 RESULT = new Siguiente(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA ::= BREAK 
            {
              Instruccion RESULT =null;
		RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA ::= CONCAT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA ::= WRITE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA ::= APEND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA ::= WF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA ::= CLOSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA ::= READ 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA ::= LLAMAR_VENTANA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LLAMAR_VENTANA ::= Tabrirventana Tpar_a Tid Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Abrir_Ventana(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR_VENTANA",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // WRITE ::= Twrite Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Write(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // APEND ::= Tapend Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Apend(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("APEND",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // WF ::= Twf Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new WriteFile(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WF",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // WF ::= Twf Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new WriteFile(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WF",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CLOSE ::= Tclose Tpar_a Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new Close(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLOSE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // READ ::= Tread Tpar_a Tcadena Tcoma Tid Tpar_c Tpycoma CLOSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new Read(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONCAT ::= Tconc Tpar_a Tid Tcoma Tid Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Conc(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCAT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INCREMENTO ::= Tid Tincremento Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Operador(a, Tipo.INCREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECREMENTO ::= Tid Tdecremento Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Operador(a, Tipo.DECREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECREMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_IF ::= Tif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              Tipo_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Tipo_IF(a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ELSE_IF ::= Telseif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 c.add( new Sentencia_IF(a,b,aleft,aright)); RESULT=c;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ELSE_IF ::= ELSE 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia_IF a = (Sentencia_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Sentencia_IF> lst =  new LinkedList<>(); lst.add(a);  RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ELSE ::= Telse Tllave_a CONTENIDO Tllave_c 
            {
              Sentencia_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Sentencia_IF(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ELSE ::= 
            {
              Sentencia_IF RESULT =null;
		 RESULT= new Sentencia_IF(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // WHILE ::= Twhile Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SEGUIR ::= Tsiga Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUIR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BREAK ::= Tromper Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DO_WHILE ::= Trepeat Tllave_a CONTENIDO Tllave_c Twhen Tpar_a OPERACION_LOGICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DoWhile(b,a ,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FOR ::= Tfor Tpar_a DECLARACION OPERACION_RELACIONAL Tpycoma TIPO_OPERADOR Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(a,b,c,d,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO_OPERADOR ::= Tid Tigual OPERACION_LOGICA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO_OPERADOR ::= Tid Tincremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,TipoOperacion.MASMAS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO_OPERADOR ::= Tid Tdecremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,TipoOperacion.MENOSMENOS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SWITCH ::= Tswitch Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CASOS Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Sentencia_Switch(a,b,aleft,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CASOS ::= CASOS CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CASOS ::= CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Case> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CASO ::= Tcase VALOR Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CASO ::= Tdefault Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // RETORNAR ::= Tregresar OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LLAMADA ::= Tid Tpar_a Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LLAMADA ::= Tid Tpar_a VALORES_PARAMETROS Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ACCESO_ARREGLO ::= Tid DIMENSIONES 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_ARREGLO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ACCESO_STRUCT ::= Tid Tpunto LISTA_ACCESOS_FUSION 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_STRUCT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VALORES_PARAMETROS ::= VALORES_PARAMETROS Tcoma VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VALORES_PARAMETROS ::= VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> b = new LinkedList<>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VALOR_PARAMETRO ::= OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_PARAMETRO",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // IMPRIMIR ::= Timp Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // IMPRIMIR ::= Timp Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ARREGLO ::= ARREGLO_SIMPLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DIMENSIONES ::= DIMENSIONES DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> lst = (LinkedList<Operacion>) a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DIMENSIONES ::= DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Operacion> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // DIMENSION ::= Tcorchete_a OPERACION_NUMERICA Tcorchete_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERACION_LOGICA ::= OPERACION_LOGICA Tor OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.OR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERACION_LOGICA ::= OPERACION_LOGICA Tand OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.AND, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERACION_LOGICA ::= Tnot OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tigualigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tdiferente OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OPERACION_RELACIONAL ::= OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OPERACION_NUMERICA ::= Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmas OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpor OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tdiv OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmod OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpotencia OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPERACION_NUMERICA ::= Tpar_a OPERACION_LOGICA Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OPERACION_NUMERICA ::= LLAMADA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(a,TipoOperacion.FUNCION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OPERACION_NUMERICA ::= Tpesode Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.PESODE, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OPERACION_NUMERICA ::= ACCESO_ARREGLO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPERACION_NUMERICA ::= ACCESO_STRUCT 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPERACION_NUMERICA ::= VALOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPERACION_NUMERICA ::= Tatxt Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.ATXT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPERACION_NUMERICA ::= Teqls Tpar_a Tid Tcoma Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OPERACION_NUMERICA ::= Taent Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.AENT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OPERACION_NUMERICA ::= Tadec Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.ADEC, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OPERACION_NUMERICA ::= Tid Tpunto Tgettexto Tpar_a Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(a, TipoOperacion.GETTEXTO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OPERACION_NUMERICA ::= Tid Tpunto Tgetancho Tpar_a Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(a, TipoOperacion.GETALTO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OPERACION_NUMERICA ::= Tid Tpunto Tgetalto Tpar_a Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(a, TipoOperacion.GETANCHO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // OPERACION_NUMERICA ::= Tid Tpunto Tgetpos Tpar_a Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(a, TipoOperacion.GETPOS, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // VALOR ::= Tid 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // VALOR ::= Tentero 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, TipoOperacion.ENTERO, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // VALOR ::= Tdecimal 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.DECIMAL, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // VALOR ::= Tcaracter 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // VALOR ::= Ttrue 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // VALOR ::= Tcadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CADENA,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // VALOR ::= Tfalse 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // VALOR ::= Tnlo 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(TipoOperacion.NULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
