
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;
import Tipos_Importantes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\045\004\000\002\027\010" +
    "\000\002\006\004\000\002\006\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\030\010\000\002" +
    "\030\014\000\002\031\005\000\002\031\007\000\002\031" +
    "\015\000\002\066\005\000\002\066\003\000\002\010\005" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\026\007\000\002\026\010\000\002\011" +
    "\006\000\002\032\010\000\002\032\007\000\002\063\005" +
    "\000\002\063\003\000\002\064\005\000\002\064\003\000" +
    "\002\012\005\000\002\012\007\000\002\013\012\000\002" +
    "\013\011\000\002\013\011\000\002\013\012\000\002\013" +
    "\013\000\002\013\012\000\002\072\004\000\002\072\003" +
    "\000\002\070\004\000\002\016\012\000\002\016\011\000" +
    "\002\005\005\000\002\005\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\005\000\002\004\004\000\002\004" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\044\011\000\002\041\005\000\002" +
    "\042\005\000\002\061\012\000\002\060\012\000\002\060" +
    "\003\000\002\065\006\000\002\065\002\000\002\033\011" +
    "\000\002\034\004\000\002\035\004\000\002\037\013\000" +
    "\002\040\014\000\002\043\005\000\002\043\004\000\002" +
    "\043\004\000\002\036\011\000\002\071\004\000\002\071" +
    "\003\000\002\062\006\000\002\062\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\006\000\002\054\004\000" +
    "\002\055\005\000\002\056\005\000\002\056\003\000\002" +
    "\052\003\000\002\022\007\000\002\022\011\000\002\023" +
    "\003\000\002\024\006\000\002\024\012\000\002\024\012" +
    "\000\002\024\010\000\002\024\010\000\002\057\004\000" +
    "\002\057\003\000\002\053\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\004\000\002\051\003\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\003\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\046\006" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\006\000\002\046\010\000\002\046\006\000\002" +
    "\046\006\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\030\002\uffff\040\022\041\006\042\016\043" +
    "\015\047\025\061\010\062\024\063\014\130\005\135\011" +
    "\001\002\000\030\002\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\047\ufffd\061\ufffd\062\ufffd\063\ufffd\130\ufffd\135\ufffd" +
    "\001\002\000\012\011\307\021\142\037\303\130\u0188\001" +
    "\002\000\006\021\uffdd\130\uffdd\001\002\000\030\002\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\047\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\130\ufff7\135\ufff7\001\002\000\004\130\u0183" +
    "\001\002\000\004\130\u017e\001\002\000\062\002\uff8a\020" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\071\uff8a" +
    "\077\uff8a\130\uff8a\135\uff8a\001\002\000\004\002\u017d\001" +
    "\002\000\004\133\u017c\001\002\000\006\021\uffdb\130\uffdb" +
    "\001\002\000\006\021\uffdc\130\uffdc\001\002\000\030\002" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\130\ufffc\135\ufffc\001\002\000\030\002" +
    "\000\040\022\041\006\042\016\043\015\047\025\061\010" +
    "\062\024\063\014\130\005\135\011\001\002\000\030\002" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\047\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\130\ufff4\135\ufff4\001\002\000\006\021" +
    "\uffde\130\uffde\001\002\000\030\002\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\047\ufff5\061\ufff5\062\ufff5\063\ufff5\130" +
    "\ufff5\135\ufff5\001\002\000\004\130\u016c\001\002\000\004" +
    "\130\u0161\001\002\000\030\002\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\047\ufffa\061\ufffa\062\ufffa\063\ufffa\130\ufffa" +
    "\135\ufffa\001\002\000\030\002\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\047\ufff8\061\ufff8\062\ufff8\063\ufff8\130\ufff8" +
    "\135\ufff8\001\002\000\030\002\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\047\ufffb\061\ufffb\062\ufffb\063\ufffb\130\ufffb" +
    "\135\ufffb\001\002\000\006\021\040\130\041\001\002\000" +
    "\030\002\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\047\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\130\ufff2\135\ufff2\001\002\000" +
    "\030\002\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\047\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\130\ufff6\135\ufff6\001\002\000" +
    "\030\002\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\047\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\130\ufff3\135\ufff3\001\002\000" +
    "\030\002\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\047\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\130\ufff1\135\ufff1\001\002\000" +
    "\030\002\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\130\ufff9\135\ufff9\001\002\000" +
    "\006\021\040\130\u0156\001\002\000\004\022\210\001\002" +
    "\000\012\011\051\021\047\023\046\024\044\001\002\000" +
    "\014\011\uffc8\021\uffc8\025\uffc8\026\uffc8\130\uffc8\001\002" +
    "\000\006\011\u014f\021\040\001\002\000\016\025\230\040" +
    "\022\041\006\042\016\043\015\130\231\001\002\000\010" +
    "\011\212\021\142\023\211\001\002\000\116\002\uffe2\004" +
    "\uffe2\020\uffe2\024\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\077\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\133\uffe2\134\uffe2\135\uffe2\001\002\000\042\004" +
    "\064\022\210\024\053\044\066\045\062\066\073\067\061" +
    "\070\072\072\057\073\074\074\065\130\055\131\056\132" +
    "\075\133\060\134\067\001\002\000\102\002\uff83\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\020\uff83\021\uff83\022\uff83" +
    "\023\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\033" +
    "\uff83\040\uff83\041\uff83\042\uff83\043\uff83\047\uff83\061\uff83" +
    "\062\uff83\063\uff83\130\uff83\135\uff83\001\002\000\042\004" +
    "\064\006\071\024\053\044\066\045\062\066\073\067\061" +
    "\070\072\072\057\073\074\074\065\130\055\131\056\132" +
    "\075\133\060\134\067\001\002\000\076\002\uff6e\004\uff6e" +
    "\005\uff6e\006\uff6e\007\uff6e\010\uff6e\012\uff6e\013\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\020\uff6e\022\uff6e\023\uff6e\025\uff6e" +
    "\026\uff6e\027\uff6e\030\uff6e\031\uff6e\033\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\047\uff6e\061\uff6e\062\uff6e\063\uff6e" +
    "\130\uff6e\135\uff6e\001\002\000\042\004\064\024\053\032" +
    "\157\044\066\045\062\066\073\067\061\070\072\072\057" +
    "\073\074\074\065\130\055\131\056\132\075\133\060\134" +
    "\067\001\002\000\076\002\uff6b\004\uff6b\005\uff6b\006\uff6b" +
    "\007\uff6b\010\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016" +
    "\uff6b\020\uff6b\022\uff6b\023\uff6b\025\uff6b\026\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\033\uff6b\040\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\047\uff6b\061\uff6b\062\uff6b\063\uff6b\130\uff6b\135\uff6b" +
    "\001\002\000\104\002\uff65\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65" +
    "\020\uff65\021\142\022\uff65\023\uff65\024\140\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\031\uff65\033\uff65\037\143\040\uff65" +
    "\041\uff65\042\uff65\043\uff65\047\uff65\061\uff65\062\uff65\063" +
    "\uff65\130\uff65\135\uff65\001\002\000\100\002\uff63\004\uff63" +
    "\005\uff63\006\uff63\007\uff63\010\uff63\012\uff63\013\uff63\014" +
    "\uff63\015\uff63\016\uff63\020\uff63\022\uff63\023\uff63\025\uff63" +
    "\026\uff63\027\uff63\030\uff63\031\uff63\033\uff63\034\uff63\040" +
    "\uff63\041\uff63\042\uff63\043\uff63\047\uff63\061\uff63\062\uff63" +
    "\063\uff63\130\uff63\135\uff63\001\002\000\004\024\135\001" +
    "\002\000\100\002\uff60\004\uff60\005\uff60\006\uff60\007\uff60" +
    "\010\uff60\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\020" +
    "\uff60\022\uff60\023\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\033\uff60\034\uff60\040\uff60\041\uff60\042\uff60\043" +
    "\uff60\047\uff60\061\uff60\062\uff60\063\uff60\130\uff60\135\uff60" +
    "\001\002\000\100\002\uff5f\004\uff5f\005\uff5f\006\uff5f\007" +
    "\uff5f\010\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f" +
    "\020\uff5f\022\uff5f\023\uff5f\025\uff5f\026\uff5f\027\uff5f\030" +
    "\uff5f\031\uff5f\033\uff5f\034\uff5f\040\uff5f\041\uff5f\042\uff5f" +
    "\043\uff5f\047\uff5f\061\uff5f\062\uff5f\063\uff5f\130\uff5f\135" +
    "\uff5f\001\002\000\004\024\132\001\002\000\020\004\116" +
    "\005\122\006\117\007\115\023\131\027\121\033\120\001" +
    "\002\000\040\004\064\024\053\044\066\045\062\066\073" +
    "\067\061\070\072\072\057\073\074\074\065\130\055\131" +
    "\056\132\075\133\060\134\067\001\002\000\004\024\107" +
    "\001\002\000\100\002\uff5e\004\uff5e\005\uff5e\006\uff5e\007" +
    "\uff5e\010\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e" +
    "\020\uff5e\022\uff5e\023\uff5e\025\uff5e\026\uff5e\027\uff5e\030" +
    "\uff5e\031\uff5e\033\uff5e\034\uff5e\040\uff5e\041\uff5e\042\uff5e" +
    "\043\uff5e\047\uff5e\061\uff5e\062\uff5e\063\uff5e\130\uff5e\135" +
    "\uff5e\001\002\000\100\002\uff62\004\uff62\005\uff62\006\uff62" +
    "\007\uff62\010\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016" +
    "\uff62\020\uff62\022\uff62\023\uff62\025\uff62\026\uff62\027\uff62" +
    "\030\uff62\031\uff62\033\uff62\034\uff62\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\047\uff62\061\uff62\062\uff62\063\uff62\130\uff62" +
    "\135\uff62\001\002\000\076\002\uff6c\004\uff6c\005\uff6c\006" +
    "\uff6c\007\uff6c\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c" +
    "\016\uff6c\020\uff6c\022\uff6c\023\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\033\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\047\uff6c\061\uff6c\062\uff6c\063\uff6c\130\uff6c\135" +
    "\uff6c\001\002\000\004\130\105\001\002\000\004\024\102" +
    "\001\002\000\100\002\uff61\004\uff61\005\uff61\006\uff61\007" +
    "\uff61\010\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61" +
    "\020\uff61\022\uff61\023\uff61\025\uff61\026\uff61\027\uff61\030" +
    "\uff61\031\uff61\033\uff61\034\uff61\040\uff61\041\uff61\042\uff61" +
    "\043\uff61\047\uff61\061\uff61\062\uff61\063\uff61\130\uff61\135" +
    "\uff61\001\002\000\004\024\077\001\002\000\100\002\uff64" +
    "\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\012\uff64\013" +
    "\uff64\014\uff64\015\uff64\016\uff64\020\uff64\022\uff64\023\uff64" +
    "\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\033\uff64\034" +
    "\uff64\040\uff64\041\uff64\042\uff64\043\uff64\047\uff64\061\uff64" +
    "\062\uff64\063\uff64\130\uff64\135\uff64\001\002\000\076\002" +
    "\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\012\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\016\uff6a\020\uff6a\022\uff6a\023" +
    "\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\033\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\047\uff6a\061\uff6a\062" +
    "\uff6a\063\uff6a\130\uff6a\135\uff6a\001\002\000\004\130\100" +
    "\001\002\000\004\025\101\001\002\000\076\002\uff66\004" +
    "\uff66\005\uff66\006\uff66\007\uff66\010\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\016\uff66\020\uff66\022\uff66\023\uff66\025" +
    "\uff66\026\uff66\027\uff66\030\uff66\031\uff66\033\uff66\040\uff66" +
    "\041\uff66\042\uff66\043\uff66\047\uff66\061\uff66\062\uff66\063" +
    "\uff66\130\uff66\135\uff66\001\002\000\004\130\103\001\002" +
    "\000\004\025\104\001\002\000\076\002\uff69\004\uff69\005" +
    "\uff69\006\uff69\007\uff69\010\uff69\012\uff69\013\uff69\014\uff69" +
    "\015\uff69\016\uff69\020\uff69\022\uff69\023\uff69\025\uff69\026" +
    "\uff69\027\uff69\030\uff69\031\uff69\033\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\047\uff69\061\uff69\062\uff69\063\uff69\130" +
    "\uff69\135\uff69\001\002\000\004\023\106\001\002\000\062" +
    "\002\uffd9\020\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\071\uffd9\077\uffd9\130\uffd9\135\uffd9\001\002\000\004" +
    "\130\110\001\002\000\004\026\111\001\002\000\004\130" +
    "\112\001\002\000\004\025\113\001\002\000\076\002\uff68" +
    "\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\012\uff68\013" +
    "\uff68\014\uff68\015\uff68\016\uff68\020\uff68\022\uff68\023\uff68" +
    "\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\033\uff68\040" +
    "\uff68\041\uff68\042\uff68\043\uff68\047\uff68\061\uff68\062\uff68" +
    "\063\uff68\130\uff68\135\uff68\001\002\000\076\002\uff76\004" +
    "\uff76\005\uff76\006\117\007\115\010\uff76\012\uff76\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\020\uff76\022\uff76\023\uff76\025" +
    "\uff76\026\uff76\027\121\030\uff76\031\uff76\033\120\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\047\uff76\061\uff76\062\uff76\063" +
    "\uff76\130\uff76\135\uff76\001\002\000\040\004\064\024\053" +
    "\044\066\045\062\066\073\067\061\070\072\072\057\073" +
    "\074\074\065\130\055\131\056\132\075\133\060\134\067" +
    "\001\002\000\040\004\064\024\053\044\066\045\062\066" +
    "\073\067\061\070\072\072\057\073\074\074\065\130\055" +
    "\131\056\132\075\133\060\134\067\001\002\000\040\004" +
    "\064\024\053\044\066\045\062\066\073\067\061\070\072" +
    "\072\057\073\074\074\065\130\055\131\056\132\075\133" +
    "\060\134\067\001\002\000\040\004\064\024\053\044\066" +
    "\045\062\066\073\067\061\070\072\072\057\073\074\074" +
    "\065\130\055\131\056\132\075\133\060\134\067\001\002" +
    "\000\040\004\064\024\053\044\066\045\062\066\073\067" +
    "\061\070\072\072\057\073\074\074\065\130\055\131\056" +
    "\132\075\133\060\134\067\001\002\000\040\004\064\024" +
    "\053\044\066\045\062\066\073\067\061\070\072\072\057" +
    "\073\074\074\065\130\055\131\056\132\075\133\060\134" +
    "\067\001\002\000\076\002\uff75\004\uff75\005\uff75\006\117" +
    "\007\115\010\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\020\uff75\022\uff75\023\uff75\025\uff75\026\uff75\027\121" +
    "\030\uff75\031\uff75\033\120\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\047\uff75\061\uff75\062\uff75\063\uff75\130\uff75\135\uff75" +
    "\001\002\000\076\002\uff71\004\uff71\005\uff71\006\uff71\007" +
    "\uff71\010\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71" +
    "\020\uff71\022\uff71\023\uff71\025\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\033\120\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\047\uff71\061\uff71\062\uff71\063\uff71\130\uff71\135\uff71\001" +
    "\002\000\076\002\uff70\004\uff70\005\uff70\006\uff70\007\uff70" +
    "\010\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\020" +
    "\uff70\022\uff70\023\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\031\uff70\033\uff70\040\uff70\041\uff70\042\uff70\043\uff70\047" +
    "\uff70\061\uff70\062\uff70\063\uff70\130\uff70\135\uff70\001\002" +
    "\000\076\002\uff73\004\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\020\uff73" +
    "\022\uff73\023\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\033\120\040\uff73\041\uff73\042\uff73\043\uff73\047\uff73" +
    "\061\uff73\062\uff73\063\uff73\130\uff73\135\uff73\001\002\000" +
    "\076\002\uff74\004\uff74\005\uff74\006\117\007\115\010\uff74" +
    "\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\020\uff74\022" +
    "\uff74\023\uff74\025\uff74\026\uff74\027\121\030\uff74\031\uff74" +
    "\033\120\040\uff74\041\uff74\042\uff74\043\uff74\047\uff74\061" +
    "\uff74\062\uff74\063\uff74\130\uff74\135\uff74\001\002\000\076" +
    "\002\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\012" +
    "\uff72\013\uff72\014\uff72\015\uff72\016\uff72\020\uff72\022\uff72" +
    "\023\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\033" +
    "\120\040\uff72\041\uff72\042\uff72\043\uff72\047\uff72\061\uff72" +
    "\062\uff72\063\uff72\130\uff72\135\uff72\001\002\000\116\002" +
    "\uffe1\004\uffe1\020\uffe1\024\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\077\uffe1\130\uffe1" +
    "\131\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\001\002\000" +
    "\004\130\133\001\002\000\004\025\134\001\002\000\076" +
    "\002\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\020\uff6d\022\uff6d" +
    "\023\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\033" +
    "\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\047\uff6d\061\uff6d" +
    "\062\uff6d\063\uff6d\130\uff6d\135\uff6d\001\002\000\004\130" +
    "\136\001\002\000\004\025\137\001\002\000\076\002\uff67" +
    "\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\012\uff67\013" +
    "\uff67\014\uff67\015\uff67\016\uff67\020\uff67\022\uff67\023\uff67" +
    "\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\033\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\047\uff67\061\uff67\062\uff67" +
    "\063\uff67\130\uff67\135\uff67\001\002\000\044\004\064\024" +
    "\053\025\153\032\157\044\066\045\062\066\073\067\061" +
    "\070\072\072\057\073\074\074\065\130\055\131\056\132" +
    "\075\133\060\134\067\001\002\000\100\002\uff91\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\020\uff91\021\142\022\uff91\023\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\033\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\047\uff91\061\uff91\062\uff91" +
    "\063\uff91\130\uff91\135\uff91\001\002\000\040\004\064\024" +
    "\053\044\066\045\062\066\073\067\061\070\072\072\057" +
    "\073\074\074\065\130\055\131\056\132\075\133\060\134" +
    "\067\001\002\000\004\130\145\001\002\000\100\002\uff90" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\020\uff90\022\uff90\023\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\033\uff90\037" +
    "\146\040\uff90\041\uff90\042\uff90\043\uff90\047\uff90\061\uff90" +
    "\062\uff90\063\uff90\130\uff90\135\uff90\001\002\000\102\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\047" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\130\uffe3\135\uffe3\001\002" +
    "\000\004\130\147\001\002\000\102\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\130\uffe4\135\uffe4\001\002\000\020\004\116" +
    "\005\122\006\117\007\115\022\151\027\121\033\120\001" +
    "\002\000\102\002\uff82\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\025\uff82\026\uff82" +
    "\027\uff82\030\uff82\031\uff82\033\uff82\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\047\uff82\061\uff82\062\uff82\063\uff82\130\uff82" +
    "\135\uff82\001\002\000\102\002\uff84\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\020\uff84\021\uff84\022\uff84\023\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\033\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\047\uff84\061\uff84\062\uff84\063" +
    "\uff84\130\uff84\135\uff84\001\002\000\076\002\uff93\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\020\uff93\022\uff93\023\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\047\uff93\061\uff93\062\uff93\063\uff93" +
    "\130\uff93\135\uff93\001\002\000\006\025\uff8e\026\uff8e\001" +
    "\002\000\060\002\uff7e\010\173\012\177\013\175\014\176" +
    "\015\uff7e\016\uff7e\020\uff7e\023\uff7e\025\uff7e\026\uff7e\030" +
    "\172\031\174\040\uff7e\041\uff7e\042\uff7e\043\uff7e\047\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\130\uff7e\135\uff7e\001\002\000" +
    "\074\002\uff77\004\116\005\122\006\117\007\115\010\uff77" +
    "\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\020\uff77\023" +
    "\uff77\025\uff77\026\uff77\027\121\030\uff77\031\uff77\033\120" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\047\uff77\061\uff77\062" +
    "\uff77\063\uff77\130\uff77\135\uff77\001\002\000\042\004\064" +
    "\024\053\032\157\044\066\045\062\066\073\067\061\070" +
    "\072\072\057\073\074\074\065\130\055\131\056\132\075" +
    "\133\060\134\067\001\002\000\006\025\167\026\166\001" +
    "\002\000\014\015\162\016\163\020\uff8d\025\uff8d\026\uff8d" +
    "\001\002\000\042\004\064\024\053\032\157\044\066\045" +
    "\062\066\073\067\061\070\072\072\057\073\074\074\065" +
    "\130\055\131\056\132\075\133\060\134\067\001\002\000" +
    "\042\004\064\024\053\032\157\044\066\045\062\066\073" +
    "\067\061\070\072\072\057\073\074\074\065\130\055\131" +
    "\056\132\075\133\060\134\067\001\002\000\044\002\uff80" +
    "\015\uff80\016\uff80\020\uff80\023\uff80\025\uff80\026\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\047\uff80\061\uff80\062\uff80" +
    "\063\uff80\130\uff80\135\uff80\001\002\000\044\002\uff81\015" +
    "\uff81\016\163\020\uff81\023\uff81\025\uff81\026\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\047\uff81\061\uff81\062\uff81\063" +
    "\uff81\130\uff81\135\uff81\001\002\000\042\004\064\024\053" +
    "\032\157\044\066\045\062\066\073\067\061\070\072\072" +
    "\057\073\074\074\065\130\055\131\056\132\075\133\060" +
    "\134\067\001\002\000\076\002\uff92\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\016\uff92\020\uff92\022\uff92\023\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\033\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\047\uff92\061\uff92\062\uff92\063\uff92\130\uff92\135" +
    "\uff92\001\002\000\006\025\uff8f\026\uff8f\001\002\000\044" +
    "\002\uff7f\015\uff7f\016\uff7f\020\uff7f\023\uff7f\025\uff7f\026" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\047\uff7f\061\uff7f" +
    "\062\uff7f\063\uff7f\130\uff7f\135\uff7f\001\002\000\040\004" +
    "\064\024\053\044\066\045\062\066\073\067\061\070\072" +
    "\072\057\073\074\074\065\130\055\131\056\132\075\133" +
    "\060\134\067\001\002\000\040\004\064\024\053\044\066" +
    "\045\062\066\073\067\061\070\072\072\057\073\074\074" +
    "\065\130\055\131\056\132\075\133\060\134\067\001\002" +
    "\000\040\004\064\024\053\044\066\045\062\066\073\067" +
    "\061\070\072\072\057\073\074\074\065\130\055\131\056" +
    "\132\075\133\060\134\067\001\002\000\040\004\064\024" +
    "\053\044\066\045\062\066\073\067\061\070\072\072\057" +
    "\073\074\074\065\130\055\131\056\132\075\133\060\134" +
    "\067\001\002\000\040\004\064\024\053\044\066\045\062" +
    "\066\073\067\061\070\072\072\057\073\074\074\065\130" +
    "\055\131\056\132\075\133\060\134\067\001\002\000\040" +
    "\004\064\024\053\044\066\045\062\066\073\067\061\070" +
    "\072\072\057\073\074\074\065\130\055\131\056\132\075" +
    "\133\060\134\067\001\002\000\060\002\uff79\010\uff79\012" +
    "\uff79\013\uff79\014\uff79\015\uff79\016\uff79\020\uff79\023\uff79" +
    "\025\uff79\026\uff79\030\uff79\031\uff79\040\uff79\041\uff79\042" +
    "\uff79\043\uff79\047\uff79\061\uff79\062\uff79\063\uff79\130\uff79" +
    "\135\uff79\001\002\000\060\002\uff7d\010\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\020\uff7d\023\uff7d\025\uff7d" +
    "\026\uff7d\030\uff7d\031\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\047\uff7d\061\uff7d\062\uff7d\063\uff7d\130\uff7d\135\uff7d" +
    "\001\002\000\060\002\uff7c\010\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\020\uff7c\023\uff7c\025\uff7c\026\uff7c" +
    "\030\uff7c\031\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\047" +
    "\uff7c\061\uff7c\062\uff7c\063\uff7c\130\uff7c\135\uff7c\001\002" +
    "\000\060\002\uff7a\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\020\uff7a\023\uff7a\025\uff7a\026\uff7a\030\uff7a" +
    "\031\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\047\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\130\uff7a\135\uff7a\001\002\000\060" +
    "\002\uff78\010\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\020\uff78\023\uff78\025\uff78\026\uff78\030\uff78\031\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\047\uff78\061\uff78\062" +
    "\uff78\063\uff78\130\uff78\135\uff78\001\002\000\060\002\uff7b" +
    "\010\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\020" +
    "\uff7b\023\uff7b\025\uff7b\026\uff7b\030\uff7b\031\uff7b\040\uff7b" +
    "\041\uff7b\042\uff7b\043\uff7b\047\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\130\uff7b\135\uff7b\001\002\000\010\015\162\016\163" +
    "\025\207\001\002\000\076\002\uff6f\004\uff6f\005\uff6f\006" +
    "\uff6f\007\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\020\uff6f\022\uff6f\023\uff6f\025\uff6f\026\uff6f\027" +
    "\uff6f\030\uff6f\031\uff6f\033\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\047\uff6f\061\uff6f\062\uff6f\063\uff6f\130\uff6f\135" +
    "\uff6f\001\002\000\014\011\uffc7\021\uffc7\025\uffc7\026\uffc7" +
    "\130\uffc7\001\002\000\062\002\uff89\020\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\071\uff89\077\uff89\130\uff89" +
    "\135\uff89\001\002\000\042\004\064\017\213\024\053\044" +
    "\066\045\062\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\044\004\064\017\220\024\053\032\157\044\066" +
    "\045\062\066\073\067\061\070\072\072\057\073\074\074" +
    "\065\130\055\131\056\132\075\133\060\134\067\001\002" +
    "\000\020\010\173\012\177\013\175\014\176\023\215\030" +
    "\172\031\174\001\002\000\062\002\uff86\020\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\061\uff86\062\uff86\063\uff86\064\uff86\071\uff86\077\uff86\130" +
    "\uff86\135\uff86\001\002\000\006\020\226\026\223\001\002" +
    "\000\006\020\uffd2\026\uffd2\001\002\000\044\004\064\017" +
    "\220\024\053\032\157\044\066\045\062\066\073\067\061" +
    "\070\072\072\057\073\074\074\065\130\055\131\056\132" +
    "\075\133\060\134\067\001\002\000\006\020\uffd4\026\uffd4" +
    "\001\002\000\006\020\224\026\223\001\002\000\044\004" +
    "\064\017\220\024\053\032\157\044\066\045\062\066\073" +
    "\067\061\070\072\072\057\073\074\074\065\130\055\131" +
    "\056\132\075\133\060\134\067\001\002\000\006\020\uffd3" +
    "\026\uffd3\001\002\000\006\020\uffd5\026\uffd5\001\002\000" +
    "\004\023\227\001\002\000\062\002\uff87\020\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\071\uff87\077\uff87\130" +
    "\uff87\135\uff87\001\002\000\004\017\u014c\001\002\000\004" +
    "\130\u014b\001\002\000\004\130\u0148\001\002\000\006\025" +
    "\236\026\235\001\002\000\006\025\uffc3\026\uffc3\001\002" +
    "\000\014\040\022\041\006\042\016\043\015\130\231\001" +
    "\002\000\004\017\237\001\002\000\042\040\022\041\006" +
    "\042\016\043\015\050\277\051\240\052\250\053\273\054" +
    "\252\057\253\060\257\064\245\071\275\077\264\130\301" +
    "\135\011\001\002\000\004\024\u0141\001\002\000\050\020" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\064\uffaa\071\uffaa\077\uffaa\130\uffaa\135\uffaa\001\002" +
    "\000\050\020\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\064\uffb9\071\uffb9\077\uffb9\130\uffb9\135" +
    "\uffb9\001\002\000\050\020\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\064\uffb3\071\uffb3\077\uffb3" +
    "\130\uffb3\135\uffb3\001\002\000\050\020\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\071" +
    "\uffbe\077\uffbe\130\uffbe\135\uffbe\001\002\000\042\004\064" +
    "\024\053\032\157\044\066\045\062\066\073\067\061\070" +
    "\072\072\057\073\074\074\065\130\055\131\056\132\075" +
    "\133\060\134\067\001\002\000\050\020\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8\071" +
    "\uffb8\077\uffb8\130\uffb8\135\uffb8\001\002\000\050\020\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\064\uffab\071\uffab\077\uffab\130\uffab\135\uffab\001\002\000" +
    "\004\024\u012e\001\002\000\050\020\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\064\uffb6\071\uffb6" +
    "\077\uffb6\130\uffb6\135\uffb6\001\002\000\004\024\u011e\001" +
    "\002\000\004\023\u011d\001\002\000\050\020\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\064\uffae" +
    "\071\uffae\077\uffae\130\uffae\135\uffae\001\002\000\050\020" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\064\uffad\071\uffad\077\uffad\130\uffad\135\uffad\001\002" +
    "\000\050\020\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\064\uffb7\071\uffb7\077\uffb7\130\uffb7\135" +
    "\uffb7\001\002\000\004\023\u011c\001\002\000\050\020\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\064\uffb4\071\uffb4\077\uffb4\130\uffb4\135\uffb4\001\002\000" +
    "\050\020\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\064\uffb5\071\uffb5\077\uffb5\130\uffb5\135\uffb5" +
    "\001\002\000\050\020\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\064\uffac\071\uffac\077\uffac\130" +
    "\uffac\135\uffac\001\002\000\004\130\u011b\001\002\000\004" +
    "\024\u0113\001\002\000\050\020\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1\071\uffb1\077" +
    "\uffb1\130\uffb1\135\uffb1\001\002\000\050\020\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064\uffb0" +
    "\071\uffb0\077\uffb0\130\uffb0\135\uffb0\001\002\000\050\020" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\064\uffbc\071\uffbc\077\uffbc\130\uffbc\135\uffbc\001\002" +
    "\000\050\020\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\064\uffaf\071\uffaf\077\uffaf\130\uffaf\135" +
    "\uffaf\001\002\000\050\020\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\064\uffbd\071\uffbd\077\uffbd" +
    "\130\uffbd\135\uffbd\001\002\000\050\020\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\064\uffb2\071" +
    "\uffb2\077\uffb2\130\uffb2\135\uffb2\001\002\000\004\017\u010b" +
    "\001\002\000\004\023\u010a\001\002\000\004\024\u0104\001" +
    "\002\000\050\020\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\064\uffbb\071\uffbb\077\uffbb\130\uffbb" +
    "\135\uffbb\001\002\000\004\024\360\001\002\000\044\020" +
    "\357\040\022\041\006\042\016\043\015\050\277\051\240" +
    "\052\250\053\273\054\252\057\253\060\257\064\245\071" +
    "\275\077\264\130\301\135\011\001\002\000\020\011\307" +
    "\021\142\024\140\035\305\036\306\037\303\130\304\001" +
    "\002\000\006\011\353\021\142\001\002\000\004\130\145" +
    "\001\002\000\006\011\334\023\333\001\002\000\004\023" +
    "\332\001\002\000\004\023\331\001\002\000\050\004\064" +
    "\006\312\017\311\024\053\032\157\044\066\045\062\046" +
    "\310\066\073\067\061\070\072\072\057\073\074\074\065" +
    "\130\055\131\056\132\075\133\060\134\067\001\002\000" +
    "\004\024\322\001\002\000\044\004\064\017\220\024\053" +
    "\032\157\044\066\045\062\066\073\067\061\070\072\072" +
    "\057\073\074\074\065\130\055\131\056\132\075\133\060" +
    "\134\067\001\002\000\004\130\315\001\002\000\010\015" +
    "\162\016\163\023\314\001\002\000\062\002\uffd8\020\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\071\uffd8\077" +
    "\uffd8\130\uffd8\135\uffd8\001\002\000\004\023\316\001\002" +
    "\000\062\002\uffda\020\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\071\uffda\077\uffda\130\uffda\135\uffda\001\002" +
    "\000\006\020\320\026\223\001\002\000\004\023\321\001" +
    "\002\000\062\002\uffd7\020\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\071\uffd7\077\uffd7\130\uffd7\135\uffd7\001" +
    "\002\000\004\045\323\001\002\000\004\024\324\001\002" +
    "\000\004\130\325\001\002\000\004\025\326\001\002\000" +
    "\004\025\327\001\002\000\004\023\330\001\002\000\062" +
    "\002\uffe8\020\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\071\uffe8\077\uffe8\130\uffe8\135\uffe8\001\002\000\050" +
    "\020\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\064\uffa7\071\uffa7\077\uffa7\130\uffa7\135\uffa7\001" +
    "\002\000\050\020\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\064\uffa8\071\uffa8\077\uffa8\130\uffa8" +
    "\135\uffa8\001\002\000\062\002\uffe7\020\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\071\uffe7\077\uffe7\130\uffe7" +
    "\135\uffe7\001\002\000\042\004\064\024\053\044\066\045" +
    "\062\046\335\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\004\024\340\001\002\000\020\010\173\012\177" +
    "\013\175\014\176\023\337\030\172\031\174\001\002\000" +
    "\062\002\uffe6\020\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\071\uffe6\077\uffe6\130\uffe6\135\uffe6\001\002\000" +
    "\004\045\341\001\002\000\004\024\342\001\002\000\004" +
    "\130\343\001\002\000\004\025\344\001\002\000\004\025" +
    "\345\001\002\000\004\023\346\001\002\000\062\002\uffe5" +
    "\020\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\071" +
    "\uffe5\077\uffe5\130\uffe5\135\uffe5\001\002\000\006\011\350" +
    "\037\146\001\002\000\042\004\064\024\053\032\157\044" +
    "\066\045\062\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\010\015\162\016\163\023\352\001\002\000\062" +
    "\002\uffe9\020\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\071\uffe9\077\uffe9\130\uffe9\135\uffe9\001\002\000\042" +
    "\004\064\024\053\032\157\044\066\045\062\066\073\067" +
    "\061\070\072\072\057\073\074\074\065\130\055\131\056" +
    "\132\075\133\060\134\067\001\002\000\010\015\162\016" +
    "\163\023\355\001\002\000\062\002\uffd6\020\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\071\uffd6\077\uffd6\130" +
    "\uffd6\135\uffd6\001\002\000\050\020\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\064\uffbf\071\uffbf" +
    "\077\uffbf\130\uffbf\135\uffbf\001\002\000\030\002\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\047\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\130\uffcf\135\uffcf\001\002\000\042\004\064\024" +
    "\053\032\157\044\066\045\062\066\073\067\061\070\072" +
    "\072\057\073\074\074\065\130\055\131\056\132\075\133" +
    "\060\134\067\001\002\000\010\015\162\016\163\025\362" +
    "\001\002\000\004\017\363\001\002\000\042\040\022\041" +
    "\006\042\016\043\015\050\277\051\240\052\250\053\273" +
    "\054\252\057\253\060\257\064\245\071\275\077\264\130" +
    "\301\135\011\001\002\000\044\020\365\040\022\041\006" +
    "\042\016\043\015\050\277\051\240\052\250\053\273\054" +
    "\252\057\253\060\257\064\245\071\275\077\264\130\301" +
    "\135\011\001\002\000\054\020\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\064\uffa2\071\uffa2\075" +
    "\370\076\366\077\uffa2\130\uffa2\135\uffa2\001\002\000\004" +
    "\024\375\001\002\000\050\020\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\064\uffa4\071\uffa4\077" +
    "\uffa4\130\uffa4\135\uffa4\001\002\000\004\017\372\001\002" +
    "\000\050\020\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\064\uffa6\071\uffa6\077\uffa6\130\uffa6\135" +
    "\uffa6\001\002\000\042\040\022\041\006\042\016\043\015" +
    "\050\277\051\240\052\250\053\273\054\252\057\253\060" +
    "\257\064\245\071\275\077\264\130\301\135\011\001\002" +
    "\000\044\020\374\040\022\041\006\042\016\043\015\050" +
    "\277\051\240\052\250\053\273\054\252\057\253\060\257" +
    "\064\245\071\275\077\264\130\301\135\011\001\002\000" +
    "\050\020\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\064\uffa3\071\uffa3\077\uffa3\130\uffa3\135\uffa3" +
    "\001\002\000\042\004\064\024\053\032\157\044\066\045" +
    "\062\066\073\067\061\070\072\072\057\073\074\074\065" +
    "\130\055\131\056\132\075\133\060\134\067\001\002\000" +
    "\010\015\162\016\163\025\377\001\002\000\004\017\u0100" +
    "\001\002\000\042\040\022\041\006\042\016\043\015\050" +
    "\277\051\240\052\250\053\273\054\252\057\253\060\257" +
    "\064\245\071\275\077\264\130\301\135\011\001\002\000" +
    "\044\020\u0102\040\022\041\006\042\016\043\015\050\277" +
    "\051\240\052\250\053\273\054\252\057\253\060\257\064" +
    "\245\071\275\077\264\130\301\135\011\001\002\000\054" +
    "\020\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\064\uffa2\071\uffa2\075\370\076\366\077\uffa2\130" +
    "\uffa2\135\uffa2\001\002\000\050\020\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\064\uffa5\071\uffa5" +
    "\077\uffa5\130\uffa5\135\uffa5\001\002\000\004\130\u0105\001" +
    "\002\000\004\026\u0106\001\002\000\004\130\u0107\001\002" +
    "\000\004\025\u0108\001\002\000\004\023\u0109\001\002\000" +
    "\050\020\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\060\uffa9\064\uffa9\071\uffa9\077\uffa9\130\uffa9\135\uffa9" +
    "\001\002\000\050\020\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\064\uffba\071\uffba\077\uffba\130" +
    "\uffba\135\uffba\001\002\000\042\040\022\041\006\042\016" +
    "\043\015\050\277\051\240\052\250\053\273\054\252\057" +
    "\253\060\257\064\245\071\275\077\264\130\301\135\011" +
    "\001\002\000\044\020\u010d\040\022\041\006\042\016\043" +
    "\015\050\277\051\240\052\250\053\273\054\252\057\253" +
    "\060\257\064\245\071\275\077\264\130\301\135\011\001" +
    "\002\000\004\065\u010e\001\002\000\004\024\u010f\001\002" +
    "\000\042\004\064\024\053\032\157\044\066\045\062\066" +
    "\073\067\061\070\072\072\057\073\074\074\065\130\055" +
    "\131\056\132\075\133\060\134\067\001\002\000\010\015" +
    "\162\016\163\025\u0111\001\002\000\004\023\u0112\001\002" +
    "\000\050\020\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\064\uff9e\071\uff9e\077\uff9e\130\uff9e\135" +
    "\uff9e\001\002\000\004\133\u0114\001\002\000\006\025\u0116" +
    "\026\u0115\001\002\000\042\004\064\024\053\032\157\044" +
    "\066\045\062\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\004\023\u0117\001\002\000\050\020\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\064\uff8c" +
    "\071\uff8c\077\uff8c\130\uff8c\135\uff8c\001\002\000\006\025" +
    "\u0119\026\166\001\002\000\004\023\u011a\001\002\000\050" +
    "\020\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\064\uff8b\071\uff8b\077\uff8b\130\uff8b\135\uff8b\001" +
    "\002\000\010\011\051\021\047\023\046\001\002\000\050" +
    "\020\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\064\uffa0\071\uffa0\077\uffa0\130\uffa0\135\uffa0\001" +
    "\002\000\050\020\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\060\uff9f\064\uff9f\071\uff9f\077\uff9f\130\uff9f" +
    "\135\uff9f\001\002\000\042\004\064\024\053\032\157\044" +
    "\066\045\062\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\010\015\162\016\163\025\u0120\001\002\000\004" +
    "\017\u0121\001\002\000\006\055\u0122\056\u0124\001\002\000" +
    "\022\044\066\066\073\067\061\130\u012b\131\056\132\075" +
    "\133\060\134\067\001\002\000\010\020\u0128\055\u0122\056" +
    "\u0124\001\002\000\004\034\u0126\001\002\000\010\020\uff97" +
    "\055\uff97\056\uff97\001\002\000\042\040\022\041\006\042" +
    "\016\043\015\050\277\051\240\052\250\053\273\054\252" +
    "\057\253\060\257\064\245\071\275\077\264\130\301\135" +
    "\011\001\002\000\050\020\uff95\040\022\041\006\042\016" +
    "\043\015\050\277\051\240\052\250\053\273\054\252\055" +
    "\uff95\056\uff95\057\253\060\257\064\245\071\275\077\264" +
    "\130\301\135\011\001\002\000\050\020\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\064\uff99\071" +
    "\uff99\077\uff99\130\uff99\135\uff99\001\002\000\010\020\uff98" +
    "\055\uff98\056\uff98\001\002\000\004\034\u012c\001\002\000" +
    "\004\034\uff65\001\002\000\042\040\022\041\006\042\016" +
    "\043\015\050\277\051\240\052\250\053\273\054\252\057" +
    "\253\060\257\064\245\071\275\077\264\130\301\135\011" +
    "\001\002\000\050\020\uff96\040\022\041\006\042\016\043" +
    "\015\050\277\051\240\052\250\053\273\054\252\055\uff96" +
    "\056\uff96\057\253\060\257\064\245\071\275\077\264\130" +
    "\301\135\011\001\002\000\014\040\022\041\006\042\016" +
    "\043\015\135\011\001\002\000\040\004\064\024\053\044" +
    "\066\045\062\066\073\067\061\070\072\072\057\073\074" +
    "\074\065\130\055\131\056\132\075\133\060\134\067\001" +
    "\002\000\004\130\u0131\001\002\000\006\011\u0132\023\046" +
    "\001\002\000\040\004\064\024\053\044\066\045\062\066" +
    "\073\067\061\070\072\072\057\073\074\074\065\130\055" +
    "\131\056\132\075\133\060\134\067\001\002\000\020\010" +
    "\173\012\177\013\175\014\176\023\u0134\030\172\031\174" +
    "\001\002\000\004\130\u0135\001\002\000\010\011\u013d\035" +
    "\u013b\036\u013c\001\002\000\004\025\u0137\001\002\000\004" +
    "\017\u0138\001\002\000\042\040\022\041\006\042\016\043" +
    "\015\050\277\051\240\052\250\053\273\054\252\057\253" +
    "\060\257\064\245\071\275\077\264\130\301\135\011\001" +
    "\002\000\044\020\u013a\040\022\041\006\042\016\043\015" +
    "\050\277\051\240\052\250\053\273\054\252\057\253\060" +
    "\257\064\245\071\275\077\264\130\301\135\011\001\002" +
    "\000\050\020\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\064\uff9d\071\uff9d\077\uff9d\130\uff9d\135" +
    "\uff9d\001\002\000\004\025\uff9b\001\002\000\004\025\uff9a" +
    "\001\002\000\042\004\064\024\053\032\157\044\066\045" +
    "\062\066\073\067\061\070\072\072\057\073\074\074\065" +
    "\130\055\131\056\132\075\133\060\134\067\001\002\000" +
    "\010\015\162\016\163\025\uff9c\001\002\000\010\015\162" +
    "\016\163\023\u0140\001\002\000\050\020\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\064\uff94\071" +
    "\uff94\077\uff94\130\uff94\135\uff94\001\002\000\042\004\064" +
    "\024\053\032\157\044\066\045\062\066\073\067\061\070" +
    "\072\072\057\073\074\074\065\130\055\131\056\132\075" +
    "\133\060\134\067\001\002\000\010\015\162\016\163\025" +
    "\u0143\001\002\000\004\017\u0144\001\002\000\042\040\022" +
    "\041\006\042\016\043\015\050\277\051\240\052\250\053" +
    "\273\054\252\057\253\060\257\064\245\071\275\077\264" +
    "\130\301\135\011\001\002\000\044\020\u0146\040\022\041" +
    "\006\042\016\043\015\050\277\051\240\052\250\053\273" +
    "\054\252\057\253\060\257\064\245\071\275\077\264\130" +
    "\301\135\011\001\002\000\050\020\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\064\uffa1\071\uffa1" +
    "\077\uffa1\130\uffa1\135\uffa1\001\002\000\006\025\uffc4\026" +
    "\uffc4\001\002\000\010\021\040\025\uffc2\026\uffc2\001\002" +
    "\000\010\021\040\025\uffc0\026\uffc0\001\002\000\014\011" +
    "\uffc9\021\uffc9\025\uffc9\026\uffc9\130\uffc9\001\002\000\006" +
    "\025\uffc1\026\uffc1\001\002\000\042\040\022\041\006\042" +
    "\016\043\015\050\277\051\240\052\250\053\273\054\252" +
    "\057\253\060\257\064\245\071\275\077\264\130\301\135" +
    "\011\001\002\000\044\020\u014e\040\022\041\006\042\016" +
    "\043\015\050\277\051\240\052\250\053\273\054\252\057" +
    "\253\060\257\064\245\071\275\077\264\130\301\135\011" +
    "\001\002\000\030\002\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\047\uffce\061\uffce\062\uffce\063\uffce\130\uffce\135\uffce" +
    "\001\002\000\042\004\064\017\u0150\024\053\044\066\045" +
    "\062\066\073\067\061\070\072\072\057\073\074\074\065" +
    "\130\055\131\056\132\075\133\060\134\067\001\002\000" +
    "\044\004\064\017\220\024\053\032\157\044\066\045\062" +
    "\066\073\067\061\070\072\072\057\073\074\074\065\130" +
    "\055\131\056\132\075\133\060\134\067\001\002\000\020" +
    "\010\173\012\177\013\175\014\176\023\u0152\030\172\031" +
    "\174\001\002\000\062\002\uff85\020\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\071\uff85\077\uff85\130\uff85\135" +
    "\uff85\001\002\000\006\020\u0154\026\223\001\002\000\004" +
    "\023\u0155\001\002\000\062\002\uff88\020\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\063\uff88\064\uff88\071\uff88\077\uff88\130\uff88" +
    "\135\uff88\001\002\000\004\024\u0157\001\002\000\016\025" +
    "\u0158\040\022\041\006\042\016\043\015\130\231\001\002" +
    "\000\004\017\u015e\001\002\000\006\025\u015a\026\235\001" +
    "\002\000\004\017\u015b\001\002\000\042\040\022\041\006" +
    "\042\016\043\015\050\277\051\240\052\250\053\273\054" +
    "\252\057\253\060\257\064\245\071\275\077\264\130\301" +
    "\135\011\001\002\000\044\020\u015d\040\022\041\006\042" +
    "\016\043\015\050\277\051\240\052\250\053\273\054\252" +
    "\057\253\060\257\064\245\071\275\077\264\130\301\135" +
    "\011\001\002\000\030\002\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\047\uffcb\061\uffcb\062\uffcb\063\uffcb\130\uffcb\135" +
    "\uffcb\001\002\000\042\040\022\041\006\042\016\043\015" +
    "\050\277\051\240\052\250\053\273\054\252\057\253\060" +
    "\257\064\245\071\275\077\264\130\301\135\011\001\002" +
    "\000\044\020\u0160\040\022\041\006\042\016\043\015\050" +
    "\277\051\240\052\250\053\273\054\252\057\253\060\257" +
    "\064\245\071\275\077\264\130\301\135\011\001\002\000" +
    "\030\002\uffca\040\uffca\041\uffca\042\uffca\043\uffca\047\uffca" +
    "\061\uffca\062\uffca\063\uffca\130\uffca\135\uffca\001\002\000" +
    "\004\024\u0162\001\002\000\016\025\u0163\040\022\041\006" +
    "\042\016\043\015\130\231\001\002\000\004\017\u0169\001" +
    "\002\000\006\025\u0165\026\235\001\002\000\004\017\u0166" +
    "\001\002\000\042\040\022\041\006\042\016\043\015\050" +
    "\277\051\240\052\250\053\273\054\252\057\253\060\257" +
    "\064\245\071\275\077\264\130\301\135\011\001\002\000" +
    "\044\020\u0168\040\022\041\006\042\016\043\015\050\277" +
    "\051\240\052\250\053\273\054\252\057\253\060\257\064" +
    "\245\071\275\077\264\130\301\135\011\001\002\000\030" +
    "\002\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\047\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\130\uffc6\135\uffc6\001\002\000\042" +
    "\040\022\041\006\042\016\043\015\050\277\051\240\052" +
    "\250\053\273\054\252\057\253\060\257\064\245\071\275" +
    "\077\264\130\301\135\011\001\002\000\044\020\u016b\040" +
    "\022\041\006\042\016\043\015\050\277\051\240\052\250" +
    "\053\273\054\252\057\253\060\257\064\245\071\275\077" +
    "\264\130\301\135\011\001\002\000\030\002\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\047\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\130\uffc5\135\uffc5\001\002\000\004\017\u016d\001\002" +
    "\000\014\040\022\041\006\042\016\043\015\130\u016f\001" +
    "\002\000\016\020\u0178\040\022\041\006\042\016\043\015" +
    "\130\u016f\001\002\000\004\130\u0176\001\002\000\004\130" +
    "\u0172\001\002\000\016\020\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\130\uffed\001\002\000\006\021\142\023\u0174\001" +
    "\002\000\006\021\142\023\u0175\001\002\000\016\020\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\130\uffec\001\002\000" +
    "\016\020\uffea\040\uffea\041\uffea\042\uffea\043\uffea\130\uffea" +
    "\001\002\000\004\023\u0177\001\002\000\016\020\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\130\uffeb\001\002\000\004" +
    "\023\u017a\001\002\000\016\020\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\130\uffee\001\002\000\030\002\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\047\uffef\061\uffef\062\uffef\063" +
    "\uffef\130\uffef\135\uffef\001\002\000\030\002\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\047\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\130\ufffe\135\ufffe\001\002\000\030\002\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\047\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\130\ufff0\135\ufff0\001\002\000\004\002\001\001\002" +
    "\000\006\011\u0180\023\u017f\001\002\000\116\002\uffdf\004" +
    "\uffdf\020\uffdf\024\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\077\uffdf\130\uffdf\131\uffdf" +
    "\132\uffdf\133\uffdf\134\uffdf\135\uffdf\001\002\000\004\133" +
    "\u0181\001\002\000\004\023\u0182\001\002\000\116\002\uffe0" +
    "\004\uffe0\020\uffe0\024\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\077\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\001\002\000\044" +
    "\004\064\017\u0184\024\053\032\157\044\066\045\062\066" +
    "\073\067\061\070\072\072\057\073\074\074\065\130\055" +
    "\131\056\132\075\133\060\134\067\001\002\000\044\004" +
    "\064\017\220\024\053\032\157\044\066\045\062\066\073" +
    "\067\061\070\072\072\057\073\074\074\065\130\055\131" +
    "\056\132\075\133\060\134\067\001\002\000\034\002\uffd1" +
    "\015\162\016\163\040\uffd1\041\uffd1\042\uffd1\043\uffd1\047" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\130\uffd1\135\uffd1\001\002" +
    "\000\006\020\u0187\026\223\001\002\000\030\002\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\047\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\130\uffd0\135\uffd0\001\002\000\010\011\334\023" +
    "\333\024\u0189\001\002\000\016\025\u018a\040\022\041\006" +
    "\042\016\043\015\130\231\001\002\000\004\017\u0190\001" +
    "\002\000\006\025\u018c\026\235\001\002\000\004\017\u018d" +
    "\001\002\000\042\040\022\041\006\042\016\043\015\050" +
    "\277\051\240\052\250\053\273\054\252\057\253\060\257" +
    "\064\245\071\275\077\264\130\301\135\011\001\002\000" +
    "\044\020\u018f\040\022\041\006\042\016\043\015\050\277" +
    "\051\240\052\250\053\273\054\252\057\253\060\257\064" +
    "\245\071\275\077\264\130\301\135\011\001\002\000\030" +
    "\002\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\047\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\130\uffcc\135\uffcc\001\002\000\042" +
    "\040\022\041\006\042\016\043\015\050\277\051\240\052" +
    "\250\053\273\054\252\057\253\060\257\064\245\071\275" +
    "\077\264\130\301\135\011\001\002\000\044\020\u0192\040" +
    "\022\041\006\042\016\043\015\050\277\051\240\052\250" +
    "\053\273\054\252\057\253\060\257\064\245\071\275\077" +
    "\264\130\301\135\011\001\002\000\030\002\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\047\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\130\uffcd\135\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\044\002\012\003\017\007\003\010\016\011" +
    "\027\012\025\013\035\016\026\023\006\024\011\026\032" +
    "\027\022\030\020\031\033\032\031\045\034\067\030\001" +
    "\001\000\002\001\001\000\006\053\047\057\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\u017a\010\016\011\027\012\025\013\035" +
    "\016\026\023\006\024\011\026\032\027\022\030\020\031" +
    "\033\032\031\045\034\067\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\070\041\072\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\u0149\001\001\000\002\001" +
    "\001\000\012\053\047\057\044\070\041\072\042\001\001" +
    "\000\002\001\001\000\004\070\u0149\001\001\000\010\005" +
    "\232\014\233\067\231\001\001\000\004\053\151\001\001" +
    "\000\002\001\001\000\014\021\051\046\147\047\075\054" +
    "\067\055\053\001\001\000\002\001\001\000\014\021\051" +
    "\046\062\047\075\054\067\055\053\001\001\000\002\001" +
    "\001\000\020\021\051\046\155\047\075\050\154\051\205" +
    "\054\067\055\053\001\001\000\002\001\001\000\006\053" +
    "\047\057\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\051\046\113\047\075\054\067" +
    "\055\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\051" +
    "\046\127\047\075\054\067\055\053\001\001\000\014\021" +
    "\051\046\126\047\075\054\067\055\053\001\001\000\014" +
    "\021\051\046\125\047\075\054\067\055\053\001\001\000" +
    "\014\021\051\046\124\047\075\054\067\055\053\001\001" +
    "\000\014\021\051\046\123\047\075\054\067\055\053\001" +
    "\001\000\014\021\051\046\122\047\075\054\067\055\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\021\051\046\155\047\075\050\154\051" +
    "\160\052\153\054\067\055\053\056\157\001\001\000\004" +
    "\053\151\001\001\000\014\021\051\046\147\047\075\054" +
    "\067\055\053\001\001\000\004\066\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\051\046\155\047\075\050\154" +
    "\051\170\054\067\055\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\051\046\155\047\075\050\154" +
    "\051\164\054\067\055\053\001\001\000\020\021\051\046" +
    "\155\047\075\050\154\051\163\054\067\055\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\051\046" +
    "\155\047\075\050\154\051\160\052\167\054\067\055\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\051\046\155\047\075\050\204\054\067" +
    "\055\053\001\001\000\016\021\051\046\155\047\075\050" +
    "\203\054\067\055\053\001\001\000\016\021\051\046\155" +
    "\047\075\050\202\054\067\055\053\001\001\000\016\021" +
    "\051\046\155\047\075\050\201\054\067\055\053\001\001" +
    "\000\016\021\051\046\155\047\075\050\200\054\067\055" +
    "\053\001\001\000\016\021\051\046\155\047\075\050\177" +
    "\054\067\055\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\051\046\155" +
    "\047\075\050\213\054\067\055\053\001\001\000\026\021" +
    "\051\046\155\047\075\050\154\051\160\052\216\054\067" +
    "\055\053\063\215\064\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\021\051\046\155\047\075\050\154\051\160\052\216\054" +
    "\067\055\053\063\221\064\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\051\046\155\047\075\050" +
    "\154\051\160\052\216\054\067\055\053\064\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\u0146\067\231\001\001\000\002\001\001\000\062\004\277" +
    "\010\270\011\266\015\243\020\275\021\273\022\241\023" +
    "\260\024\011\026\245\030\255\031\250\032\257\033\271" +
    "\034\264\035\265\036\267\037\253\040\246\041\254\042" +
    "\261\044\240\061\242\067\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\051\046\155\047\075\050\154" +
    "\051\u013e\054\067\055\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\010\270\011" +
    "\266\015\355\020\275\021\273\022\241\023\260\024\011" +
    "\026\245\030\255\031\250\032\257\033\271\034\264\035" +
    "\265\036\267\037\253\040\246\041\254\042\261\044\240" +
    "\061\242\067\262\001\001\000\006\053\047\057\301\001" +
    "\001\000\004\053\151\001\001\000\004\066\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\051\046\155\047\075\050\154\051\312\054\067" +
    "\055\053\001\001\000\002\001\001\000\026\021\051\046" +
    "\155\047\075\050\154\051\160\052\216\054\067\055\053" +
    "\063\316\064\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\051\046\155\047\075\050\335\054\067\055" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\051\046" +
    "\155\047\075\050\154\051\350\054\067\055\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\051\046" +
    "\155\047\075\050\154\051\353\054\067\055\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\051\046\155\047\075\050\154" +
    "\051\360\054\067\055\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\363\010\270\011\266\015\243" +
    "\020\275\021\273\022\241\023\260\024\011\026\245\030" +
    "\255\031\250\032\257\033\271\034\264\035\265\036\267" +
    "\037\253\040\246\041\254\042\261\044\240\061\242\067" +
    "\262\001\001\000\060\010\270\011\266\015\355\020\275" +
    "\021\273\022\241\023\260\024\011\026\245\030\255\031" +
    "\250\032\257\033\271\034\264\035\265\036\267\037\253" +
    "\040\246\041\254\042\261\044\240\061\242\067\262\001" +
    "\001\000\006\060\370\065\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\372\010\270\011\266\015\243\020\275\021\273" +
    "\022\241\023\260\024\011\026\245\030\255\031\250\032" +
    "\257\033\271\034\264\035\265\036\267\037\253\040\246" +
    "\041\254\042\261\044\240\061\242\067\262\001\001\000" +
    "\060\010\270\011\266\015\355\020\275\021\273\022\241" +
    "\023\260\024\011\026\245\030\255\031\250\032\257\033" +
    "\271\034\264\035\265\036\267\037\253\040\246\041\254" +
    "\042\261\044\240\061\242\067\262\001\001\000\002\001" +
    "\001\000\020\021\051\046\155\047\075\050\154\051\375" +
    "\054\067\055\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\u0100\010\270\011\266\015\243\020\275" +
    "\021\273\022\241\023\260\024\011\026\245\030\255\031" +
    "\250\032\257\033\271\034\264\035\265\036\267\037\253" +
    "\040\246\041\254\042\261\044\240\061\242\067\262\001" +
    "\001\000\060\010\270\011\266\015\355\020\275\021\273" +
    "\022\241\023\260\024\011\026\245\030\255\031\250\032" +
    "\257\033\271\034\264\035\265\036\267\037\253\040\246" +
    "\041\254\042\261\044\240\061\242\067\262\001\001\000" +
    "\006\060\u0102\065\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\u010b\010\270\011\266\015\243\020\275\021" +
    "\273\022\241\023\260\024\011\026\245\030\255\031\250" +
    "\032\257\033\271\034\264\035\265\036\267\037\253\040" +
    "\246\041\254\042\261\044\240\061\242\067\262\001\001" +
    "\000\060\010\270\011\266\015\355\020\275\021\273\022" +
    "\241\023\260\024\011\026\245\030\255\031\250\032\257" +
    "\033\271\034\264\035\265\036\267\037\253\040\246\041" +
    "\254\042\261\044\240\061\242\067\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\051\046\155\047" +
    "\075\050\154\051\u010f\054\067\055\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\051\046\155\047\075" +
    "\050\154\051\160\052\153\054\067\055\053\056\u0117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\053\047\057" +
    "\044\070\041\072\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\051\046\155\047\075\050\154\051" +
    "\u011e\054\067\055\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\062\u0124\071\u0122\001\001\000\004\047" +
    "\u0129\001\001\000\004\062\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\u0126\010\270\011\266\015" +
    "\243\020\275\021\273\022\241\023\260\024\011\026\245" +
    "\030\255\031\250\032\257\033\271\034\264\035\265\036" +
    "\267\037\253\040\246\041\254\042\261\044\240\061\242" +
    "\067\262\001\001\000\060\010\270\011\266\015\355\020" +
    "\275\021\273\022\241\023\260\024\011\026\245\030\255" +
    "\031\250\032\257\033\271\034\264\035\265\036\267\037" +
    "\253\040\246\041\254\042\261\044\240\061\242\067\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\u012c\010\270\011\266" +
    "\015\243\020\275\021\273\022\241\023\260\024\011\026" +
    "\245\030\255\031\250\032\257\033\271\034\264\035\265" +
    "\036\267\037\253\040\246\041\254\042\261\044\240\061" +
    "\242\067\262\001\001\000\060\010\270\011\266\015\355" +
    "\020\275\021\273\022\241\023\260\024\011\026\245\030" +
    "\255\031\250\032\257\033\271\034\264\035\265\036\267" +
    "\037\253\040\246\041\254\042\261\044\240\061\242\067" +
    "\262\001\001\000\006\010\u012e\067\u012f\001\001\000\016" +
    "\021\051\046\155\047\075\050\u0132\054\067\055\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\051" +
    "\046\062\047\075\054\067\055\053\001\001\000\002\001" +
    "\001\000\004\043\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\u0138\010\270\011" +
    "\266\015\243\020\275\021\273\022\241\023\260\024\011" +
    "\026\245\030\255\031\250\032\257\033\271\034\264\035" +
    "\265\036\267\037\253\040\246\041\254\042\261\044\240" +
    "\061\242\067\262\001\001\000\060\010\270\011\266\015" +
    "\355\020\275\021\273\022\241\023\260\024\011\026\245" +
    "\030\255\031\250\032\257\033\271\034\264\035\265\036" +
    "\267\037\253\040\246\041\254\042\261\044\240\061\242" +
    "\067\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\051\046\155\047\075\050\154" +
    "\051\u013d\054\067\055\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\051\046\155" +
    "\047\075\050\154\051\u0141\054\067\055\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\u0144\010\270" +
    "\011\266\015\243\020\275\021\273\022\241\023\260\024" +
    "\011\026\245\030\255\031\250\032\257\033\271\034\264" +
    "\035\265\036\267\037\253\040\246\041\254\042\261\044" +
    "\240\061\242\067\262\001\001\000\060\010\270\011\266" +
    "\015\355\020\275\021\273\022\241\023\260\024\011\026" +
    "\245\030\255\031\250\032\257\033\271\034\264\035\265" +
    "\036\267\037\253\040\246\041\254\042\261\044\240\061" +
    "\242\067\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\070\041\072\u0148\001\001\000\004\070\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u014c" +
    "\010\270\011\266\015\243\020\275\021\273\022\241\023" +
    "\260\024\011\026\245\030\255\031\250\032\257\033\271" +
    "\034\264\035\265\036\267\037\253\040\246\041\254\042" +
    "\261\044\240\061\242\067\262\001\001\000\060\010\270" +
    "\011\266\015\355\020\275\021\273\022\241\023\260\024" +
    "\011\026\245\030\255\031\250\032\257\033\271\034\264" +
    "\035\265\036\267\037\253\040\246\041\254\042\261\044" +
    "\240\061\242\067\262\001\001\000\002\001\001\000\016" +
    "\021\051\046\155\047\075\050\u0150\054\067\055\053\001" +
    "\001\000\026\021\051\046\155\047\075\050\154\051\160" +
    "\052\216\054\067\055\053\063\u0152\064\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\u0158\014\233\067\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\u015b\010\270\011" +
    "\266\015\243\020\275\021\273\022\241\023\260\024\011" +
    "\026\245\030\255\031\250\032\257\033\271\034\264\035" +
    "\265\036\267\037\253\040\246\041\254\042\261\044\240" +
    "\061\242\067\262\001\001\000\060\010\270\011\266\015" +
    "\355\020\275\021\273\022\241\023\260\024\011\026\245" +
    "\030\255\031\250\032\257\033\271\034\264\035\265\036" +
    "\267\037\253\040\246\041\254\042\261\044\240\061\242" +
    "\067\262\001\001\000\002\001\001\000\062\004\u015e\010" +
    "\270\011\266\015\243\020\275\021\273\022\241\023\260" +
    "\024\011\026\245\030\255\031\250\032\257\033\271\034" +
    "\264\035\265\036\267\037\253\040\246\041\254\042\261" +
    "\044\240\061\242\067\262\001\001\000\060\010\270\011" +
    "\266\015\355\020\275\021\273\022\241\023\260\024\011" +
    "\026\245\030\255\031\250\032\257\033\271\034\264\035" +
    "\265\036\267\037\253\040\246\041\254\042\261\044\240" +
    "\061\242\067\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u0163\014\233\067\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\u0166\010\270\011\266\015\243\020\275\021\273\022\241" +
    "\023\260\024\011\026\245\030\255\031\250\032\257\033" +
    "\271\034\264\035\265\036\267\037\253\040\246\041\254" +
    "\042\261\044\240\061\242\067\262\001\001\000\060\010" +
    "\270\011\266\015\355\020\275\021\273\022\241\023\260" +
    "\024\011\026\245\030\255\031\250\032\257\033\271\034" +
    "\264\035\265\036\267\037\253\040\246\041\254\042\261" +
    "\044\240\061\242\067\262\001\001\000\002\001\001\000" +
    "\062\004\u0169\010\270\011\266\015\243\020\275\021\273" +
    "\022\241\023\260\024\011\026\245\030\255\031\250\032" +
    "\257\033\271\034\264\035\265\036\267\037\253\040\246" +
    "\041\254\042\261\044\240\061\242\067\262\001\001\000" +
    "\060\010\270\011\266\015\355\020\275\021\273\022\241" +
    "\023\260\024\011\026\245\030\255\031\250\032\257\033" +
    "\271\034\264\035\265\036\267\037\253\040\246\041\254" +
    "\042\261\044\240\061\242\067\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u016d\017\u0170\067\u016f" +
    "\001\001\000\006\017\u0178\067\u016f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\047" +
    "\057\u0172\001\001\000\004\053\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\051\046\155\047\075" +
    "\050\154\051\u0184\054\067\055\053\001\001\000\026\021" +
    "\051\046\155\047\075\050\154\051\160\052\216\054\067" +
    "\055\053\063\u0185\064\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u018a\014\233\067\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\u018d\010\270" +
    "\011\266\015\243\020\275\021\273\022\241\023\260\024" +
    "\011\026\245\030\255\031\250\032\257\033\271\034\264" +
    "\035\265\036\267\037\253\040\246\041\254\042\261\044" +
    "\240\061\242\067\262\001\001\000\060\010\270\011\266" +
    "\015\355\020\275\021\273\022\241\023\260\024\011\026" +
    "\245\030\255\031\250\032\257\033\271\034\264\035\265" +
    "\036\267\037\253\040\246\041\254\042\261\044\240\061" +
    "\242\067\262\001\001\000\002\001\001\000\062\004\u0190" +
    "\010\270\011\266\015\243\020\275\021\273\022\241\023" +
    "\260\024\011\026\245\030\255\031\250\032\257\033\271" +
    "\034\264\035\265\036\267\037\253\040\246\041\254\042" +
    "\261\044\240\061\242\067\262\001\001\000\060\010\270" +
    "\011\266\015\355\020\275\021\273\022\241\023\260\024" +
    "\011\026\245\030\255\031\250\032\257\033\271\034\264" +
    "\035\265\036\267\037\253\040\246\041\254\042\261\044" +
    "\240\061\242\067\262\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<>();
    
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

   ////////////////////////////
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.left+1)+ " Columna "+(s.right+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 AST= a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              String RESULT =null;
		 AST = new LinkedList<Instruccion>();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int Lista1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int Lista1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> Lista1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	Lista1.add(instru);
				RESULT = Lista1;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CONSTANTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPORTAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORTAR ::= Timportar Tcadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Importar(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUSION ::= Tfusion Tid Tllave_a DECLARACIONES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Struct(a,b,aleft,bleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUSION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARACIONES DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_STRUCT ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_STRUCT ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_STRUCT ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION_FUSION ::= Tid Tpunto LISTA_ACCESOS_FUSION Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Fusion(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION_FUSION ::= Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Asignacion_Fusion(id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_FUSION ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_FUSION ::= Tid Tid Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion valor = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Fusion(tipo,id,valor,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_FUSION ::= Tid Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Declaracion_Fusion(tipo,id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_ACCESOS_FUSION ::= LISTA_ACCESOS_FUSION Tpunto Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_ACCESOS_FUSION ::= Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(a); RESULT = lista; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPODATO Tid Tigual OPERACION_NUMERICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Trstring Tid Tigual Tcadena Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(Tipo.String,Tipo.String,a,new Asignacion(a,new Operacion(b,TipoOperacion.RSTRING,bleft,bright),aleft,aleft), aleft,  aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Trstring Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(Tipo.String,Tipo.String,a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPODATO ::= Tent 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Entero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPODATO ::= Tdec 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Decimal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPODATO ::= Tchr 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Char; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPODATO ::= Tbul 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REFERENCIA ::= Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REFERENCIA ::= TIPODATO Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(a,origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= Tid Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION_ARREGLO ::= Tid Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Asignacion_Arreglo(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_ARREGLO ::= Tid DIMENSIONES Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Arreglo(a,b,c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAVES ::= LLAVES Tcoma LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Object> lst = a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAVES ::= LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Object> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LLAVE ::= Tllave_a LLAVES Tllave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LLAVE ::= VALOR_PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONSTANTE ::= Tdefinir Tid OPERACION_LOGICA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Definir(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONSTANTE ::= Tdefinir Tid Tllave_a LLAVES Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= TIPODATO Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= TIPODATO Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= Tid Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= Tid Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,e,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Integer> a = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(1); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DIMENSIONES_VACIAS ::= DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		ArrayList<Integer> lst = new ArrayList<>(); lst.add(1); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIMENSION_VACIA ::= Tcorchete_a Tcorchete_c 
            {
              Integer RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION_VACIA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= Tzro Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,b,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODO ::= Tzro Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= PARAMETROS Tcoma PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETRO ::= TIPODATO Tid 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETRO ::= Tid Tid 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETRO ::= TIPODATO Tid DIMENSIONES_VACIAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Arreglo(a,b,c,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTENIDO ::= CONTENIDO SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTENIDO ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= RETORNAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= LLAMADA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo_IF a = (Tipo_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= SEGUIR 
            {
              Instruccion RESULT =null;
		 RESULT = new Siguiente(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= BREAK 
            {
              Instruccion RESULT =null;
		RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA ::= CONCAT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONCAT ::= Tconc Tpar_a Tid Tcoma Tid Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Conc(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCAT",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INCREMENTO ::= Tid Tincremento Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Operador(a, Tipo.INCREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECREMENTO ::= Tid Tdecremento Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Operador(a, Tipo.DECREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECREMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_IF ::= Tif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              Tipo_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Tipo_IF(a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELSE_IF ::= Telseif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 c.add( new Sentencia_IF(a,b,aleft,aright)); RESULT=c;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELSE_IF ::= ELSE 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia_IF a = (Sentencia_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Sentencia_IF> lst =  new LinkedList<>(); lst.add(a);  RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELSE ::= Telse Tllave_a CONTENIDO Tllave_c 
            {
              Sentencia_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Sentencia_IF(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSE ::= 
            {
              Sentencia_IF RESULT =null;
		 RESULT= new Sentencia_IF(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // WHILE ::= Twhile Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SEGUIR ::= Tsiga Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUIR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BREAK ::= Tromper Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DO_WHILE ::= Trepeat Tllave_a CONTENIDO Tllave_c Twhen Tpar_a OPERACION_LOGICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DoWhile(b,a ,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FOR ::= Tfor Tpar_a DECLARACION OPERACION_RELACIONAL Tpycoma TIPO_OPERADOR Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(a,b,c,d,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO_OPERADOR ::= Tid Tigual OPERACION_LOGICA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO_OPERADOR ::= Tid Tincremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,TipoOperacion.MASMAS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO_OPERADOR ::= Tid Tdecremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,TipoOperacion.MENOSMENOS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_OPERADOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SWITCH ::= Tswitch Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CASOS Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Sentencia_Switch(a,b,aleft,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASOS ::= CASOS CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASOS ::= CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Case> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASO ::= Tcase VALOR Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASO ::= Tdefault Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RETORNAR ::= Tregresar OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA ::= Tid Tpar_a Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA ::= Tid Tpar_a VALORES_PARAMETROS Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ACCESO_ARREGLO ::= Tid DIMENSIONES 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_ARREGLO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACCESO_STRUCT ::= Tid Tpunto LISTA_ACCESOS_FUSION 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_STRUCT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALORES_PARAMETROS ::= VALORES_PARAMETROS Tcoma VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALORES_PARAMETROS ::= VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> b = new LinkedList<>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_PARAMETRO ::= OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_PARAMETRO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMPRIMIR ::= Timp Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IMPRIMIR ::= Timp Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ARREGLO ::= ARREGLO_SIMPLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DIMENSIONES ::= DIMENSIONES DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> lst = (LinkedList<Operacion>) a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DIMENSIONES ::= DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Operacion> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DIMENSION ::= Tcorchete_a OPERACION_NUMERICA Tcorchete_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_LOGICA ::= OPERACION_LOGICA Tor OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.OR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_LOGICA ::= OPERACION_LOGICA Tand OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.AND, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_LOGICA ::= Tnot OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tigualigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tdiferente OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_RELACIONAL ::= OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_NUMERICA ::= Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmas OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpor OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tdiv OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmod OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpotencia OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERACION_NUMERICA ::= Tpar_a OPERACION_LOGICA Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_NUMERICA ::= LLAMADA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(a,TipoOperacion.FUNCION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_NUMERICA ::= Tpesode Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.PESODE, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERACION_NUMERICA ::= ACCESO_ARREGLO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERACION_NUMERICA ::= ACCESO_STRUCT 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERACION_NUMERICA ::= VALOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERACION_NUMERICA ::= Tatxt Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.ATXT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERACION_NUMERICA ::= Teqls Tpar_a Tid Tcoma Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERACION_NUMERICA ::= Taent Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.AENT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERACION_NUMERICA ::= Tadec Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.ADEC, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VALOR ::= Tid 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VALOR ::= Tentero 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VALOR ::= Tdecimal 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // VALOR ::= Tcaracter 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // VALOR ::= Ttrue 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VALOR ::= Tcadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CADENA,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VALOR ::= Tfalse 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALOR ::= Tnlo 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(TipoOperacion.NULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
