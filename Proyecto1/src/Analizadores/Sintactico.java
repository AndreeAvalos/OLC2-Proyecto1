
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\027" +
    "\010\000\002\006\004\000\002\006\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\006\000\002\030\010\000" +
    "\002\030\014\000\002\031\005\000\002\031\007\000\002" +
    "\031\015\000\002\047\005\000\002\047\003\000\002\010" +
    "\005\000\002\010\007\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\026\007\000\002\026\010\000\002\011\006\000\002" +
    "\032\010\000\002\032\007\000\002\045\005\000\002\045" +
    "\003\000\002\046\005\000\002\046\003\000\002\012\005" +
    "\000\002\012\007\000\002\013\012\000\002\013\011\000" +
    "\002\013\011\000\002\013\012\000\002\013\013\000\002" +
    "\013\012\000\002\052\004\000\002\052\003\000\002\051" +
    "\004\000\002\016\012\000\002\016\011\000\002\005\005" +
    "\000\002\005\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\005\000\002\004\004\000\002\004\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\020\005\000\002\021\005\000\002\021\006\000\002" +
    "\041\004\000\002\042\005\000\002\043\005\000\002\043" +
    "\003\000\002\037\003\000\002\022\007\000\002\022\011" +
    "\000\002\023\003\000\002\024\006\000\002\024\012\000" +
    "\002\024\012\000\002\024\010\000\002\024\010\000\002" +
    "\044\004\000\002\044\003\000\002\040\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\004\000\002\036\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\033\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\006\000\002\034\003" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\024\040\021\041\007\042\016\043\015\047" +
    "\024\061\010\062\023\136\005\143\011\001\002\000\026" +
    "\002\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\047\ufffe\061" +
    "\ufffe\062\ufffe\136\ufffe\143\ufffe\001\002\000\012\011\253" +
    "\021\111\037\252\136\u010c\001\002\000\026\002\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\047\ufff8\061\ufff8\062\ufff8" +
    "\136\ufff8\143\ufff8\001\002\000\006\021\uffe2\136\uffe2\001" +
    "\002\000\004\136\u0107\001\002\000\006\021\uffdf\136\uffdf" +
    "\001\002\000\034\002\uffad\020\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\047\uffad\061\uffad\062\uffad\064\uffad\076\uffad" +
    "\136\uffad\143\uffad\001\002\000\004\002\u0106\001\002\000" +
    "\026\002\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\047\ufffd" +
    "\061\ufffd\062\ufffd\136\ufffd\143\ufffd\001\002\000\006\021" +
    "\uffe0\136\uffe0\001\002\000\006\021\uffe1\136\uffe1\001\002" +
    "\000\026\002\000\040\021\041\007\042\016\043\015\047" +
    "\024\061\010\062\023\136\005\143\011\001\002\000\026" +
    "\002\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\047\ufff5\061" +
    "\ufff5\062\ufff5\136\ufff5\143\ufff5\001\002\000\006\021\uffe3" +
    "\136\uffe3\001\002\000\026\002\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\047\ufff6\061\ufff6\062\ufff6\136\ufff6\143\ufff6" +
    "\001\002\000\004\136\366\001\002\000\004\136\353\001" +
    "\002\000\026\002\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\047\ufffb\061\ufffb\062\ufffb\136\ufffb\143\ufffb\001\002\000" +
    "\026\002\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9" +
    "\061\ufff9\062\ufff9\136\ufff9\143\ufff9\001\002\000\026\002" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc\061\ufffc" +
    "\062\ufffc\136\ufffc\143\ufffc\001\002\000\006\021\036\136" +
    "\037\001\002\000\026\002\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\047\ufff3\061\ufff3\062\ufff3\136\ufff3\143\ufff3\001" +
    "\002\000\026\002\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\047\ufff7\061\ufff7\062\ufff7\136\ufff7\143\ufff7\001\002\000" +
    "\026\002\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\047\ufff4" +
    "\061\ufff4\062\ufff4\136\ufff4\143\ufff4\001\002\000\026\002" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\047\ufffa\061\ufffa" +
    "\062\ufffa\136\ufffa\143\ufffa\001\002\000\006\021\036\136" +
    "\340\001\002\000\004\022\163\001\002\000\012\011\047" +
    "\021\045\023\044\024\042\001\002\000\014\011\uffcc\021" +
    "\uffcc\025\uffcc\026\uffcc\136\uffcc\001\002\000\006\011\331" +
    "\021\036\001\002\000\020\025\203\040\021\041\007\042" +
    "\016\043\015\136\204\143\011\001\002\000\010\011\165" +
    "\021\111\023\164\001\002\000\034\002\uffe5\020\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\047\uffe5\061\uffe5\062\uffe5" +
    "\064\uffe5\076\uffe5\136\uffe5\143\uffe5\001\002\000\030\004" +
    "\057\022\163\024\054\045\053\066\052\067\064\136\060" +
    "\137\055\140\056\141\067\142\051\001\002\000\100\002" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\033\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\047" +
    "\uffa6\061\uffa6\062\uffa6\136\uffa6\143\uffa6\001\002\000\030" +
    "\004\057\006\066\024\054\045\053\066\052\067\064\136" +
    "\060\137\055\140\056\141\067\142\051\001\002\000\074" +
    "\002\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91\022\uff91" +
    "\023\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\033" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\047\uff91\061\uff91" +
    "\062\uff91\136\uff91\143\uff91\001\002\000\074\002\uff8d\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d\023\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\047\uff8d\061\uff8d\062\uff8d\136" +
    "\uff8d\143\uff8d\001\002\000\074\002\uff8c\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\020\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\033\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\047\uff8c\061\uff8c\062\uff8c\136\uff8c\143\uff8c" +
    "\001\002\000\004\024\160\001\002\000\030\004\057\024" +
    "\054\032\126\045\053\066\052\067\064\136\060\137\055" +
    "\140\056\141\067\142\051\001\002\000\074\002\uff8e\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\020\uff8e\022\uff8e\023\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\047\uff8e\061\uff8e\062\uff8e\136" +
    "\uff8e\143\uff8e\001\002\000\074\002\uff8f\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\020\uff8f\022\uff8f\023\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\033\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\047\uff8f\061\uff8f\062\uff8f\136\uff8f\143\uff8f" +
    "\001\002\000\026\004\057\024\054\045\053\066\052\067" +
    "\064\136\060\137\055\140\056\141\067\142\051\001\002" +
    "\000\102\002\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\020\uff90" +
    "\021\111\022\uff90\023\uff90\024\107\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\033\uff90\037\112\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\047\uff90\061\uff90\062\uff90\136\uff90\143" +
    "\uff90\001\002\000\074\002\uff86\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\020\uff86\022\uff86\023\uff86\025\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\033\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\047\uff86\061\uff86\062\uff86\136\uff86\143\uff86\001\002" +
    "\000\074\002\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010" +
    "\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89" +
    "\022\uff89\023\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\033\uff89\040\uff89\041\uff89\042\uff89\043\uff89\047\uff89" +
    "\061\uff89\062\uff89\136\uff89\143\uff89\001\002\000\020\004" +
    "\074\005\100\006\073\007\072\023\075\027\077\033\076" +
    "\001\002\000\074\002\uff8a\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\020\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\033\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\047\uff8a\061\uff8a\062\uff8a\136\uff8a\143\uff8a\001\002\000" +
    "\074\002\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020\uff87\022" +
    "\uff87\023\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\033\uff87\040\uff87\041\uff87\042\uff87\043\uff87\047\uff87\061" +
    "\uff87\062\uff87\136\uff87\143\uff87\001\002\000\004\136\070" +
    "\001\002\000\074\002\uff8b\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\020\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\033\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\047\uff8b\061\uff8b\062\uff8b\136\uff8b\143\uff8b\001\002\000" +
    "\004\023\071\001\002\000\034\002\uffdd\020\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\047\uffdd\061\uffdd\062\uffdd\064" +
    "\uffdd\076\uffdd\136\uffdd\143\uffdd\001\002\000\026\004\057" +
    "\024\054\045\053\066\052\067\064\136\060\137\055\140" +
    "\056\141\067\142\051\001\002\000\026\004\057\024\054" +
    "\045\053\066\052\067\064\136\060\137\055\140\056\141" +
    "\067\142\051\001\002\000\026\004\057\024\054\045\053" +
    "\066\052\067\064\136\060\137\055\140\056\141\067\142" +
    "\051\001\002\000\034\002\uffe4\020\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\047\uffe4\061\uffe4\062\uffe4\064\uffe4\076" +
    "\uffe4\136\uffe4\143\uffe4\001\002\000\026\004\057\024\054" +
    "\045\053\066\052\067\064\136\060\137\055\140\056\141" +
    "\067\142\051\001\002\000\026\004\057\024\054\045\053" +
    "\066\052\067\064\136\060\137\055\140\056\141\067\142" +
    "\051\001\002\000\026\004\057\024\054\045\053\066\052" +
    "\067\064\136\060\137\055\140\056\141\067\142\051\001" +
    "\002\000\074\002\uff98\004\uff98\005\uff98\006\073\007\072" +
    "\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\020" +
    "\uff98\022\uff98\023\uff98\025\uff98\026\uff98\027\077\030\uff98" +
    "\031\uff98\033\076\040\uff98\041\uff98\042\uff98\043\uff98\047" +
    "\uff98\061\uff98\062\uff98\136\uff98\143\uff98\001\002\000\074" +
    "\002\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\022\uff94" +
    "\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\033" +
    "\076\040\uff94\041\uff94\042\uff94\043\uff94\047\uff94\061\uff94" +
    "\062\uff94\136\uff94\143\uff94\001\002\000\074\002\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\020\uff93\022\uff93\023\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\047\uff93\061\uff93\062\uff93\136" +
    "\uff93\143\uff93\001\002\000\074\002\uff97\004\uff97\005\uff97" +
    "\006\073\007\072\010\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\020\uff97\022\uff97\023\uff97\025\uff97\026\uff97" +
    "\027\077\030\uff97\031\uff97\033\076\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\047\uff97\061\uff97\062\uff97\136\uff97\143\uff97" +
    "\001\002\000\074\002\uff96\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\020\uff96\022\uff96\023\uff96\025\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\033\076\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\047\uff96\061\uff96\062\uff96\136\uff96\143\uff96\001\002\000" +
    "\074\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95\022" +
    "\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\033\076\040\uff95\041\uff95\042\uff95\043\uff95\047\uff95\061" +
    "\uff95\062\uff95\136\uff95\143\uff95\001\002\000\032\004\057" +
    "\024\054\025\122\032\126\045\053\066\052\067\064\136" +
    "\060\137\055\140\056\141\067\142\051\001\002\000\076" +
    "\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021\111" +
    "\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\033\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\047\uffb4" +
    "\061\uffb4\062\uffb4\136\uffb4\143\uffb4\001\002\000\026\004" +
    "\057\024\054\045\053\066\052\067\064\136\060\137\055" +
    "\140\056\141\067\142\051\001\002\000\004\136\114\001" +
    "\002\000\076\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\020" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\037\115\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\047\uffb3\061\uffb3\062\uffb3\136\uffb3\143\uffb3\001\002" +
    "\000\100\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\033\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\047\uffe6\061\uffe6\062\uffe6\136\uffe6\143\uffe6\001" +
    "\002\000\004\136\116\001\002\000\100\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\047\uffe7\061\uffe7" +
    "\062\uffe7\136\uffe7\143\uffe7\001\002\000\020\004\074\005" +
    "\100\006\073\007\072\022\120\027\077\033\076\001\002" +
    "\000\100\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\033\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\047\uffa5\061\uffa5\062\uffa5\136\uffa5\143\uffa5\001" +
    "\002\000\100\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\033\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\047\uffa7\061\uffa7\062\uffa7\136\uffa7\143\uffa7" +
    "\001\002\000\074\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\020\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\047\uffb6\061\uffb6\062\uffb6\136\uffb6\143\uffb6\001\002\000" +
    "\006\025\uffb1\026\uffb1\001\002\000\032\010\142\012\146" +
    "\013\144\014\145\015\uffa1\016\uffa1\020\uffa1\023\uffa1\025" +
    "\uffa1\026\uffa1\030\141\031\143\001\002\000\072\002\uff9a" +
    "\004\074\005\100\006\073\007\072\010\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\023\uff9a\025\uff9a" +
    "\026\uff9a\027\077\030\uff9a\031\uff9a\033\076\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\047\uff9a\061\uff9a\062\uff9a\136\uff9a" +
    "\143\uff9a\001\002\000\030\004\057\024\054\032\126\045" +
    "\053\066\052\067\064\136\060\137\055\140\056\141\067" +
    "\142\051\001\002\000\006\025\136\026\135\001\002\000" +
    "\014\015\131\016\132\020\uffb0\025\uffb0\026\uffb0\001\002" +
    "\000\030\004\057\024\054\032\126\045\053\066\052\067" +
    "\064\136\060\137\055\140\056\141\067\142\051\001\002" +
    "\000\030\004\057\024\054\032\126\045\053\066\052\067" +
    "\064\136\060\137\055\140\056\141\067\142\051\001\002" +
    "\000\016\015\uffa3\016\uffa3\020\uffa3\023\uffa3\025\uffa3\026" +
    "\uffa3\001\002\000\016\015\uffa4\016\132\020\uffa4\023\uffa4" +
    "\025\uffa4\026\uffa4\001\002\000\030\004\057\024\054\032" +
    "\126\045\053\066\052\067\064\136\060\137\055\140\056" +
    "\141\067\142\051\001\002\000\074\002\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\020\uffb5\022\uffb5\023\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\047\uffb5\061\uffb5\062\uffb5\136\uffb5\143" +
    "\uffb5\001\002\000\006\025\uffb2\026\uffb2\001\002\000\016" +
    "\015\uffa2\016\uffa2\020\uffa2\023\uffa2\025\uffa2\026\uffa2\001" +
    "\002\000\026\004\057\024\054\045\053\066\052\067\064" +
    "\136\060\137\055\140\056\141\067\142\051\001\002\000" +
    "\026\004\057\024\054\045\053\066\052\067\064\136\060" +
    "\137\055\140\056\141\067\142\051\001\002\000\026\004" +
    "\057\024\054\045\053\066\052\067\064\136\060\137\055" +
    "\140\056\141\067\142\051\001\002\000\026\004\057\024" +
    "\054\045\053\066\052\067\064\136\060\137\055\140\056" +
    "\141\067\142\051\001\002\000\026\004\057\024\054\045" +
    "\053\066\052\067\064\136\060\137\055\140\056\141\067" +
    "\142\051\001\002\000\026\004\057\024\054\045\053\066" +
    "\052\067\064\136\060\137\055\140\056\141\067\142\051" +
    "\001\002\000\056\002\uff9c\010\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\020\uff9c\023\uff9c\025\uff9c\026\uff9c" +
    "\030\uff9c\031\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\047" +
    "\uff9c\061\uff9c\062\uff9c\136\uff9c\143\uff9c\001\002\000\056" +
    "\002\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\020\uffa0\023\uffa0\025\uffa0\026\uffa0\030\uffa0\031\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\047\uffa0\061\uffa0\062" +
    "\uffa0\136\uffa0\143\uffa0\001\002\000\056\002\uff9f\010\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\023" +
    "\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\047\uff9f\061\uff9f\062\uff9f\136\uff9f\143" +
    "\uff9f\001\002\000\056\002\uff9d\010\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\020\uff9d\023\uff9d\025\uff9d\026" +
    "\uff9d\030\uff9d\031\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\047\uff9d\061\uff9d\062\uff9d\136\uff9d\143\uff9d\001\002\000" +
    "\056\002\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\020\uff9b\023\uff9b\025\uff9b\026\uff9b\030\uff9b\031" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\047\uff9b\061\uff9b" +
    "\062\uff9b\136\uff9b\143\uff9b\001\002\000\056\002\uff9e\010" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e" +
    "\023\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\047\uff9e\061\uff9e\062\uff9e\136\uff9e" +
    "\143\uff9e\001\002\000\074\002\uff99\004\uff99\005\uff99\006" +
    "\073\007\072\010\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\020\uff99\022\uff99\023\uff99\025\uff99\026\uff99\027" +
    "\077\030\uff99\031\uff99\033\076\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\047\uff99\061\uff99\062\uff99\136\uff99\143\uff99\001" +
    "\002\000\010\015\131\016\132\025\157\001\002\000\074" +
    "\002\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92\022\uff92" +
    "\023\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\033" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\047\uff92\061\uff92" +
    "\062\uff92\136\uff92\143\uff92\001\002\000\004\136\161\001" +
    "\002\000\004\025\162\001\002\000\074\002\uff88\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\020\uff88\022\uff88\023\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\033\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\047\uff88\061\uff88\062\uff88\136\uff88" +
    "\143\uff88\001\002\000\014\011\uffcb\021\uffcb\025\uffcb\026" +
    "\uffcb\136\uffcb\001\002\000\034\002\uffac\020\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\047\uffac\061\uffac\062\uffac\064" +
    "\uffac\076\uffac\136\uffac\143\uffac\001\002\000\030\004\057" +
    "\017\166\024\054\045\053\066\052\067\064\136\060\137" +
    "\055\140\056\141\067\142\051\001\002\000\032\004\057" +
    "\017\173\024\054\032\126\045\053\066\052\067\064\136" +
    "\060\137\055\140\056\141\067\142\051\001\002\000\020" +
    "\010\142\012\146\013\144\014\145\023\170\030\141\031" +
    "\143\001\002\000\034\002\uffa9\020\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\047\uffa9\061\uffa9\062\uffa9\064\uffa9\076" +
    "\uffa9\136\uffa9\143\uffa9\001\002\000\006\020\201\026\176" +
    "\001\002\000\006\020\uffd6\026\uffd6\001\002\000\032\004" +
    "\057\017\173\024\054\032\126\045\053\066\052\067\064" +
    "\136\060\137\055\140\056\141\067\142\051\001\002\000" +
    "\006\020\uffd8\026\uffd8\001\002\000\006\020\177\026\176" +
    "\001\002\000\032\004\057\017\173\024\054\032\126\045" +
    "\053\066\052\067\064\136\060\137\055\140\056\141\067" +
    "\142\051\001\002\000\006\020\uffd7\026\uffd7\001\002\000" +
    "\006\020\uffd9\026\uffd9\001\002\000\004\023\202\001\002" +
    "\000\034\002\uffaa\020\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\047\uffaa\061\uffaa\062\uffaa\064\uffaa\076\uffaa\136\uffaa" +
    "\143\uffaa\001\002\000\004\017\326\001\002\000\004\136" +
    "\325\001\002\000\004\136\322\001\002\000\006\025\211" +
    "\026\210\001\002\000\006\025\uffc7\026\uffc7\001\002\000" +
    "\016\040\021\041\007\042\016\043\015\136\204\143\011" +
    "\001\002\000\004\017\212\001\002\000\022\040\021\041" +
    "\007\042\016\043\015\064\224\076\222\136\214\143\011" +
    "\001\002\000\004\023\320\001\002\000\014\011\253\021" +
    "\111\024\107\037\252\136\251\001\002\000\024\020\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\064\uffb9\076\uffb9\136" +
    "\uffb9\143\uffb9\001\002\000\024\020\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\064\uffc2\076\uffc2\136\uffc2\143\uffc2\001" +
    "\002\000\024\020\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\064\uffc1\076\uffc1\136\uffc1\143\uffc1\001\002\000\024\020" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\064\uffbd\076\uffbd" +
    "\136\uffbd\143\uffbd\001\002\000\024\020\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\064\uffbb\076\uffbb\136\uffbb\143\uffbb" +
    "\001\002\000\004\024\240\001\002\000\024\020\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\064\uffc0\076\uffc0\136\uffc0" +
    "\143\uffc0\001\002\000\030\004\057\024\054\032\126\045" +
    "\053\066\052\067\064\136\060\137\055\140\056\141\067" +
    "\142\051\001\002\000\004\136\235\001\002\000\024\020" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\064\uffbf\076\uffbf" +
    "\136\uffbf\143\uffbf\001\002\000\024\020\233\040\021\041" +
    "\007\042\016\043\015\064\224\076\222\136\214\143\011" +
    "\001\002\000\024\020\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\064\uffb8\076\uffb8\136\uffb8\143\uffb8\001\002\000\024" +
    "\020\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\064\uffbc\076" +
    "\uffbc\136\uffbc\143\uffbc\001\002\000\024\020\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\064\uffba\076\uffba\136\uffba\143" +
    "\uffba\001\002\000\026\002\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\047\uffd3\061\uffd3\062\uffd3\136\uffd3\143\uffd3\001" +
    "\002\000\024\020\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\064\uffc3\076\uffc3\136\uffc3\143\uffc3\001\002\000\010\011" +
    "\047\021\045\023\044\001\002\000\010\015\131\016\132" +
    "\023\237\001\002\000\024\020\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\064\uffb7\076\uffb7\136\uffb7\143\uffb7\001\002" +
    "\000\004\141\241\001\002\000\006\025\243\026\242\001" +
    "\002\000\030\004\057\024\054\032\126\045\053\066\052" +
    "\067\064\136\060\137\055\140\056\141\067\142\051\001" +
    "\002\000\004\023\244\001\002\000\024\020\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\064\uffaf\076\uffaf\136\uffaf\143" +
    "\uffaf\001\002\000\006\025\246\026\135\001\002\000\004" +
    "\023\247\001\002\000\024\020\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\064\uffae\076\uffae\136\uffae\143\uffae\001\002" +
    "\000\006\011\315\021\111\001\002\000\006\011\302\023" +
    "\301\001\002\000\004\136\114\001\002\000\034\004\057" +
    "\006\257\017\255\024\054\045\053\046\254\066\052\067" +
    "\064\136\060\137\055\140\056\141\067\142\051\001\002" +
    "\000\004\024\266\001\002\000\032\004\057\017\173\024" +
    "\054\032\126\045\053\066\052\067\064\136\060\137\055" +
    "\140\056\141\067\142\051\001\002\000\020\010\142\012" +
    "\146\013\144\014\145\023\262\030\141\031\143\001\002" +
    "\000\004\136\260\001\002\000\004\023\261\001\002\000" +
    "\034\002\uffde\020\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\047\uffde\061\uffde\062\uffde\064\uffde\076\uffde\136\uffde\143" +
    "\uffde\001\002\000\034\002\uffdc\020\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\047\uffdc\061\uffdc\062\uffdc\064\uffdc\076" +
    "\uffdc\136\uffdc\143\uffdc\001\002\000\006\020\264\026\176" +
    "\001\002\000\004\023\265\001\002\000\034\002\uffdb\020" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\047\uffdb\061\uffdb" +
    "\062\uffdb\064\uffdb\076\uffdb\136\uffdb\143\uffdb\001\002\000" +
    "\004\045\267\001\002\000\004\024\270\001\002\000\004" +
    "\136\271\001\002\000\004\025\272\001\002\000\004\025" +
    "\273\001\002\000\004\023\274\001\002\000\034\002\uffeb" +
    "\020\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\047\uffeb\061" +
    "\uffeb\062\uffeb\064\uffeb\076\uffeb\136\uffeb\143\uffeb\001\002" +
    "\000\006\011\276\037\115\001\002\000\030\004\057\024" +
    "\054\032\126\045\053\066\052\067\064\136\060\137\055" +
    "\140\056\141\067\142\051\001\002\000\010\015\131\016" +
    "\132\023\300\001\002\000\034\002\uffec\020\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\047\uffec\061\uffec\062\uffec\064" +
    "\uffec\076\uffec\136\uffec\143\uffec\001\002\000\034\002\uffea" +
    "\020\uffea\040\uffea\041\uffea\042\uffea\043\uffea\047\uffea\061" +
    "\uffea\062\uffea\064\uffea\076\uffea\136\uffea\143\uffea\001\002" +
    "\000\030\004\057\024\054\045\053\046\303\066\052\067" +
    "\064\136\060\137\055\140\056\141\067\142\051\001\002" +
    "\000\004\024\306\001\002\000\020\010\142\012\146\013" +
    "\144\014\145\023\305\030\141\031\143\001\002\000\034" +
    "\002\uffe9\020\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\047" +
    "\uffe9\061\uffe9\062\uffe9\064\uffe9\076\uffe9\136\uffe9\143\uffe9" +
    "\001\002\000\004\045\307\001\002\000\004\024\310\001" +
    "\002\000\004\136\311\001\002\000\004\025\312\001\002" +
    "\000\004\025\313\001\002\000\004\023\314\001\002\000" +
    "\034\002\uffe8\020\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\047\uffe8\061\uffe8\062\uffe8\064\uffe8\076\uffe8\136\uffe8\143" +
    "\uffe8\001\002\000\026\004\057\024\054\045\053\066\052" +
    "\067\064\136\060\137\055\140\056\141\067\142\051\001" +
    "\002\000\020\010\142\012\146\013\144\014\145\023\317" +
    "\030\141\031\143\001\002\000\034\002\uffda\020\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\047\uffda\061\uffda\062\uffda" +
    "\064\uffda\076\uffda\136\uffda\143\uffda\001\002\000\024\020" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\064\uffbe\076\uffbe" +
    "\136\uffbe\143\uffbe\001\002\000\006\025\uffc8\026\uffc8\001" +
    "\002\000\010\021\036\025\uffc6\026\uffc6\001\002\000\010" +
    "\021\036\025\uffc4\026\uffc4\001\002\000\014\011\uffcd\021" +
    "\uffcd\025\uffcd\026\uffcd\136\uffcd\001\002\000\006\025\uffc5" +
    "\026\uffc5\001\002\000\022\040\021\041\007\042\016\043" +
    "\015\064\224\076\222\136\214\143\011\001\002\000\024" +
    "\020\330\040\021\041\007\042\016\043\015\064\224\076" +
    "\222\136\214\143\011\001\002\000\026\002\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\047\uffd2\061\uffd2\062\uffd2\136" +
    "\uffd2\143\uffd2\001\002\000\030\004\057\017\332\024\054" +
    "\045\053\066\052\067\064\136\060\137\055\140\056\141" +
    "\067\142\051\001\002\000\032\004\057\017\173\024\054" +
    "\032\126\045\053\066\052\067\064\136\060\137\055\140" +
    "\056\141\067\142\051\001\002\000\020\010\142\012\146" +
    "\013\144\014\145\023\334\030\141\031\143\001\002\000" +
    "\034\002\uffa8\020\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\047\uffa8\061\uffa8\062\uffa8\064\uffa8\076\uffa8\136\uffa8\143" +
    "\uffa8\001\002\000\006\020\336\026\176\001\002\000\004" +
    "\023\337\001\002\000\034\002\uffab\020\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\047\uffab\061\uffab\062\uffab\064\uffab" +
    "\076\uffab\136\uffab\143\uffab\001\002\000\004\024\341\001" +
    "\002\000\020\025\342\040\021\041\007\042\016\043\015" +
    "\136\204\143\011\001\002\000\004\017\350\001\002\000" +
    "\006\025\344\026\210\001\002\000\004\017\345\001\002" +
    "\000\022\040\021\041\007\042\016\043\015\064\224\076" +
    "\222\136\214\143\011\001\002\000\024\020\347\040\021" +
    "\041\007\042\016\043\015\064\224\076\222\136\214\143" +
    "\011\001\002\000\026\002\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\047\uffcf\061\uffcf\062\uffcf\136\uffcf\143\uffcf\001" +
    "\002\000\022\040\021\041\007\042\016\043\015\064\224" +
    "\076\222\136\214\143\011\001\002\000\024\020\352\040" +
    "\021\041\007\042\016\043\015\064\224\076\222\136\214" +
    "\143\011\001\002\000\026\002\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\047\uffce\061\uffce\062\uffce\136\uffce\143\uffce" +
    "\001\002\000\004\024\354\001\002\000\020\025\355\040" +
    "\021\041\007\042\016\043\015\136\204\143\011\001\002" +
    "\000\004\017\363\001\002\000\006\025\357\026\210\001" +
    "\002\000\004\017\360\001\002\000\022\040\021\041\007" +
    "\042\016\043\015\064\224\076\222\136\214\143\011\001" +
    "\002\000\024\020\362\040\021\041\007\042\016\043\015" +
    "\064\224\076\222\136\214\143\011\001\002\000\026\002" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\047\uffca\061\uffca" +
    "\062\uffca\136\uffca\143\uffca\001\002\000\022\040\021\041" +
    "\007\042\016\043\015\064\224\076\222\136\214\143\011" +
    "\001\002\000\024\020\365\040\021\041\007\042\016\043" +
    "\015\064\224\076\222\136\214\143\011\001\002\000\026" +
    "\002\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9\061" +
    "\uffc9\062\uffc9\136\uffc9\143\uffc9\001\002\000\004\017\367" +
    "\001\002\000\016\040\021\041\007\042\016\043\015\136" +
    "\371\143\011\001\002\000\020\020\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\136\ufff0\143\ufff0\001\002\000\004\136" +
    "\u0103\001\002\000\020\020\u0100\040\021\041\007\042\016" +
    "\043\015\136\371\143\011\001\002\000\004\136\374\001" +
    "\002\000\006\021\111\023\375\001\002\000\020\020\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\136\uffef\143\uffef\001" +
    "\002\000\006\021\111\023\377\001\002\000\020\020\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\136\uffed\143\uffed\001" +
    "\002\000\004\023\u0102\001\002\000\020\020\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\136\ufff1\143\ufff1\001\002\000" +
    "\026\002\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\047\ufff2" +
    "\061\ufff2\062\ufff2\136\ufff2\143\ufff2\001\002\000\004\023" +
    "\u0104\001\002\000\020\020\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\136\uffee\143\uffee\001\002\000\026\002\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\047\uffff\061\uffff\062\uffff" +
    "\136\uffff\143\uffff\001\002\000\004\002\001\001\002\000" +
    "\030\004\057\017\u0108\024\054\045\053\066\052\067\064" +
    "\136\060\137\055\140\056\141\067\142\051\001\002\000" +
    "\032\004\057\017\173\024\054\032\126\045\053\066\052" +
    "\067\064\136\060\137\055\140\056\141\067\142\051\001" +
    "\002\000\042\002\uffd5\010\142\012\146\013\144\014\145" +
    "\030\141\031\143\040\uffd5\041\uffd5\042\uffd5\043\uffd5\047" +
    "\uffd5\061\uffd5\062\uffd5\136\uffd5\143\uffd5\001\002\000\006" +
    "\020\u010b\026\176\001\002\000\026\002\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\047\uffd4\061\uffd4\062\uffd4\136\uffd4" +
    "\143\uffd4\001\002\000\010\011\302\023\301\024\u010d\001" +
    "\002\000\020\025\u010e\040\021\041\007\042\016\043\015" +
    "\136\204\143\011\001\002\000\004\017\u0114\001\002\000" +
    "\006\025\u0110\026\210\001\002\000\004\017\u0111\001\002" +
    "\000\022\040\021\041\007\042\016\043\015\064\224\076" +
    "\222\136\214\143\011\001\002\000\024\020\u0113\040\021" +
    "\041\007\042\016\043\015\064\224\076\222\136\214\143" +
    "\011\001\002\000\026\002\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\047\uffd0\061\uffd0\062\uffd0\136\uffd0\143\uffd0\001" +
    "\002\000\022\040\021\041\007\042\016\043\015\064\224" +
    "\076\222\136\214\143\011\001\002\000\024\020\u0116\040" +
    "\021\041\007\042\016\043\015\064\224\076\222\136\214" +
    "\143\011\001\002\000\026\002\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\047\uffd1\061\uffd1\062\uffd1\136\uffd1\143\uffd1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\042\002\012\003\016\007\003\010\013\011" +
    "\026\012\024\013\033\016\025\023\005\024\011\026\031" +
    "\027\021\030\017\031\032\032\030\050\027\001\001\000" +
    "\002\001\001\000\006\040\045\044\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\u0104\010" +
    "\013\011\026\012\024\013\033\016\025\023\005\024\011" +
    "\026\031\027\021\030\017\031\032\032\030\050\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\037\052\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\323\001\001\000\002" +
    "\001\001\000\012\040\045\044\042\051\037\052\040\001" +
    "\001\000\002\001\001\000\004\051\323\001\001\000\010" +
    "\005\205\014\206\050\204\001\001\000\004\040\120\001" +
    "\001\000\002\001\001\000\014\021\061\033\116\034\047" +
    "\041\064\042\060\001\001\000\002\001\001\000\014\021" +
    "\061\033\062\034\047\041\064\042\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\061\033\124\034\047\035\123\036\155" +
    "\041\064\042\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\061\033\154\034\047\041\064\042\060" +
    "\001\001\000\006\040\045\044\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\061\033\105" +
    "\034\047\041\064\042\060\001\001\000\014\021\061\033" +
    "\104\034\047\041\064\042\060\001\001\000\014\021\061" +
    "\033\103\034\047\041\064\042\060\001\001\000\002\001" +
    "\001\000\014\021\061\033\102\034\047\041\064\042\060" +
    "\001\001\000\014\021\061\033\101\034\047\041\064\042" +
    "\060\001\001\000\014\021\061\033\100\034\047\041\064" +
    "\042\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\021\061\033\124\034\047\035\123\036" +
    "\127\037\122\041\064\042\060\043\126\001\001\000\004" +
    "\040\120\001\001\000\014\021\061\033\116\034\047\041" +
    "\064\042\060\001\001\000\004\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\061\033\124\034\047\035\123" +
    "\036\137\041\064\042\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\061\033\124\034\047\035\123" +
    "\036\133\041\064\042\060\001\001\000\020\021\061\033" +
    "\124\034\047\035\123\036\132\041\064\042\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\061\033" +
    "\124\034\047\035\123\036\127\037\136\041\064\042\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\061\033\124\034\047\035\153\041\064" +
    "\042\060\001\001\000\016\021\061\033\124\034\047\035" +
    "\152\041\064\042\060\001\001\000\016\021\061\033\124" +
    "\034\047\035\151\041\064\042\060\001\001\000\016\021" +
    "\061\033\124\034\047\035\150\041\064\042\060\001\001" +
    "\000\016\021\061\033\124\034\047\035\147\041\064\042" +
    "\060\001\001\000\016\021\061\033\124\034\047\035\146" +
    "\041\064\042\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\061\033\124\034\047\035\166\041\064\042\060\001\001" +
    "\000\026\021\061\033\124\034\047\035\123\036\127\037" +
    "\171\041\064\042\060\045\170\046\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\021\061\033\124\034\047\035\123\036\127" +
    "\037\171\041\064\042\060\045\174\046\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\021\061\033\124" +
    "\034\047\035\123\036\127\037\171\041\064\042\060\046" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\320\050\204\001\001\000\002\001\001\000" +
    "\036\004\226\010\216\011\222\015\215\020\225\021\212" +
    "\022\217\023\214\024\011\026\230\030\220\031\231\032" +
    "\227\050\224\001\001\000\002\001\001\000\006\040\045" +
    "\044\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\061\033\124\034" +
    "\047\035\123\036\235\041\064\042\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\010\216\011\222\015" +
    "\233\020\225\021\212\022\217\023\214\024\011\026\230" +
    "\030\220\031\231\032\227\050\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\045\044\042\051\037\052" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\061\033\124\034" +
    "\047\035\123\036\127\037\122\041\064\042\060\043\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\120" +
    "\001\001\000\002\001\001\000\004\047\274\001\001\000" +
    "\016\021\061\033\124\034\047\035\255\041\064\042\060" +
    "\001\001\000\002\001\001\000\026\021\061\033\124\034" +
    "\047\035\123\036\127\037\171\041\064\042\060\045\262" +
    "\046\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\061\033\124\034\047\035\123" +
    "\036\276\041\064\042\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\061\033\124" +
    "\034\047\035\303\041\064\042\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\061\033\124\034\047\035\315\041\064\042\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\037\052\322\001\001\000" +
    "\004\051\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\326\010\216\011\222\015\215\020\225\021" +
    "\212\022\217\023\214\024\011\026\230\030\220\031\231" +
    "\032\227\050\224\001\001\000\034\010\216\011\222\015" +
    "\233\020\225\021\212\022\217\023\214\024\011\026\230" +
    "\030\220\031\231\032\227\050\224\001\001\000\002\001" +
    "\001\000\016\021\061\033\124\034\047\035\332\041\064" +
    "\042\060\001\001\000\026\021\061\033\124\034\047\035" +
    "\123\036\127\037\171\041\064\042\060\045\334\046\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\342\014\206\050\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\345" +
    "\010\216\011\222\015\215\020\225\021\212\022\217\023" +
    "\214\024\011\026\230\030\220\031\231\032\227\050\224" +
    "\001\001\000\034\010\216\011\222\015\233\020\225\021" +
    "\212\022\217\023\214\024\011\026\230\030\220\031\231" +
    "\032\227\050\224\001\001\000\002\001\001\000\036\004" +
    "\350\010\216\011\222\015\215\020\225\021\212\022\217" +
    "\023\214\024\011\026\230\030\220\031\231\032\227\050" +
    "\224\001\001\000\034\010\216\011\222\015\233\020\225" +
    "\021\212\022\217\023\214\024\011\026\230\030\220\031" +
    "\231\032\227\050\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\355\014\206\050\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\360\010\216\011\222\015\215\020\225\021\212\022" +
    "\217\023\214\024\011\026\230\030\220\031\231\032\227" +
    "\050\224\001\001\000\034\010\216\011\222\015\233\020" +
    "\225\021\212\022\217\023\214\024\011\026\230\030\220" +
    "\031\231\032\227\050\224\001\001\000\002\001\001\000" +
    "\036\004\363\010\216\011\222\015\215\020\225\021\212" +
    "\022\217\023\214\024\011\026\230\030\220\031\231\032" +
    "\227\050\224\001\001\000\034\010\216\011\222\015\233" +
    "\020\225\021\212\022\217\023\214\024\011\026\230\030" +
    "\220\031\231\032\227\050\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\371\017\367\050\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0100" +
    "\050\372\001\001\000\002\001\001\000\006\040\045\044" +
    "\375\001\001\000\002\001\001\000\004\040\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\061\033\124\034" +
    "\047\035\u0108\041\064\042\060\001\001\000\026\021\061" +
    "\033\124\034\047\035\123\036\127\037\171\041\064\042" +
    "\060\045\u0109\046\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\u010e\014\206\050\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\u0111\010\216\011" +
    "\222\015\215\020\225\021\212\022\217\023\214\024\011" +
    "\026\230\030\220\031\231\032\227\050\224\001\001\000" +
    "\034\010\216\011\222\015\233\020\225\021\212\022\217" +
    "\023\214\024\011\026\230\030\220\031\231\032\227\050" +
    "\224\001\001\000\002\001\001\000\036\004\u0114\010\216" +
    "\011\222\015\215\020\225\021\212\022\217\023\214\024" +
    "\011\026\230\030\220\031\231\032\227\050\224\001\001" +
    "\000\034\010\216\011\222\015\233\020\225\021\212\022" +
    "\217\023\214\024\011\026\230\030\220\031\231\032\227" +
    "\050\224\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<>();
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.left+1)+ " Columna "+(s.right+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 AST= a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int Lista1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int Lista1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> Lista1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	Lista1.add(instru);
				RESULT = Lista1;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= CONSTANTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUSION ::= Tfusion Tid Tllave_a DECLARACIONES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Struct(a,b,aleft,bleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUSION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES ::= DECLARACIONES DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_STRUCT ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_STRUCT ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_STRUCT ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION_FUSION ::= Tid Tpunto LISTA_ACCESOS_FUSION Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Fusion(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION_FUSION ::= Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Asignacion_Fusion(id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_FUSION ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_FUSION ::= Tid Tid Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion valor = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Fusion(tipo,id,valor,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_FUSION ::= Tid Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Declaracion_Fusion(tipo,id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_ACCESOS_FUSION ::= LISTA_ACCESOS_FUSION Tpunto Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_ACCESOS_FUSION ::= Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(a); RESULT = lista; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TIPODATO Tid Tigual OPERACION_NUMERICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODATO ::= Tent 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Entero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPODATO ::= Tdec 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Decimal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPODATO ::= Tchr 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Char; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPODATO ::= Tbul 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPODATO ::= Trstring 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.String; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // REFERENCIA ::= Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REFERENCIA ::= TIPODATO Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(a,origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Tid Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION_ARREGLO ::= Tid Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Asignacion_Arreglo(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION_ARREGLO ::= Tid DIMENSIONES Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Arreglo(a,b,c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LLAVES ::= LLAVES Tcoma LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Object> lst = a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLAVES ::= LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Object> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAVE ::= Tllave_a LLAVES Tllave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAVE ::= VALOR_PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONSTANTE ::= Tdefinir Tid OPERACION_RELACIONAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Definir(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONSTANTE ::= Tdefinir Tid Tllave_a LLAVES Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= TIPODATO Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= TIPODATO Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= Tid Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= Tid Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,e,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Integer> a = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(1); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DIMENSIONES_VACIAS ::= DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		ArrayList<Integer> lst = new ArrayList<>(); lst.add(1); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DIMENSION_VACIA ::= Tcorchete_a Tcorchete_c 
            {
              Integer RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION_VACIA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO ::= Tzro Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,b,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= Tzro Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= PARAMETROS Tcoma PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETRO ::= TIPODATO Tid 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETRO ::= Tid Tid 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETRO ::= TIPODATO Tid DIMENSIONES_VACIAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Arreglo(a,b,c,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTENIDO ::= CONTENIDO SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTENIDO ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= RETORNAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= LLAMADA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETORNAR ::= Tregresar OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LLAMADA ::= Tid Tpar_a Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LLAMADA ::= Tid Tpar_a VALORES_PARAMETROS Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ACCESO_ARREGLO ::= Tid DIMENSIONES 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_ARREGLO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ACCESO_STRUCT ::= Tid Tpunto LISTA_ACCESOS_FUSION 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_STRUCT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES_PARAMETROS ::= VALORES_PARAMETROS Tcoma VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES_PARAMETROS ::= VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> b = new LinkedList<>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR_PARAMETRO ::= OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_PARAMETRO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IMPRIMIR ::= Timp Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPRIMIR ::= Timp Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARREGLO ::= ARREGLO_SIMPLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DIMENSIONES ::= DIMENSIONES DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> lst = (LinkedList<Operacion>) a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DIMENSIONES ::= DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Operacion> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DIMENSION ::= Tcorchete_a OPERACION_NUMERICA Tcorchete_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION_LOGICA ::= OPERACION_LOGICA Tor OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.OR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACION_LOGICA ::= OPERACION_LOGICA Tand OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.AND, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACION_LOGICA ::= Tnot OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tigualigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tdiferente OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_RELACIONAL ::= OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_NUMERICA ::= Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmas OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpor OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tdiv OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmod OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpotencia OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_NUMERICA ::= Tpar_a OPERACION_LOGICA Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_NUMERICA ::= VALOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR ::= Tid 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR ::= Tentero 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR ::= Tdecimal 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR ::= Tcaracter 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR ::= Ttrue 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= Tcadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CADENA,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= Tfalse 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR ::= LLAMADA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(a,TipoOperacion.FUNCION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALOR ::= Tpesode Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.PESODE, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALOR ::= ACCESO_ARREGLO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALOR ::= ACCESO_STRUCT 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
