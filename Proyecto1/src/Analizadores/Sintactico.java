
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import Instrucciones.*;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import Instrucciones.Operacion.TipoOperacion;
import Tipos_Importantes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\027\010\000\002\006\004\000\002\006\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\006\000" +
    "\002\030\010\000\002\030\014\000\002\031\005\000\002" +
    "\031\007\000\002\031\015\000\002\063\005\000\002\063" +
    "\003\000\002\010\005\000\002\010\007\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\026\007\000\002\026\010\000\002" +
    "\011\006\000\002\032\010\000\002\032\007\000\002\060" +
    "\005\000\002\060\003\000\002\061\005\000\002\061\003" +
    "\000\002\012\005\000\002\012\007\000\002\013\012\000" +
    "\002\013\011\000\002\013\011\000\002\013\012\000\002" +
    "\013\013\000\002\013\012\000\002\067\004\000\002\067" +
    "\003\000\002\065\004\000\002\016\012\000\002\016\011" +
    "\000\002\005\005\000\002\005\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\005\000\002\004\004\000\002" +
    "\004\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\041\006" +
    "\000\002\042\006\000\002\056\012\000\002\055\012\000" +
    "\002\055\003\000\002\062\006\000\002\062\002\000\002" +
    "\033\011\000\002\034\004\000\002\035\004\000\002\037" +
    "\013\000\002\036\011\000\002\066\004\000\002\066\003" +
    "\000\002\057\006\000\002\057\005\000\002\020\005\000" +
    "\002\021\005\000\002\021\006\000\002\051\004\000\002" +
    "\052\005\000\002\053\005\000\002\053\003\000\002\047" +
    "\003\000\002\022\007\000\002\022\011\000\002\023\003" +
    "\000\002\024\006\000\002\024\012\000\002\024\012\000" +
    "\002\024\010\000\002\024\010\000\002\054\004\000\002" +
    "\054\003\000\002\050\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\004\000\002\046\003\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\003\000\002" +
    "\043\004\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\003\000\002\043\006\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\026\002\uffff\040\021\041\007\042\015\043" +
    "\014\047\024\061\010\062\023\137\005\144\011\001\002" +
    "\000\026\002\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\047" +
    "\ufffd\061\ufffd\062\ufffd\137\ufffd\144\ufffd\001\002\000\012" +
    "\011\257\021\112\037\255\137\u0155\001\002\000\026\002" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\047\ufff7\061\ufff7" +
    "\062\ufff7\137\ufff7\144\ufff7\001\002\000\006\021\uffe1\137" +
    "\uffe1\001\002\000\004\137\u0150\001\002\000\006\021\uffde" +
    "\137\uffde\001\002\000\054\002\uff94\020\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\047\uff94\050\uff94\051\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\064\uff94\077\uff94\137\uff94\144\uff94\001\002\000\004" +
    "\002\u014f\001\002\000\006\021\uffdf\137\uffdf\001\002\000" +
    "\006\021\uffe0\137\uffe0\001\002\000\026\002\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\047\ufffc\061\ufffc\062\ufffc\137" +
    "\ufffc\144\ufffc\001\002\000\026\002\000\040\021\041\007" +
    "\042\015\043\014\047\024\061\010\062\023\137\005\144" +
    "\011\001\002\000\026\002\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\047\ufff4\061\ufff4\062\ufff4\137\ufff4\144\ufff4\001" +
    "\002\000\006\021\uffe2\137\uffe2\001\002\000\026\002\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\047\ufff5\061\ufff5\062" +
    "\ufff5\137\ufff5\144\ufff5\001\002\000\004\137\u013f\001\002" +
    "\000\004\137\u0134\001\002\000\026\002\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\047\ufffa\061\ufffa\062\ufffa\137\ufffa" +
    "\144\ufffa\001\002\000\026\002\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\047\ufff8\061\ufff8\062\ufff8\137\ufff8\144\ufff8" +
    "\001\002\000\026\002\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\047\ufffb\061\ufffb\062\ufffb\137\ufffb\144\ufffb\001\002" +
    "\000\006\021\036\137\037\001\002\000\026\002\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\047\ufff2\061\ufff2\062\ufff2" +
    "\137\ufff2\144\ufff2\001\002\000\026\002\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\047\ufff6\061\ufff6\062\ufff6\137\ufff6" +
    "\144\ufff6\001\002\000\026\002\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\047\ufff3\061\ufff3\062\ufff3\137\ufff3\144\ufff3" +
    "\001\002\000\026\002\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\047\ufff9\061\ufff9\062\ufff9\137\ufff9\144\ufff9\001\002" +
    "\000\006\021\036\137\u0129\001\002\000\004\022\164\001" +
    "\002\000\012\011\047\021\045\023\043\024\042\001\002" +
    "\000\014\011\uffcb\021\uffcb\025\uffcb\026\uffcb\137\uffcb\001" +
    "\002\000\006\011\u0122\021\036\001\002\000\020\025\204" +
    "\040\021\041\007\042\015\043\014\137\205\144\011\001" +
    "\002\000\054\002\uffe4\020\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\064\uffe4" +
    "\077\uffe4\137\uffe4\144\uffe4\001\002\000\010\011\166\021" +
    "\112\023\165\001\002\000\032\004\057\022\164\024\054" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\100\002\uff8d\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\047\uff8d\061\uff8d" +
    "\062\uff8d\137\uff8d\144\uff8d\001\002\000\032\004\057\006" +
    "\067\024\054\044\064\045\053\066\052\067\065\137\060" +
    "\140\056\141\055\142\070\143\051\001\002\000\074\002" +
    "\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\012\uff74" +
    "\013\uff74\014\uff74\015\uff74\016\uff74\020\uff74\022\uff74\023" +
    "\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\033\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\047\uff74\061\uff74\062" +
    "\uff74\137\uff74\144\uff74\001\002\000\076\002\uff70\004\uff70" +
    "\005\uff70\006\uff70\007\uff70\010\uff70\012\uff70\013\uff70\014" +
    "\uff70\015\uff70\016\uff70\020\uff70\022\uff70\023\uff70\025\uff70" +
    "\026\uff70\027\uff70\030\uff70\031\uff70\033\uff70\034\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\047\uff70\061\uff70\062\uff70" +
    "\137\uff70\144\uff70\001\002\000\076\002\uff6f\004\uff6f\005" +
    "\uff6f\006\uff6f\007\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\020\uff6f\022\uff6f\023\uff6f\025\uff6f\026" +
    "\uff6f\027\uff6f\030\uff6f\031\uff6f\033\uff6f\034\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\047\uff6f\061\uff6f\062\uff6f\137" +
    "\uff6f\144\uff6f\001\002\000\004\024\161\001\002\000\032" +
    "\004\057\024\054\032\127\044\064\045\053\066\052\067" +
    "\065\137\060\140\056\141\055\142\070\143\051\001\002" +
    "\000\076\002\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010" +
    "\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\020\uff72" +
    "\022\uff72\023\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\033\uff72\034\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\047\uff72\061\uff72\062\uff72\137\uff72\144\uff72\001\002\000" +
    "\076\002\uff71\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71" +
    "\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71\020\uff71\022" +
    "\uff71\023\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
    "\033\uff71\034\uff71\040\uff71\041\uff71\042\uff71\043\uff71\047" +
    "\uff71\061\uff71\062\uff71\137\uff71\144\uff71\001\002\000\030" +
    "\004\057\024\054\044\064\045\053\066\052\067\065\137" +
    "\060\140\056\141\055\142\070\143\051\001\002\000\102" +
    "\002\uff73\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\012" +
    "\uff73\013\uff73\014\uff73\015\uff73\016\uff73\020\uff73\021\112" +
    "\022\uff73\023\uff73\024\110\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\033\uff73\037\113\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\047\uff73\061\uff73\062\uff73\137\uff73\144\uff73\001" +
    "\002\000\074\002\uff75\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\020" +
    "\uff75\022\uff75\023\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\031\uff75\033\uff75\040\uff75\041\uff75\042\uff75\043\uff75\047" +
    "\uff75\061\uff75\062\uff75\137\uff75\144\uff75\001\002\000\074" +
    "\002\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\012" +
    "\uff78\013\uff78\014\uff78\015\uff78\016\uff78\020\uff78\022\uff78" +
    "\023\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\033" +
    "\uff78\040\uff78\041\uff78\042\uff78\043\uff78\047\uff78\061\uff78" +
    "\062\uff78\137\uff78\144\uff78\001\002\000\020\004\075\005" +
    "\101\006\074\007\073\023\076\027\100\033\077\001\002" +
    "\000\076\002\uff6c\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\020\uff6c" +
    "\022\uff6c\023\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031" +
    "\uff6c\033\uff6c\034\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\047\uff6c\061\uff6c\062\uff6c\137\uff6c\144\uff6c\001\002\000" +
    "\076\002\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\020\uff6d\022" +
    "\uff6d\023\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\033\uff6d\034\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\047" +
    "\uff6d\061\uff6d\062\uff6d\137\uff6d\144\uff6d\001\002\000\074" +
    "\002\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\016\uff76\020\uff76\022\uff76" +
    "\023\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\033" +
    "\uff76\040\uff76\041\uff76\042\uff76\043\uff76\047\uff76\061\uff76" +
    "\062\uff76\137\uff76\144\uff76\001\002\000\004\137\071\001" +
    "\002\000\076\002\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e" +
    "\010\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\020" +
    "\uff6e\022\uff6e\023\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\033\uff6e\034\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\047\uff6e\061\uff6e\062\uff6e\137\uff6e\144\uff6e\001\002" +
    "\000\004\023\072\001\002\000\054\002\uffdc\020\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\077\uffdc\137\uffdc\144\uffdc\001\002" +
    "\000\030\004\057\024\054\044\064\045\053\066\052\067" +
    "\065\137\060\140\056\141\055\142\070\143\051\001\002" +
    "\000\030\004\057\024\054\044\064\045\053\066\052\067" +
    "\065\137\060\140\056\141\055\142\070\143\051\001\002" +
    "\000\030\004\057\024\054\044\064\045\053\066\052\067" +
    "\065\137\060\140\056\141\055\142\070\143\051\001\002" +
    "\000\054\002\uffe3\020\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\064\uffe3\077" +
    "\uffe3\137\uffe3\144\uffe3\001\002\000\030\004\057\024\054" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\030\004\057\024\054" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\030\004\057\024\054" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\074\002\uff7f\004\uff7f" +
    "\005\uff7f\006\074\007\073\010\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\020\uff7f\022\uff7f\023\uff7f\025\uff7f" +
    "\026\uff7f\027\100\030\uff7f\031\uff7f\033\077\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\047\uff7f\061\uff7f\062\uff7f\137\uff7f" +
    "\144\uff7f\001\002\000\074\002\uff7b\004\uff7b\005\uff7b\006" +
    "\uff7b\007\uff7b\010\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b" +
    "\016\uff7b\020\uff7b\022\uff7b\023\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\033\077\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\047\uff7b\061\uff7b\062\uff7b\137\uff7b\144\uff7b\001" +
    "\002\000\074\002\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\020" +
    "\uff7a\022\uff7a\023\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a" +
    "\031\uff7a\033\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\047" +
    "\uff7a\061\uff7a\062\uff7a\137\uff7a\144\uff7a\001\002\000\074" +
    "\002\uff7e\004\uff7e\005\uff7e\006\074\007\073\010\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\020\uff7e\022\uff7e" +
    "\023\uff7e\025\uff7e\026\uff7e\027\100\030\uff7e\031\uff7e\033" +
    "\077\040\uff7e\041\uff7e\042\uff7e\043\uff7e\047\uff7e\061\uff7e" +
    "\062\uff7e\137\uff7e\144\uff7e\001\002\000\074\002\uff7d\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\020\uff7d\022\uff7d\023\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\033\077\040\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\047\uff7d\061\uff7d\062\uff7d\137" +
    "\uff7d\144\uff7d\001\002\000\074\002\uff7c\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\016\uff7c\020\uff7c\022\uff7c\023\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\033\077\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\047\uff7c\061\uff7c\062\uff7c\137\uff7c\144\uff7c" +
    "\001\002\000\034\004\057\024\054\025\123\032\127\044" +
    "\064\045\053\066\052\067\065\137\060\140\056\141\055" +
    "\142\070\143\051\001\002\000\076\002\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\020\uff9b\021\112\022\uff9b\023\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\047\uff9b\061\uff9b\062\uff9b\137" +
    "\uff9b\144\uff9b\001\002\000\030\004\057\024\054\044\064" +
    "\045\053\066\052\067\065\137\060\140\056\141\055\142" +
    "\070\143\051\001\002\000\004\137\115\001\002\000\076" +
    "\002\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\022\uff9a" +
    "\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033" +
    "\uff9a\037\116\040\uff9a\041\uff9a\042\uff9a\043\uff9a\047\uff9a" +
    "\061\uff9a\062\uff9a\137\uff9a\144\uff9a\001\002\000\100\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\033\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047" +
    "\uffe5\061\uffe5\062\uffe5\137\uffe5\144\uffe5\001\002\000\004" +
    "\137\117\001\002\000\100\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\047\uffe6\061\uffe6\062\uffe6\137" +
    "\uffe6\144\uffe6\001\002\000\020\004\075\005\101\006\074" +
    "\007\073\022\121\027\100\033\077\001\002\000\100\002" +
    "\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\033\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047" +
    "\uff8c\061\uff8c\062\uff8c\137\uff8c\144\uff8c\001\002\000\100" +
    "\002\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\033\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\047\uff8e\061\uff8e\062\uff8e\137\uff8e\144\uff8e\001\002\000" +
    "\074\002\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d\022" +
    "\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\033\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\047\uff9d\061" +
    "\uff9d\062\uff9d\137\uff9d\144\uff9d\001\002\000\006\025\uff98" +
    "\026\uff98\001\002\000\056\002\uff88\010\143\012\147\013" +
    "\145\014\146\015\uff88\016\uff88\020\uff88\023\uff88\025\uff88" +
    "\026\uff88\030\142\031\144\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\047\uff88\061\uff88\062\uff88\137\uff88\144\uff88\001\002" +
    "\000\072\002\uff81\004\075\005\101\006\074\007\073\010" +
    "\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\020\uff81" +
    "\023\uff81\025\uff81\026\uff81\027\100\030\uff81\031\uff81\033" +
    "\077\040\uff81\041\uff81\042\uff81\043\uff81\047\uff81\061\uff81" +
    "\062\uff81\137\uff81\144\uff81\001\002\000\032\004\057\024" +
    "\054\032\127\044\064\045\053\066\052\067\065\137\060" +
    "\140\056\141\055\142\070\143\051\001\002\000\006\025" +
    "\137\026\136\001\002\000\014\015\132\016\133\020\uff97" +
    "\025\uff97\026\uff97\001\002\000\032\004\057\024\054\032" +
    "\127\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\032\004\057\024" +
    "\054\032\127\044\064\045\053\066\052\067\065\137\060" +
    "\140\056\141\055\142\070\143\051\001\002\000\042\002" +
    "\uff8a\015\uff8a\016\uff8a\020\uff8a\023\uff8a\025\uff8a\026\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\047\uff8a\061\uff8a\062" +
    "\uff8a\137\uff8a\144\uff8a\001\002\000\042\002\uff8b\015\uff8b" +
    "\016\133\020\uff8b\023\uff8b\025\uff8b\026\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\047\uff8b\061\uff8b\062\uff8b\137\uff8b" +
    "\144\uff8b\001\002\000\032\004\057\024\054\032\127\044" +
    "\064\045\053\066\052\067\065\137\060\140\056\141\055" +
    "\142\070\143\051\001\002\000\074\002\uff9c\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\020\uff9c\022\uff9c\023\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\047\uff9c\061\uff9c\062\uff9c\137\uff9c\144" +
    "\uff9c\001\002\000\006\025\uff99\026\uff99\001\002\000\042" +
    "\002\uff89\015\uff89\016\uff89\020\uff89\023\uff89\025\uff89\026" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\047\uff89\061\uff89" +
    "\062\uff89\137\uff89\144\uff89\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\030\004\057\024" +
    "\054\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\056\002\uff83\010" +
    "\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\020\uff83" +
    "\023\uff83\025\uff83\026\uff83\030\uff83\031\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\047\uff83\061\uff83\062\uff83\137\uff83" +
    "\144\uff83\001\002\000\056\002\uff87\010\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\020\uff87\023\uff87\025\uff87" +
    "\026\uff87\030\uff87\031\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\047\uff87\061\uff87\062\uff87\137\uff87\144\uff87\001\002" +
    "\000\056\002\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\020\uff86\023\uff86\025\uff86\026\uff86\030\uff86" +
    "\031\uff86\040\uff86\041\uff86\042\uff86\043\uff86\047\uff86\061" +
    "\uff86\062\uff86\137\uff86\144\uff86\001\002\000\056\002\uff84" +
    "\010\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\020" +
    "\uff84\023\uff84\025\uff84\026\uff84\030\uff84\031\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\047\uff84\061\uff84\062\uff84\137" +
    "\uff84\144\uff84\001\002\000\056\002\uff82\010\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\020\uff82\023\uff82\025" +
    "\uff82\026\uff82\030\uff82\031\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\047\uff82\061\uff82\062\uff82\137\uff82\144\uff82\001" +
    "\002\000\056\002\uff85\010\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\020\uff85\023\uff85\025\uff85\026\uff85\030" +
    "\uff85\031\uff85\040\uff85\041\uff85\042\uff85\043\uff85\047\uff85" +
    "\061\uff85\062\uff85\137\uff85\144\uff85\001\002\000\074\002" +
    "\uff80\004\uff80\005\uff80\006\074\007\073\010\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\020\uff80\022\uff80\023" +
    "\uff80\025\uff80\026\uff80\027\100\030\uff80\031\uff80\033\077" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\047\uff80\061\uff80\062" +
    "\uff80\137\uff80\144\uff80\001\002\000\010\015\132\016\133" +
    "\025\160\001\002\000\074\002\uff79\004\uff79\005\uff79\006" +
    "\uff79\007\uff79\010\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\020\uff79\022\uff79\023\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\uff79\031\uff79\033\uff79\040\uff79\041\uff79\042\uff79" +
    "\043\uff79\047\uff79\061\uff79\062\uff79\137\uff79\144\uff79\001" +
    "\002\000\004\137\162\001\002\000\004\025\163\001\002" +
    "\000\074\002\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010" +
    "\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\020\uff77" +
    "\022\uff77\023\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031" +
    "\uff77\033\uff77\040\uff77\041\uff77\042\uff77\043\uff77\047\uff77" +
    "\061\uff77\062\uff77\137\uff77\144\uff77\001\002\000\014\011" +
    "\uffca\021\uffca\025\uffca\026\uffca\137\uffca\001\002\000\054" +
    "\002\uff93\020\uff93\040\uff93\041\uff93\042\uff93\043\uff93\047" +
    "\uff93\050\uff93\051\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93\077\uff93\137" +
    "\uff93\144\uff93\001\002\000\032\004\057\017\167\024\054" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\034\004\057\017\174" +
    "\024\054\032\127\044\064\045\053\066\052\067\065\137" +
    "\060\140\056\141\055\142\070\143\051\001\002\000\020" +
    "\010\143\012\147\013\145\014\146\023\171\030\142\031" +
    "\144\001\002\000\054\002\uff90\020\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\047\uff90\050\uff90\051\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\064\uff90\077\uff90\137\uff90\144\uff90\001\002\000\006\020" +
    "\202\026\177\001\002\000\006\020\uffd5\026\uffd5\001\002" +
    "\000\034\004\057\017\174\024\054\032\127\044\064\045" +
    "\053\066\052\067\065\137\060\140\056\141\055\142\070" +
    "\143\051\001\002\000\006\020\uffd7\026\uffd7\001\002\000" +
    "\006\020\200\026\177\001\002\000\034\004\057\017\174" +
    "\024\054\032\127\044\064\045\053\066\052\067\065\137" +
    "\060\140\056\141\055\142\070\143\051\001\002\000\006" +
    "\020\uffd6\026\uffd6\001\002\000\006\020\uffd8\026\uffd8\001" +
    "\002\000\004\023\203\001\002\000\054\002\uff91\020\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\047\uff91\050\uff91\051" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\062\uff91\064\uff91\077\uff91\137\uff91\144\uff91\001" +
    "\002\000\004\017\u011f\001\002\000\004\137\u011e\001\002" +
    "\000\004\137\u011b\001\002\000\006\025\212\026\211\001" +
    "\002\000\006\025\uffc6\026\uffc6\001\002\000\016\040\021" +
    "\041\007\042\015\043\014\137\205\144\011\001\002\000" +
    "\004\017\213\001\002\000\036\040\021\041\007\042\015" +
    "\043\014\050\247\051\214\053\244\054\223\057\224\060" +
    "\230\064\220\077\236\137\251\144\011\001\002\000\004" +
    "\024\u0114\001\002\000\044\020\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\064\uffbc\077\uffbc\137\uffbc\144" +
    "\uffbc\001\002\000\044\020\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\064\uffb6\077\uffb6\137\uffb6\144\uffb6" +
    "\001\002\000\044\020\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\064\uffc1\077\uffc1\137\uffc1\144\uffc1\001" +
    "\002\000\032\004\057\024\054\032\127\044\064\045\053" +
    "\066\052\067\065\137\060\140\056\141\055\142\070\143" +
    "\051\001\002\000\044\020\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\064\uffbb\077\uffbb\137\uffbb\144\uffbb" +
    "\001\002\000\044\020\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\064\uffb9\077\uffb9\137\uffb9\144\uffb9\001" +
    "\002\000\004\024\u0102\001\002\000\004\023\u0101\001\002" +
    "\000\044\020\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\050" +
    "\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\064\uffb1\077\uffb1\137\uffb1\144\uffb1\001\002\000" +
    "\044\020\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\050\uffb0" +
    "\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\064\uffb0\077\uffb0\137\uffb0\144\uffb0\001\002\000\044" +
    "\020\uffba\040\uffba\041\uffba\042\uffba\043\uffba\050\uffba\051" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\064\uffba\077\uffba\137\uffba\144\uffba\001\002\000\004\023" +
    "\u0100\001\002\000\044\020\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\064\uffb7\077\uffb7\137\uffb7\144\uffb7" +
    "\001\002\000\044\020\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\064\uffb8\077\uffb8\137\uffb8\144\uffb8\001" +
    "\002\000\044\020\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\064\uffaf\077\uffaf\137\uffaf\144\uffaf\001\002" +
    "\000\004\137\377\001\002\000\044\020\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\064\uffb4\077\uffb4\137" +
    "\uffb4\144\uffb4\001\002\000\004\024\367\001\002\000\044" +
    "\020\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\050\uffb3\051" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\064\uffb3\077\uffb3\137\uffb3\144\uffb3\001\002\000\044\020" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\050\uffbf\051\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\064" +
    "\uffbf\077\uffbf\137\uffbf\144\uffbf\001\002\000\044\020\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\064\uffb2" +
    "\077\uffb2\137\uffb2\144\uffb2\001\002\000\044\020\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\050\uffc0\051\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\064\uffc0\077" +
    "\uffc0\137\uffc0\144\uffc0\001\002\000\044\020\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\050\uffb5\051\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\064\uffb5\077\uffb5" +
    "\137\uffb5\144\uffb5\001\002\000\004\017\357\001\002\000" +
    "\004\023\356\001\002\000\044\020\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\077\uffbe\137\uffbe" +
    "\144\uffbe\001\002\000\004\024\332\001\002\000\040\020" +
    "\331\040\021\041\007\042\015\043\014\050\247\051\214" +
    "\053\244\054\223\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\020\004\254\005\252\011\257" +
    "\021\112\024\110\037\255\137\256\001\002\000\004\005" +
    "\326\001\002\000\006\011\323\021\112\001\002\000\004" +
    "\004\321\001\002\000\004\137\115\001\002\000\006\011" +
    "\302\023\301\001\002\000\040\004\057\006\262\017\261" +
    "\024\054\032\127\044\064\045\053\046\260\066\052\067" +
    "\065\137\060\140\056\141\055\142\070\143\051\001\002" +
    "\000\004\024\272\001\002\000\034\004\057\017\174\024" +
    "\054\032\127\044\064\045\053\066\052\067\065\137\060" +
    "\140\056\141\055\142\070\143\051\001\002\000\004\137" +
    "\265\001\002\000\010\015\132\016\133\023\264\001\002" +
    "\000\054\002\uffdb\020\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\077" +
    "\uffdb\137\uffdb\144\uffdb\001\002\000\004\023\266\001\002" +
    "\000\054\002\uffdd\020\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd\077" +
    "\uffdd\137\uffdd\144\uffdd\001\002\000\006\020\270\026\177" +
    "\001\002\000\004\023\271\001\002\000\054\002\uffda\020" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\047\uffda\050\uffda" +
    "\051\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\064\uffda\077\uffda\137\uffda\144\uffda" +
    "\001\002\000\004\045\273\001\002\000\004\024\274\001" +
    "\002\000\004\137\275\001\002\000\004\025\276\001\002" +
    "\000\004\025\277\001\002\000\004\023\300\001\002\000" +
    "\054\002\uffea\020\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\064\uffea\077\uffea" +
    "\137\uffea\144\uffea\001\002\000\054\002\uffe9\020\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\064\uffe9\077\uffe9\137\uffe9\144\uffe9\001\002" +
    "\000\032\004\057\024\054\044\064\045\053\046\303\066" +
    "\052\067\065\137\060\140\056\141\055\142\070\143\051" +
    "\001\002\000\004\024\306\001\002\000\020\010\143\012" +
    "\147\013\145\014\146\023\305\030\142\031\144\001\002" +
    "\000\054\002\uffe8\020\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\077" +
    "\uffe8\137\uffe8\144\uffe8\001\002\000\004\045\307\001\002" +
    "\000\004\024\310\001\002\000\004\137\311\001\002\000" +
    "\004\025\312\001\002\000\004\025\313\001\002\000\004" +
    "\023\314\001\002\000\054\002\uffe7\020\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\064\uffe7\077\uffe7\137\uffe7\144\uffe7\001\002\000\006" +
    "\011\316\037\116\001\002\000\032\004\057\024\054\032" +
    "\127\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\010\015\132\016" +
    "\133\023\320\001\002\000\054\002\uffeb\020\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\047\uffeb\050\uffeb\051\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\064\uffeb\077\uffeb\137\uffeb\144\uffeb\001\002\000" +
    "\004\023\322\001\002\000\044\020\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\050\uffad\051\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\064\uffad\077\uffad\137\uffad" +
    "\144\uffad\001\002\000\032\004\057\024\054\032\127\044" +
    "\064\045\053\066\052\067\065\137\060\140\056\141\055" +
    "\142\070\143\051\001\002\000\010\015\132\016\133\023" +
    "\325\001\002\000\054\002\uffd9\020\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\064\uffd9\077\uffd9\137\uffd9\144\uffd9\001\002\000\004\023" +
    "\327\001\002\000\044\020\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\050\uffae\051\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\064\uffae\077\uffae\137\uffae\144\uffae" +
    "\001\002\000\044\020\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\064\uffc2\077\uffc2\137\uffc2\144\uffc2\001" +
    "\002\000\026\002\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\047\uffd2\061\uffd2\062\uffd2\137\uffd2\144\uffd2\001\002\000" +
    "\032\004\057\024\054\032\127\044\064\045\053\066\052" +
    "\067\065\137\060\140\056\141\055\142\070\143\051\001" +
    "\002\000\010\015\132\016\133\025\334\001\002\000\004" +
    "\017\335\001\002\000\036\040\021\041\007\042\015\043" +
    "\014\050\247\051\214\053\244\054\223\057\224\060\230" +
    "\064\220\077\236\137\251\144\011\001\002\000\040\020" +
    "\337\040\021\041\007\042\015\043\014\050\247\051\214" +
    "\053\244\054\223\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\050\020\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\064\uffa8\075\342\076\340" +
    "\077\uffa8\137\uffa8\144\uffa8\001\002\000\004\024\347\001" +
    "\002\000\044\020\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\050\uffaa\051\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\064\uffaa\077\uffaa\137\uffaa\144\uffaa\001\002" +
    "\000\004\017\344\001\002\000\044\020\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\050\uffac\051\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\064\uffac\077\uffac\137" +
    "\uffac\144\uffac\001\002\000\036\040\021\041\007\042\015" +
    "\043\014\050\247\051\214\053\244\054\223\057\224\060" +
    "\230\064\220\077\236\137\251\144\011\001\002\000\040" +
    "\020\346\040\021\041\007\042\015\043\014\050\247\051" +
    "\214\053\244\054\223\057\224\060\230\064\220\077\236" +
    "\137\251\144\011\001\002\000\044\020\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\064\uffa9\077\uffa9\137" +
    "\uffa9\144\uffa9\001\002\000\032\004\057\024\054\032\127" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\010\015\132\016\133" +
    "\025\351\001\002\000\004\017\352\001\002\000\036\040" +
    "\021\041\007\042\015\043\014\050\247\051\214\053\244" +
    "\054\223\057\224\060\230\064\220\077\236\137\251\144" +
    "\011\001\002\000\040\020\354\040\021\041\007\042\015" +
    "\043\014\050\247\051\214\053\244\054\223\057\224\060" +
    "\230\064\220\077\236\137\251\144\011\001\002\000\050" +
    "\020\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\050\uffa8\051" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\064\uffa8\075\342\076\340\077\uffa8\137\uffa8\144\uffa8\001" +
    "\002\000\044\020\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\050\uffab\051\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\064\uffab\077\uffab\137\uffab\144\uffab\001\002" +
    "\000\044\020\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\064\uffbd\077\uffbd\137\uffbd\144\uffbd\001\002\000" +
    "\036\040\021\041\007\042\015\043\014\050\247\051\214" +
    "\053\244\054\223\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\040\020\361\040\021\041\007" +
    "\042\015\043\014\050\247\051\214\053\244\054\223\057" +
    "\224\060\230\064\220\077\236\137\251\144\011\001\002" +
    "\000\004\065\362\001\002\000\004\024\363\001\002\000" +
    "\032\004\057\024\054\032\127\044\064\045\053\066\052" +
    "\067\065\137\060\140\056\141\055\142\070\143\051\001" +
    "\002\000\010\015\132\016\133\025\365\001\002\000\004" +
    "\023\366\001\002\000\044\020\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\064\uffa4\077\uffa4\137\uffa4\144" +
    "\uffa4\001\002\000\004\142\370\001\002\000\006\025\372" +
    "\026\371\001\002\000\032\004\057\024\054\032\127\044" +
    "\064\045\053\066\052\067\065\137\060\140\056\141\055" +
    "\142\070\143\051\001\002\000\004\023\373\001\002\000" +
    "\044\020\uff96\040\uff96\041\uff96\042\uff96\043\uff96\050\uff96" +
    "\051\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\064\uff96\077\uff96\137\uff96\144\uff96\001\002\000\006" +
    "\025\375\026\136\001\002\000\004\023\376\001\002\000" +
    "\044\020\uff95\040\uff95\041\uff95\042\uff95\043\uff95\050\uff95" +
    "\051\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\064\uff95\077\uff95\137\uff95\144\uff95\001\002\000\010" +
    "\011\047\021\045\023\043\001\002\000\044\020\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\050\uffa6\051\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\064\uffa6\077" +
    "\uffa6\137\uffa6\144\uffa6\001\002\000\044\020\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\050\uffa5\051\uffa5\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\064\uffa5\077\uffa5" +
    "\137\uffa5\144\uffa5\001\002\000\032\004\057\024\054\032" +
    "\127\044\064\045\053\066\052\067\065\137\060\140\056" +
    "\141\055\142\070\143\051\001\002\000\010\015\132\016" +
    "\133\025\u0104\001\002\000\004\017\u0105\001\002\000\006" +
    "\055\u0106\056\u0108\001\002\000\022\044\064\066\052\067" +
    "\065\137\u010f\140\056\141\055\142\070\143\051\001\002" +
    "\000\010\020\u010c\055\u0106\056\u0108\001\002\000\004\034" +
    "\u010a\001\002\000\010\020\uffa1\055\uffa1\056\uffa1\001\002" +
    "\000\036\040\021\041\007\042\015\043\014\050\247\051" +
    "\214\053\244\054\223\057\224\060\230\064\220\077\236" +
    "\137\251\144\011\001\002\000\044\020\uff9f\040\021\041" +
    "\007\042\015\043\014\050\247\051\214\053\244\054\223" +
    "\055\uff9f\056\uff9f\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\044\020\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\064\uffa3\077\uffa3\137\uffa3" +
    "\144\uffa3\001\002\000\010\020\uffa2\055\uffa2\056\uffa2\001" +
    "\002\000\004\034\u0110\001\002\000\004\034\uff73\001\002" +
    "\000\036\040\021\041\007\042\015\043\014\050\247\051" +
    "\214\053\244\054\223\057\224\060\230\064\220\077\236" +
    "\137\251\144\011\001\002\000\044\020\uffa0\040\021\041" +
    "\007\042\015\043\014\050\247\051\214\053\244\054\223" +
    "\055\uffa0\056\uffa0\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\010\015\132\016\133\023\u0113" +
    "\001\002\000\044\020\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\064\uff9e\077\uff9e\137\uff9e\144\uff9e\001" +
    "\002\000\032\004\057\024\054\032\127\044\064\045\053" +
    "\066\052\067\065\137\060\140\056\141\055\142\070\143" +
    "\051\001\002\000\010\015\132\016\133\025\u0116\001\002" +
    "\000\004\017\u0117\001\002\000\036\040\021\041\007\042" +
    "\015\043\014\050\247\051\214\053\244\054\223\057\224" +
    "\060\230\064\220\077\236\137\251\144\011\001\002\000" +
    "\040\020\u0119\040\021\041\007\042\015\043\014\050\247" +
    "\051\214\053\244\054\223\057\224\060\230\064\220\077" +
    "\236\137\251\144\011\001\002\000\044\020\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\050\uffa7\051\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\064\uffa7\077\uffa7" +
    "\137\uffa7\144\uffa7\001\002\000\006\025\uffc7\026\uffc7\001" +
    "\002\000\010\021\036\025\uffc5\026\uffc5\001\002\000\010" +
    "\021\036\025\uffc3\026\uffc3\001\002\000\014\011\uffcc\021" +
    "\uffcc\025\uffcc\026\uffcc\137\uffcc\001\002\000\006\025\uffc4" +
    "\026\uffc4\001\002\000\036\040\021\041\007\042\015\043" +
    "\014\050\247\051\214\053\244\054\223\057\224\060\230" +
    "\064\220\077\236\137\251\144\011\001\002\000\040\020" +
    "\u0121\040\021\041\007\042\015\043\014\050\247\051\214" +
    "\053\244\054\223\057\224\060\230\064\220\077\236\137" +
    "\251\144\011\001\002\000\026\002\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\047\uffd1\061\uffd1\062\uffd1\137\uffd1\144" +
    "\uffd1\001\002\000\032\004\057\017\u0123\024\054\044\064" +
    "\045\053\066\052\067\065\137\060\140\056\141\055\142" +
    "\070\143\051\001\002\000\034\004\057\017\174\024\054" +
    "\032\127\044\064\045\053\066\052\067\065\137\060\140" +
    "\056\141\055\142\070\143\051\001\002\000\020\010\143" +
    "\012\147\013\145\014\146\023\u0125\030\142\031\144\001" +
    "\002\000\054\002\uff8f\020\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\047\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f" +
    "\077\uff8f\137\uff8f\144\uff8f\001\002\000\006\020\u0127\026" +
    "\177\001\002\000\004\023\u0128\001\002\000\054\002\uff92" +
    "\020\uff92\040\uff92\041\uff92\042\uff92\043\uff92\047\uff92\050" +
    "\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\061\uff92\062\uff92\064\uff92\077\uff92\137\uff92\144" +
    "\uff92\001\002\000\004\024\u012a\001\002\000\020\025\u012b" +
    "\040\021\041\007\042\015\043\014\137\205\144\011\001" +
    "\002\000\004\017\u0131\001\002\000\006\025\u012d\026\211" +
    "\001\002\000\004\017\u012e\001\002\000\036\040\021\041" +
    "\007\042\015\043\014\050\247\051\214\053\244\054\223" +
    "\057\224\060\230\064\220\077\236\137\251\144\011\001" +
    "\002\000\040\020\u0130\040\021\041\007\042\015\043\014" +
    "\050\247\051\214\053\244\054\223\057\224\060\230\064" +
    "\220\077\236\137\251\144\011\001\002\000\026\002\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\047\uffce\061\uffce\062" +
    "\uffce\137\uffce\144\uffce\001\002\000\036\040\021\041\007" +
    "\042\015\043\014\050\247\051\214\053\244\054\223\057" +
    "\224\060\230\064\220\077\236\137\251\144\011\001\002" +
    "\000\040\020\u0133\040\021\041\007\042\015\043\014\050" +
    "\247\051\214\053\244\054\223\057\224\060\230\064\220" +
    "\077\236\137\251\144\011\001\002\000\026\002\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\047\uffcd\061\uffcd\062\uffcd" +
    "\137\uffcd\144\uffcd\001\002\000\004\024\u0135\001\002\000" +
    "\020\025\u0136\040\021\041\007\042\015\043\014\137\205" +
    "\144\011\001\002\000\004\017\u013c\001\002\000\006\025" +
    "\u0138\026\211\001\002\000\004\017\u0139\001\002\000\036" +
    "\040\021\041\007\042\015\043\014\050\247\051\214\053" +
    "\244\054\223\057\224\060\230\064\220\077\236\137\251" +
    "\144\011\001\002\000\040\020\u013b\040\021\041\007\042" +
    "\015\043\014\050\247\051\214\053\244\054\223\057\224" +
    "\060\230\064\220\077\236\137\251\144\011\001\002\000" +
    "\026\002\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9" +
    "\061\uffc9\062\uffc9\137\uffc9\144\uffc9\001\002\000\036\040" +
    "\021\041\007\042\015\043\014\050\247\051\214\053\244" +
    "\054\223\057\224\060\230\064\220\077\236\137\251\144" +
    "\011\001\002\000\040\020\u013e\040\021\041\007\042\015" +
    "\043\014\050\247\051\214\053\244\054\223\057\224\060" +
    "\230\064\220\077\236\137\251\144\011\001\002\000\026" +
    "\002\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\047\uffc8\061" +
    "\uffc8\062\uffc8\137\uffc8\144\uffc8\001\002\000\004\017\u0140" +
    "\001\002\000\016\040\021\041\007\042\015\043\014\137" +
    "\u0142\144\011\001\002\000\020\020\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\137\uffef\144\uffef\001\002\000\004\137" +
    "\u014c\001\002\000\020\020\u0149\040\021\041\007\042\015" +
    "\043\014\137\u0142\144\011\001\002\000\004\137\u0145\001" +
    "\002\000\006\021\112\023\u0146\001\002\000\020\020\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\137\uffee\144\uffee\001" +
    "\002\000\006\021\112\023\u0148\001\002\000\020\020\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\137\uffec\144\uffec\001" +
    "\002\000\004\023\u014b\001\002\000\020\020\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\137\ufff0\144\ufff0\001\002\000" +
    "\026\002\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\047\ufff1" +
    "\061\ufff1\062\ufff1\137\ufff1\144\ufff1\001\002\000\004\023" +
    "\u014d\001\002\000\020\020\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\137\uffed\144\uffed\001\002\000\026\002\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\047\ufffe\061\ufffe\062\ufffe" +
    "\137\ufffe\144\ufffe\001\002\000\004\002\001\001\002\000" +
    "\034\004\057\017\u0151\024\054\032\127\044\064\045\053" +
    "\066\052\067\065\137\060\140\056\141\055\142\070\143" +
    "\051\001\002\000\034\004\057\017\174\024\054\032\127" +
    "\044\064\045\053\066\052\067\065\137\060\140\056\141" +
    "\055\142\070\143\051\001\002\000\032\002\uffd4\015\132" +
    "\016\133\040\uffd4\041\uffd4\042\uffd4\043\uffd4\047\uffd4\061" +
    "\uffd4\062\uffd4\137\uffd4\144\uffd4\001\002\000\006\020\u0154" +
    "\026\177\001\002\000\026\002\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\047\uffd3\061\uffd3\062\uffd3\137\uffd3\144\uffd3" +
    "\001\002\000\010\011\302\023\301\024\u0156\001\002\000" +
    "\020\025\u0157\040\021\041\007\042\015\043\014\137\205" +
    "\144\011\001\002\000\004\017\u015d\001\002\000\006\025" +
    "\u0159\026\211\001\002\000\004\017\u015a\001\002\000\036" +
    "\040\021\041\007\042\015\043\014\050\247\051\214\053" +
    "\244\054\223\057\224\060\230\064\220\077\236\137\251" +
    "\144\011\001\002\000\040\020\u015c\040\021\041\007\042" +
    "\015\043\014\050\247\051\214\053\244\054\223\057\224" +
    "\060\230\064\220\077\236\137\251\144\011\001\002\000" +
    "\026\002\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\047\uffcf" +
    "\061\uffcf\062\uffcf\137\uffcf\144\uffcf\001\002\000\036\040" +
    "\021\041\007\042\015\043\014\050\247\051\214\053\244" +
    "\054\223\057\224\060\230\064\220\077\236\137\251\144" +
    "\011\001\002\000\040\020\u015f\040\021\041\007\042\015" +
    "\043\014\050\247\051\214\053\244\054\223\057\224\060" +
    "\230\064\220\077\236\137\251\144\011\001\002\000\026" +
    "\002\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\047\uffd0\061" +
    "\uffd0\062\uffd0\137\uffd0\144\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\042\002\012\003\016\007\003\010\015\011" +
    "\026\012\024\013\033\016\025\023\005\024\011\026\031" +
    "\027\021\030\017\031\032\032\030\064\027\001\001\000" +
    "\002\001\001\000\006\050\045\054\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\u014d\010" +
    "\015\011\026\012\024\013\033\016\025\023\005\024\011" +
    "\026\031\027\021\030\017\031\032\032\030\064\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\037\067\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u011c\001\001\000\002" +
    "\001\001\000\012\050\045\054\043\065\037\067\040\001" +
    "\001\000\002\001\001\000\004\065\u011c\001\001\000\010" +
    "\005\206\014\207\064\205\001\001\000\002\001\001\000" +
    "\004\050\121\001\001\000\014\021\061\043\117\044\047" +
    "\051\065\052\060\001\001\000\002\001\001\000\014\021" +
    "\061\043\062\044\047\051\065\052\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\061\043\125\044\047\045\124\046\156" +
    "\051\065\052\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\061\043\155\044\047\051\065\052\060" +
    "\001\001\000\006\050\045\054\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\061\043\106\044\047\051\065\052\060\001\001\000" +
    "\014\021\061\043\105\044\047\051\065\052\060\001\001" +
    "\000\014\021\061\043\104\044\047\051\065\052\060\001" +
    "\001\000\002\001\001\000\014\021\061\043\103\044\047" +
    "\051\065\052\060\001\001\000\014\021\061\043\102\044" +
    "\047\051\065\052\060\001\001\000\014\021\061\043\101" +
    "\044\047\051\065\052\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\061\043\125\044" +
    "\047\045\124\046\130\047\123\051\065\052\060\053\127" +
    "\001\001\000\004\050\121\001\001\000\014\021\061\043" +
    "\117\044\047\051\065\052\060\001\001\000\004\063\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\061\043\125" +
    "\044\047\045\124\046\140\051\065\052\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\061\043\125" +
    "\044\047\045\124\046\134\051\065\052\060\001\001\000" +
    "\020\021\061\043\125\044\047\045\124\046\133\051\065" +
    "\052\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\061\043\125\044\047\045\124\046\130\047\137" +
    "\051\065\052\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\061\043\125\044\047" +
    "\045\154\051\065\052\060\001\001\000\016\021\061\043" +
    "\125\044\047\045\153\051\065\052\060\001\001\000\016" +
    "\021\061\043\125\044\047\045\152\051\065\052\060\001" +
    "\001\000\016\021\061\043\125\044\047\045\151\051\065" +
    "\052\060\001\001\000\016\021\061\043\125\044\047\045" +
    "\150\051\065\052\060\001\001\000\016\021\061\043\125" +
    "\044\047\045\147\051\065\052\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\061\043\125\044\047\045\167\051\065" +
    "\052\060\001\001\000\026\021\061\043\125\044\047\045" +
    "\124\046\130\047\172\051\065\052\060\060\171\061\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\021\061\043\125\044\047" +
    "\045\124\046\130\047\172\051\065\052\060\060\175\061" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\021\061\043\125\044\047\045\124\046\130\047\172\051" +
    "\065\052\060\061\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u0119\064\205\001\001\000" +
    "\002\001\001\000\056\004\247\010\241\011\237\015\216" +
    "\020\245\021\244\022\214\023\231\024\011\026\220\030" +
    "\226\031\221\032\230\033\242\034\234\035\236\036\240" +
    "\037\224\041\225\042\232\056\215\064\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\061\043\125\044\047\045\124\046" +
    "\u0111\051\065\052\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\010\241\011" +
    "\237\015\327\020\245\021\244\022\214\023\231\024\011" +
    "\026\220\030\226\031\221\032\230\033\242\034\234\035" +
    "\236\036\240\037\224\041\225\042\232\056\215\064\233" +
    "\001\001\000\006\050\045\054\252\001\001\000\002\001" +
    "\001\000\004\050\121\001\001\000\002\001\001\000\004" +
    "\063\314\001\001\000\002\001\001\000\020\021\061\043" +
    "\125\044\047\045\124\046\262\051\065\052\060\001\001" +
    "\000\002\001\001\000\026\021\061\043\125\044\047\045" +
    "\124\046\130\047\172\051\065\052\060\060\266\061\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\061\043\125\044\047\045\303\051\065" +
    "\052\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\061" +
    "\043\125\044\047\045\124\046\316\051\065\052\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\061\043\125\044\047\045" +
    "\124\046\323\051\065\052\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\061\043\125" +
    "\044\047\045\124\046\332\051\065\052\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\004\335\010\241" +
    "\011\237\015\216\020\245\021\244\022\214\023\231\024" +
    "\011\026\220\030\226\031\221\032\230\033\242\034\234" +
    "\035\236\036\240\037\224\041\225\042\232\056\215\064" +
    "\233\001\001\000\054\010\241\011\237\015\327\020\245" +
    "\021\244\022\214\023\231\024\011\026\220\030\226\031" +
    "\221\032\230\033\242\034\234\035\236\036\240\037\224" +
    "\041\225\042\232\056\215\064\233\001\001\000\006\055" +
    "\342\062\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\344\010" +
    "\241\011\237\015\216\020\245\021\244\022\214\023\231" +
    "\024\011\026\220\030\226\031\221\032\230\033\242\034" +
    "\234\035\236\036\240\037\224\041\225\042\232\056\215" +
    "\064\233\001\001\000\054\010\241\011\237\015\327\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\002" +
    "\001\001\000\020\021\061\043\125\044\047\045\124\046" +
    "\347\051\065\052\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\352\010\241\011\237\015\216\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\054" +
    "\010\241\011\237\015\327\020\245\021\244\022\214\023" +
    "\231\024\011\026\220\030\226\031\221\032\230\033\242" +
    "\034\234\035\236\036\240\037\224\041\225\042\232\056" +
    "\215\064\233\001\001\000\006\055\354\062\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\357\010" +
    "\241\011\237\015\216\020\245\021\244\022\214\023\231" +
    "\024\011\026\220\030\226\031\221\032\230\033\242\034" +
    "\234\035\236\036\240\037\224\041\225\042\232\056\215" +
    "\064\233\001\001\000\054\010\241\011\237\015\327\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\061\043\125\044" +
    "\047\045\124\046\363\051\065\052\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\061\043\125\044\047" +
    "\045\124\046\130\047\123\051\065\052\060\053\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\050\045\054" +
    "\043\065\037\067\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\061\043\125\044\047\045\124\046" +
    "\u0102\051\065\052\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\u0108\066\u0106\001\001\000\004\044" +
    "\u010d\001\001\000\004\057\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\004\u010a\010\241\011\237\015" +
    "\216\020\245\021\244\022\214\023\231\024\011\026\220" +
    "\030\226\031\221\032\230\033\242\034\234\035\236\036" +
    "\240\037\224\041\225\042\232\056\215\064\233\001\001" +
    "\000\054\010\241\011\237\015\327\020\245\021\244\022" +
    "\214\023\231\024\011\026\220\030\226\031\221\032\230" +
    "\033\242\034\234\035\236\036\240\037\224\041\225\042" +
    "\232\056\215\064\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\004" +
    "\u0110\010\241\011\237\015\216\020\245\021\244\022\214" +
    "\023\231\024\011\026\220\030\226\031\221\032\230\033" +
    "\242\034\234\035\236\036\240\037\224\041\225\042\232" +
    "\056\215\064\233\001\001\000\054\010\241\011\237\015" +
    "\327\020\245\021\244\022\214\023\231\024\011\026\220" +
    "\030\226\031\221\032\230\033\242\034\234\035\236\036" +
    "\240\037\224\041\225\042\232\056\215\064\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\061\043" +
    "\125\044\047\045\124\046\u0114\051\065\052\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\u0117\010" +
    "\241\011\237\015\216\020\245\021\244\022\214\023\231" +
    "\024\011\026\220\030\226\031\221\032\230\033\242\034" +
    "\234\035\236\036\240\037\224\041\225\042\232\056\215" +
    "\064\233\001\001\000\054\010\241\011\237\015\327\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\065\037\067\u011b\001" +
    "\001\000\004\065\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\u011f\010\241\011\237\015\216\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\054" +
    "\010\241\011\237\015\327\020\245\021\244\022\214\023" +
    "\231\024\011\026\220\030\226\031\221\032\230\033\242" +
    "\034\234\035\236\036\240\037\224\041\225\042\232\056" +
    "\215\064\233\001\001\000\002\001\001\000\016\021\061" +
    "\043\125\044\047\045\u0123\051\065\052\060\001\001\000" +
    "\026\021\061\043\125\044\047\045\124\046\130\047\172" +
    "\051\065\052\060\060\u0125\061\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u012b\014" +
    "\207\064\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\004\u012e\010\241\011\237\015" +
    "\216\020\245\021\244\022\214\023\231\024\011\026\220" +
    "\030\226\031\221\032\230\033\242\034\234\035\236\036" +
    "\240\037\224\041\225\042\232\056\215\064\233\001\001" +
    "\000\054\010\241\011\237\015\327\020\245\021\244\022" +
    "\214\023\231\024\011\026\220\030\226\031\221\032\230" +
    "\033\242\034\234\035\236\036\240\037\224\041\225\042" +
    "\232\056\215\064\233\001\001\000\002\001\001\000\056" +
    "\004\u0131\010\241\011\237\015\216\020\245\021\244\022" +
    "\214\023\231\024\011\026\220\030\226\031\221\032\230" +
    "\033\242\034\234\035\236\036\240\037\224\041\225\042" +
    "\232\056\215\064\233\001\001\000\054\010\241\011\237" +
    "\015\327\020\245\021\244\022\214\023\231\024\011\026" +
    "\220\030\226\031\221\032\230\033\242\034\234\035\236" +
    "\036\240\037\224\041\225\042\232\056\215\064\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\u0136" +
    "\014\207\064\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\u0139\010\241\011\237" +
    "\015\216\020\245\021\244\022\214\023\231\024\011\026" +
    "\220\030\226\031\221\032\230\033\242\034\234\035\236" +
    "\036\240\037\224\041\225\042\232\056\215\064\233\001" +
    "\001\000\054\010\241\011\237\015\327\020\245\021\244" +
    "\022\214\023\231\024\011\026\220\030\226\031\221\032" +
    "\230\033\242\034\234\035\236\036\240\037\224\041\225" +
    "\042\232\056\215\064\233\001\001\000\002\001\001\000" +
    "\056\004\u013c\010\241\011\237\015\216\020\245\021\244" +
    "\022\214\023\231\024\011\026\220\030\226\031\221\032" +
    "\230\033\242\034\234\035\236\036\240\037\224\041\225" +
    "\042\232\056\215\064\233\001\001\000\054\010\241\011" +
    "\237\015\327\020\245\021\244\022\214\023\231\024\011" +
    "\026\220\030\226\031\221\032\230\033\242\034\234\035" +
    "\236\036\240\037\224\041\225\042\232\056\215\064\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\u0142\017\u0140\064\u0143\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0149\064\u0143\001\001\000\002\001" +
    "\001\000\006\050\045\054\u0146\001\001\000\002\001\001" +
    "\000\004\050\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\061\043\125\044\047\045\124\046\u0151\051\065" +
    "\052\060\001\001\000\026\021\061\043\125\044\047\045" +
    "\124\046\130\047\172\051\065\052\060\060\u0152\061\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u0157\014\207\064\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\u015a\010\241\011\237\015\216\020\245" +
    "\021\244\022\214\023\231\024\011\026\220\030\226\031" +
    "\221\032\230\033\242\034\234\035\236\036\240\037\224" +
    "\041\225\042\232\056\215\064\233\001\001\000\054\010" +
    "\241\011\237\015\327\020\245\021\244\022\214\023\231" +
    "\024\011\026\220\030\226\031\221\032\230\033\242\034" +
    "\234\035\236\036\240\037\224\041\225\042\232\056\215" +
    "\064\233\001\001\000\002\001\001\000\056\004\u015d\010" +
    "\241\011\237\015\216\020\245\021\244\022\214\023\231" +
    "\024\011\026\220\030\226\031\221\032\230\033\242\034" +
    "\234\035\236\036\240\037\224\041\225\042\232\056\215" +
    "\064\233\001\001\000\054\010\241\011\237\015\327\020" +
    "\245\021\244\022\214\023\231\024\011\026\220\030\226" +
    "\031\221\032\230\033\242\034\234\035\236\036\240\037" +
    "\224\041\225\042\232\056\215\064\233\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
	public static ArrayList<String> ErroresSintacticos = new ArrayList<>();
    
    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );  
        ErroresSintacticos.add("El analizador se recupero tras el error\nError en la Línea " + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

   ////////////////////////////
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.left+1)+ " Columna "+(s.right+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    
    public void setSalida(String cadena)
    {
        salida = cadena;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 AST= a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              String RESULT =null;
		 AST = new LinkedList<Instruccion>();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int Lista1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int Lista1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> Lista1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	Lista1.add(instru);
				RESULT = Lista1;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int instruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instru = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 	LinkedList<Instruccion> AST = new LinkedList<Instruccion>();
				AST.add(instru);
				RESULT = AST;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CONSTANTE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUSION ::= Tfusion Tid Tllave_a DECLARACIONES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Struct(a,b,aleft,bleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUSION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= DECLARACIONES DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARACION_STRUCT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_STRUCT ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_STRUCT ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_STRUCT ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION_FUSION ::= Tid Tpunto LISTA_ACCESOS_FUSION Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Fusion(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION_FUSION ::= Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Asignacion_Fusion(id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_FUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_FUSION ::= Tid Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_FUSION ::= Tid Tid Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion valor = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion_Fusion(tipo,id,valor,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_FUSION ::= Tid Tid Tigual Treservar Tpar_a Tpesode Tpar_a Tid Tpar_c Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Declaracion_Fusion(tipo,id,tipo2,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUSION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_ACCESOS_FUSION ::= LISTA_ACCESOS_FUSION Tpunto Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_ACCESOS_FUSION ::= Tid 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList<String> lista = new ArrayList<>(); lista.add(a); RESULT = lista; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ACCESOS_FUSION",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TIPODATO Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= TIPODATO Tid Tigual OPERACION_NUMERICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a,a,b, new Asignacion(b,c,bleft,bright) , bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPODATO ::= Tent 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Entero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPODATO ::= Tdec 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Decimal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPODATO ::= Tchr 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Char; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPODATO ::= Tbul 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.Bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPODATO ::= Trstring 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = Tipo.String; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REFERENCIA ::= Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REFERENCIA ::= TIPODATO Tid Tigual Tpor Tid Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Referencia(a,origen,destino,origenleft,origenright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REFERENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Tid Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION_ARREGLO ::= Tid Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Asignacion_Arreglo(a,b, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION_ARREGLO ::= Tid DIMENSIONES Tigual OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion_Arreglo(a,b,c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLAVES ::= LLAVES Tcoma LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Object> lst = a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAVES ::= LLAVE 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Object> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVES",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAVE ::= Tllave_a LLAVES Tllave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAVE ::= VALOR_PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAVE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONSTANTE ::= Tdefinir Tid OPERACION_LOGICA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Definir(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONSTANTE ::= Tdefinir Tid Tllave_a LLAVES Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= TIPODATO Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= TIPODATO Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= Tid Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= Tid Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,e,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= TIPODATO DIMENSIONES_VACIAS Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		ArrayList<Integer> b = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Funcion(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Integer> a = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(1); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DIMENSIONES_VACIAS ::= DIMENSION_VACIA 
            {
              ArrayList<Integer> RESULT =null;
		ArrayList<Integer> lst = new ArrayList<>(); lst.add(1); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DIMENSION_VACIA ::= Tcorchete_a Tcorchete_c 
            {
              Integer RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION_VACIA",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= Tzro Tid Tpar_a PARAMETROS Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,b,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= Tzro Tid Tpar_a Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Metodo(a,c,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= PARAMETROS Tcoma PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETRO ::= TIPODATO Tid 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,a,b, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETRO ::= Tid Tid 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Objeto(tipo,id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETRO ::= TIPODATO Tid DIMENSIONES_VACIAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion_Arreglo(a,b,c,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTENIDO ::= CONTENIDO SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTENIDO ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> b = new LinkedList<Instruccion>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= RETORNAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= LLAMADA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= REFERENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= ASIGNACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= DECLARACION_FUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= ASIGNACION_ARREGLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo_IF a = (Tipo_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= SEGUIR 
            {
              Instruccion RESULT =null;
		 RESULT = new Siguiente(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= BREAK 
            {
              Instruccion RESULT =null;
		RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INCREMENTO ::= Tid Tmas Tmas Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new Operador(a, Tipo.INCREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECREMENTO ::= Tid Tmenos Tmenos Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new Operador(a, Tipo.DECREMENTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECREMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_IF ::= Tif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              Tipo_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Tipo_IF(a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE_IF ::= Telseif Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c ELSE_IF 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Sentencia_IF> c = (LinkedList<Sentencia_IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 c.add( new Sentencia_IF(a,b,aleft,aright)); RESULT=c;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE_IF ::= ELSE 
            {
              LinkedList<Sentencia_IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia_IF a = (Sentencia_IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Sentencia_IF> lst =  new LinkedList<>(); lst.add(a);  RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSE ::= Telse Tllave_a CONTENIDO Tllave_c 
            {
              Sentencia_IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Sentencia_IF(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELSE ::= 
            {
              Sentencia_IF RESULT =null;
		 RESULT= new Sentencia_IF(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WHILE ::= Twhile Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CONTENIDO Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SEGUIR ::= Tsiga Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUIR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BREAK ::= Tromper Tpycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DO_WHILE ::= Trepeat Tllave_a CONTENIDO Tllave_c Twhen Tpar_a OPERACION_LOGICA Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DoWhile(b,a ,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SWITCH ::= Tswitch Tpar_a OPERACION_LOGICA Tpar_c Tllave_a CASOS Tllave_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Sentencia_Switch(a,b,aleft,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASOS ::= CASOS CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CASOS ::= CASO 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Case> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASO ::= Tcase VALOR Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASO ::= Tdefault Tdospuntos CONTENIDO 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RETORNAR ::= Tregresar OPERACION_LOGICA Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADA ::= Tid Tpar_a Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA ::= Tid Tpar_a VALORES_PARAMETROS Tpar_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCESO_ARREGLO ::= Tid DIMENSIONES 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_ARREGLO, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESO_STRUCT ::= Tid Tpunto LISTA_ACCESOS_FUSION 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.ACCESO_STRUCT, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORES_PARAMETROS ::= VALORES_PARAMETROS Tcoma VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES_PARAMETROS ::= VALOR_PARAMETRO 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> b = new LinkedList<>(); b.add(a); RESULT = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_PARAMETRO ::= OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_PARAMETRO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IMPRIMIR ::= Timp Tpar_a Tcadena Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IMPRIMIR ::= Timp Tpar_a Tcadena Tcoma VALORES_PARAMETROS Tpar_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> b = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Imprimir(new Operacion(a,TipoOperacion.CADENA,aleft,aright),b,aleft,aright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARREGLO ::= ARREGLO_SIMPLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> d = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,d,bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual Tllave_a LLAVES Tllave_c Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Operacion> c = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARREGLO_SIMPLE ::= TIPODATO Tid DIMENSIONES_VACIAS Tigual OPERACION_RELACIONAL Tpycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion d = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Arreglo(a,b,c,d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO_SIMPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DIMENSIONES ::= DIMENSIONES DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> a = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Operacion> lst = (LinkedList<Operacion>) a; lst.add(b); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DIMENSIONES ::= DIMENSION 
            {
              LinkedList<Operacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		LinkedList<Operacion> lst = new LinkedList<>(); lst.add(a); RESULT = lst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DIMENSION ::= Tcorchete_a OPERACION_NUMERICA Tcorchete_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_LOGICA ::= OPERACION_LOGICA Tor OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.OR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_LOGICA ::= OPERACION_LOGICA Tand OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.AND, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_LOGICA ::= Tnot OPERACION_LOGICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenor OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_QUE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmayorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MAYOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tmenorigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MENOR_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tigualigual OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.IGUAL_IGUAL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_RELACIONAL ::= OPERACION_RELACIONAL Tdiferente OPERACION_RELACIONAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIFERENTE, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_RELACIONAL ::= OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_NUMERICA ::= Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.NEGATIVO, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmas OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.SUMA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmenos OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.RESTA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpor OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MULTIPLICACION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tdiv OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.DIVISION, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tmod OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.MODULAR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_NUMERICA ::= OPERACION_NUMERICA Tpotencia OPERACION_NUMERICA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,b,TipoOperacion.POTENCIA, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_NUMERICA ::= Tpar_a OPERACION_LOGICA Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_NUMERICA ::= LLAMADA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(a,TipoOperacion.FUNCION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_NUMERICA ::= Tpesode Tpar_a Tid Tpar_c 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operacion(a, TipoOperacion.PESODE, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_NUMERICA ::= ACCESO_ARREGLO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_NUMERICA ::= ACCESO_STRUCT 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACION_NUMERICA ::= VALOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_NUMERICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALOR ::= Tid 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.IDENTIFICADOR, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALOR ::= Tentero 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VALOR ::= Tdecimal 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a, aright, aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VALOR ::= Tcaracter 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CARACTER, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VALOR ::= Ttrue 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VALOR ::= Tcadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.CADENA,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VALOR ::= Tfalse 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(a,TipoOperacion.BOOL, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VALOR ::= Tnlo 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(TipoOperacion.NULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
